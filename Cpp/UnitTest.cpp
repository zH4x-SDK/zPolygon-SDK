#include "pch.h"
#include "CppUnitTest.h"
#include "SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

#define CHEAT_GEAR_CHECK_OFFSET(targetClass, varName, expectedOffset) \
	Assert::AreEqual(uint32_t(expectedOffset), uint32_t(offsetof(targetClass, varName)), L#targetClass" -> "#varName".")

#define CHEAT_GEAR_CHECK_SIZE(targetClass, expectedSize) \
	Assert::AreEqual(uint32_t(expectedSize), uint32_t(sizeof(targetClass)), L#targetClass" Has a wrong size.")

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// class UUI_DarkenScreen_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_DarkenScreen__UI_DarkenScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DarkenScreen_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DarkenScreen_C, SmoothStart, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DarkenScreen_C, UnknownData_8LJF, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DarkenScreen_C, TargetOpacity, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_DarkenScreen_C, InterpSpeed, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_DarkenScreen_C, 0x0274);
		}

		// class UUI_Map_ControlPoint_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Map_ControlPoint__UI_Map_ControlPoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_ControlPoint_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_ControlPoint_C, ControlPointImage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_ControlPoint_C, MainOverlay, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_ControlPoint_C, ControlPointReference, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_ControlPoint_C, TargetOpacity, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_ControlPoint_C, MapSize, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Map_ControlPoint_C, 0x0288);
		}

		// class UUI_Map_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Map__UI_Map_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_C, Map, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_C, MapOverlay, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_C, Mat, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_C, Draw, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_C, UnknownData_CJVY, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_C, Zoom, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_C, UI_PlayerIcon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_C, MapInfo, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Map_C, 0x02F8);
		}

		// class UUI_Compass_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Compass__UI_Compass_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Compass_C, Image_Compass, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Compass_C, 0x0270);
		}

		// class UUWorksInterfaceCore : public UUWorksInterface
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCore)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCore, 0x0028);
		}

		// class UUWorksRequestCore : public UUWorksRequest
		TEST_METHOD(Class__UWorksCore__UWorksRequestCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCore, UnknownData_22IG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCore, 0x0038);
		}

		// class UUWorksInterfaceCoreAppList : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreAppList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreAppList, SteamAppInstalled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreAppList, SteamAppUninstalled, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreAppList, 0x0048);
		}

		// class UUWorksInterfaceCoreApps : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreApps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreApps, DlcInstalled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreApps, NewUrlLaunchParameters, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreApps, 0x0048);
		}

		// class UUWorksInterfaceCoreController : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreController, 0x0028);
		}

		// class UUWorksInterfaceCoreFriends : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreFriends)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreFriends, PersonaStateChange, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreFriends, GameOverlayActivated, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreFriends, GameServerChangeRequested, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreFriends, GameLobbyJoinRequested, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreFriends, AvatarImageLoaded, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreFriends, FriendRichPresenceUpdate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreFriends, GameRichPresenceJoinRequested, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreFriends, GameConnectedClanChatMsg, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreFriends, GameConnectedChatJoin, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreFriends, GameConnectedChatLeave, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreFriends, GameConnectedFriendChatMsg, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreFriends, 0x00D8);
		}

		// class UUWorksInterfaceCoreGameServer : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreGameServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreGameServer, GSPolicyResponse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreGameServer, GSClientGroupStatus, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreGameServer, GSValidateAuthTicketResponse, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreGameServer, 0x0058);
		}

		// class UUWorksInterfaceCoreGameServerStats : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreGameServerStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreGameServerStats, GSStatsUnloaded, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreGameServerStats, 0x0038);
		}

		// class UUWorksInterfaceCoreInventory : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreInventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreInventory, SteamInventoryResultReady, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreInventory, SteamInventoryFullUpdate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreInventory, SteamInventoryDefinitionUpdate, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreInventory, 0x0058);
		}

		// class UUWorksInterfaceCoreMatchmaking : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreMatchmaking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreMatchmaking, FavoritesListChanged, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreMatchmaking, LobbyInvite, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreMatchmaking, LobbyDataUpdate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreMatchmaking, LobbyEnter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreMatchmaking, LobbyChatUpdate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreMatchmaking, LobbyChatMsg, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreMatchmaking, LobbyGameCreated, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreMatchmaking, LobbyKicked, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreMatchmaking, FavoritesListAccountsUpdated, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreMatchmaking, 0x00B8);
		}

		// class UUWorksInterfaceCoreMatchmakingServers : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreMatchmakingServers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreMatchmakingServers, 0x0028);
		}

		// class UUWorksInterfaceCoreMusic : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreMusic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreMusic, PlaybackStatusHasChanged, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreMusic, VolumeHasChanged, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreMusic, 0x0048);
		}

		// class UUWorksInterfaceCoreNetworking : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreNetworking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreNetworking, P2PSessionRequest, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreNetworking, P2PSessionConnectFail, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreNetworking, 0x0048);
		}

		// class UUWorksInterfaceCoreRemoteStorage : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreRemoteStorage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreRemoteStorage, 0x0028);
		}

		// class UUWorksInterfaceCoreScreenshots : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreScreenshots)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreScreenshots, ScreenshotReady, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreScreenshots, ScreenshotRequested, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreScreenshots, 0x0048);
		}

		// class UUWorksInterfaceCoreUGC : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreUGC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUGC, ItemInstalled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUGC, DownloadItemResult, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreUGC, 0x0048);
		}

		// class UUWorksInterfaceCoreUser : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUser, UnknownData_3DH3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUser, SteamServersConnected, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUser, SteamServerConnectFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUser, SteamServersDisconnected, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUser, ClientGameServerDeny, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUser, IPCFailure, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUser, LicensesUpdated, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUser, ValidateAuthTicketResponse, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUser, MicroTxnAuthorizationResponse, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUser, GetAuthSessionTicketResponse, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUser, GameWebCallback, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreUser, 0x00D8);
		}

		// class UUWorksInterfaceCoreUserStats : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreUserStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUserStats, UserStatsReceived, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUserStats, UserStatsStored, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUserStats, UserAchievementStored, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUserStats, UserStatsUnloaded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUserStats, UserAchievementIconFetched, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreUserStats, 0x0078);
		}

		// class UUWorksInterfaceCoreUtils : public UUWorksInterfaceCore
		TEST_METHOD(Class__UWorksCore__UWorksInterfaceCoreUtils)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUtils, IPCountry, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUtils, LowBatteryPower, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUtils, SteamShutdown, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksInterfaceCoreUtils, GamepadTextInputDismissed, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceCoreUtils, 0x0068);
		}

		// class UUWorksRequestCoreGetFileDetails : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreGetFileDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreGetFileDetails, UnknownData_H0FN, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreGetFileDetails, OnRequestCompleted, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreGetFileDetails, OnRequestCompletedMinimal, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreGetFileDetails, 0x0090);
		}

		// class UUWorksRequestCoreSetPersonaName : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreSetPersonaName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSetPersonaName, UnknownData_KX63, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSetPersonaName, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSetPersonaName, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreSetPersonaName, 0x0070);
		}

		// class UUWorksRequestCoreDownloadClanActivityCounts : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreDownloadClanActivityCounts)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreDownloadClanActivityCounts, UnknownData_0Y3R, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreDownloadClanActivityCounts, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreDownloadClanActivityCounts, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreDownloadClanActivityCounts, 0x0070);
		}

		// class UUWorksRequestCoreRequestClanOfficerList : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreRequestClanOfficerList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestClanOfficerList, UnknownData_YSSP, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestClanOfficerList, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestClanOfficerList, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreRequestClanOfficerList, 0x0070);
		}

		// class UUWorksRequestCoreJoinClanChatRoom : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreJoinClanChatRoom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreJoinClanChatRoom, UnknownData_35I9, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreJoinClanChatRoom, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreJoinClanChatRoom, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreJoinClanChatRoom, 0x0070);
		}

		// class UUWorksRequestCoreGetFollowerCount : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreGetFollowerCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreGetFollowerCount, UnknownData_D9WN, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreGetFollowerCount, OnRequestCompleted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreGetFollowerCount, OnRequestCompletedMinimal, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreGetFollowerCount, 0x0078);
		}

		// class UUWorksRequestCoreIsFollowing : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreIsFollowing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreIsFollowing, UnknownData_31AW, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreIsFollowing, OnRequestCompleted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreIsFollowing, OnRequestCompletedMinimal, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreIsFollowing, 0x0078);
		}

		// class UUWorksRequestCoreEnumerateFollowingList : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreEnumerateFollowingList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreEnumerateFollowingList, UnknownData_15X2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreEnumerateFollowingList, OnRequestCompleted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreEnumerateFollowingList, OnRequestCompletedMinimal, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreEnumerateFollowingList, 0x0078);
		}

		// class UUWorksRequestCoreAssociateWithClan : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreAssociateWithClan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreAssociateWithClan, UnknownData_X8OU, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreAssociateWithClan, OnRequestCompleted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreAssociateWithClan, OnRequestCompletedMinimal, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreAssociateWithClan, 0x0068);
		}

		// class UUWorksRequestCoreComputeNewPlayerCompatibility : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreComputeNewPlayerCompatibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreComputeNewPlayerCompatibility, UnknownData_43DG, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreComputeNewPlayerCompatibility, OnRequestCompleted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreComputeNewPlayerCompatibility, OnRequestCompletedMinimal, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreComputeNewPlayerCompatibility, 0x0078);
		}

		// class UUWorksRequestCoreRequestUserStatsGS : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreRequestUserStatsGS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestUserStatsGS, UnknownData_VDES, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestUserStatsGS, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestUserStatsGS, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreRequestUserStatsGS, 0x0070);
		}

		// class UUWorksRequestCoreStoreUserStats : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreStoreUserStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreStoreUserStats, UnknownData_BR5E, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreStoreUserStats, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreStoreUserStats, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreStoreUserStats, 0x0070);
		}

		// class UUWorksRequestCoreRequestEligiblePromoItemDefinitionsIDs : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreRequestEligiblePromoItemDefinitionsIDs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestEligiblePromoItemDefinitionsIDs, UnknownData_3ZOB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestEligiblePromoItemDefinitionsIDs, OnRequestCompleted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestEligiblePromoItemDefinitionsIDs, OnRequestCompletedMinimal, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreRequestEligiblePromoItemDefinitionsIDs, 0x0078);
		}

		// class UUWorksRequestCoreRequestLobbyList : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreRequestLobbyList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestLobbyList, UnknownData_MLA3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestLobbyList, OnRequestCompleted, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestLobbyList, OnRequestCompletedMinimal, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreRequestLobbyList, 0x0060);
		}

		// class UUWorksRequestCoreCreateLobby : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreCreateLobby)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreCreateLobby, UnknownData_AUT9, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreCreateLobby, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreCreateLobby, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreCreateLobby, 0x0070);
		}

		// class UUWorksRequestCoreJoinLobby : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreJoinLobby)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreJoinLobby, UnknownData_NS33, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreJoinLobby, OnRequestCompleted, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreJoinLobby, OnRequestCompletedMinimal, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreJoinLobby, 0x0080);
		}

		// class UUWorksRequestCoreServerList : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreServerList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreServerList, UnknownData_76C7, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreServerList, OnRequestCompleted, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreServerList, OnRequestUpdated, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreServerList, OnRequestCompletedMinimal, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreServerList, OnRequestUpdatedMinimal, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreServerList, 0x0150);
		}

		// class UUWorksRequestCorePing : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCorePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCorePing, UnknownData_232D, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCorePing, OnRequestCompleted, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCorePing, OnRequestCompletedMinimal, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCorePing, 0x0100);
		}

		// class UUWorksRequestCorePlayers : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCorePlayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCorePlayers, UnknownData_IA7B, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCorePlayers, OnRequestCompleted, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCorePlayers, OnRequestUpdated, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCorePlayers, OnRequestCompletedMinimal, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCorePlayers, OnRequestUpdatedMinimal, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCorePlayers, 0x00B0);
		}

		// class UUWorksRequestCoreRules : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRules, UnknownData_RY5Q, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRules, OnRequestCompleted, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRules, OnRequestUpdated, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRules, OnRequestCompletedMinimal, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRules, OnRequestUpdatedMinimal, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreRules, 0x00B8);
		}

		// class UUWorksRequestCoreFileWriteAsync : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreFileWriteAsync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreFileWriteAsync, UnknownData_TMYO, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreFileWriteAsync, OnRequestCompleted, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreFileWriteAsync, OnRequestCompletedMinimal, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreFileWriteAsync, 0x0080);
		}

		// class UUWorksRequestCoreFileReadAsync : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreFileReadAsync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreFileReadAsync, UnknownData_4K69, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreFileReadAsync, OnRequestCompleted, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreFileReadAsync, OnRequestCompletedMinimal, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreFileReadAsync, 0x0088);
		}

		// class UUWorksRequestCoreSendQueryUGCRequest : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreSendQueryUGCRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSendQueryUGCRequest, UnknownData_SE1Q, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSendQueryUGCRequest, OnRequestCompleted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSendQueryUGCRequest, OnRequestCompletedMinimal, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreSendQueryUGCRequest, 0x0078);
		}

		// class UUWorksRequestCoreCreateItem : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreCreateItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreCreateItem, UnknownData_DOXU, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreCreateItem, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreCreateItem, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreCreateItem, 0x0070);
		}

		// class UUWorksRequestCoreSubmitItemUpdate : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreSubmitItemUpdate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSubmitItemUpdate, UnknownData_0B5A, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSubmitItemUpdate, OnRequestCompleted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSubmitItemUpdate, OnRequestCompletedMinimal, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreSubmitItemUpdate, 0x0078);
		}

		// class UUWorksRequestCoreSetUserItemVote : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreSetUserItemVote)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSetUserItemVote, UnknownData_1R0D, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSetUserItemVote, OnRequestCompleted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSetUserItemVote, OnRequestCompletedMinimal, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreSetUserItemVote, 0x0078);
		}

		// class UUWorksRequestCoreGetUserItemVote : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreGetUserItemVote)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreGetUserItemVote, UnknownData_3IN9, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreGetUserItemVote, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreGetUserItemVote, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreGetUserItemVote, 0x0070);
		}

		// class UUWorksRequestCoreAddItemToFavorites : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreAddItemToFavorites)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreAddItemToFavorites, UnknownData_W3FK, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreAddItemToFavorites, OnRequestCompleted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreAddItemToFavorites, OnRequestCompletedMinimal, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreAddItemToFavorites, 0x0078);
		}

		// class UUWorksRequestCoreRemoveItemFromFavorites : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreRemoveItemFromFavorites)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRemoveItemFromFavorites, UnknownData_0LC6, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRemoveItemFromFavorites, OnRequestCompleted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRemoveItemFromFavorites, OnRequestCompletedMinimal, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreRemoveItemFromFavorites, 0x0078);
		}

		// class UUWorksRequestCoreSubscribeItem : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreSubscribeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSubscribeItem, UnknownData_JJY6, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSubscribeItem, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreSubscribeItem, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreSubscribeItem, 0x0070);
		}

		// class UUWorksRequestCoreUnsubscribeItem : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreUnsubscribeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreUnsubscribeItem, UnknownData_YFGV, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreUnsubscribeItem, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreUnsubscribeItem, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreUnsubscribeItem, 0x0070);
		}

		// class UUWorksRequestCoreStartPlaytimeTracking : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreStartPlaytimeTracking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreStartPlaytimeTracking, UnknownData_OC8S, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreStartPlaytimeTracking, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreStartPlaytimeTracking, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreStartPlaytimeTracking, 0x0070);
		}

		// class UUWorksRequestCoreStopPlaytimeTracking : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreStopPlaytimeTracking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreStopPlaytimeTracking, UnknownData_Y6NZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreStopPlaytimeTracking, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreStopPlaytimeTracking, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreStopPlaytimeTracking, 0x0070);
		}

		// class UUWorksRequestCoreStopPlaytimeTrackingForAllItems : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreStopPlaytimeTrackingForAllItems)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreStopPlaytimeTrackingForAllItems, UnknownData_GQ0M, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreStopPlaytimeTrackingForAllItems, OnRequestCompleted, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreStopPlaytimeTrackingForAllItems, OnRequestCompletedMinimal, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreStopPlaytimeTrackingForAllItems, 0x0060);
		}

		// class UUWorksRequestCoreRequestEncryptedAppTicket : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreRequestEncryptedAppTicket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestEncryptedAppTicket, UnknownData_X1IQ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestEncryptedAppTicket, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestEncryptedAppTicket, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreRequestEncryptedAppTicket, 0x0070);
		}

		// class UUWorksRequestCoreRequestStoreAuthURL : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreRequestStoreAuthURL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestStoreAuthURL, UnknownData_IYNW, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestStoreAuthURL, OnRequestCompleted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestStoreAuthURL, OnRequestCompletedMinimal, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreRequestStoreAuthURL, 0x0078);
		}

		// class UUWorksRequestCoreRequestUserStats : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreRequestUserStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestUserStats, UnknownData_0QMH, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestUserStats, OnRequestCompleted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestUserStats, OnRequestCompletedMinimal, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreRequestUserStats, 0x0078);
		}

		// class UUWorksRequestCoreFindOrCreateLeaderboard : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreFindOrCreateLeaderboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreFindOrCreateLeaderboard, UnknownData_FBUA, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreFindOrCreateLeaderboard, OnRequestCompleted, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreFindOrCreateLeaderboard, OnRequestCompletedMinimal, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreFindOrCreateLeaderboard, 0x0080);
		}

		// class UUWorksRequestCoreFindLeaderboard : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreFindLeaderboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreFindLeaderboard, UnknownData_3K68, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreFindLeaderboard, OnRequestCompleted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreFindLeaderboard, OnRequestCompletedMinimal, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreFindLeaderboard, 0x0078);
		}

		// class UUWorksRequestCoreDownloadLeaderboardEntries : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreDownloadLeaderboardEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreDownloadLeaderboardEntries, UnknownData_ZP9B, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreDownloadLeaderboardEntries, OnRequestCompleted, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreDownloadLeaderboardEntries, OnRequestCompletedMinimal, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreDownloadLeaderboardEntries, 0x0088);
		}

		// class UUWorksRequestCoreDownloadLeaderboardEntriesForUsers : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreDownloadLeaderboardEntriesForUsers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreDownloadLeaderboardEntriesForUsers, UnknownData_JA3W, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreDownloadLeaderboardEntriesForUsers, OnRequestCompleted, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreDownloadLeaderboardEntriesForUsers, OnRequestCompletedMinimal, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreDownloadLeaderboardEntriesForUsers, 0x0088);
		}

		// class UUWorksRequestCoreUploadLeaderboardScore : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreUploadLeaderboardScore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreUploadLeaderboardScore, UnknownData_MFQH, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreUploadLeaderboardScore, OnRequestCompleted, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreUploadLeaderboardScore, OnRequestCompletedMinimal, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreUploadLeaderboardScore, 0x0098);
		}

		// class UUWorksRequestCoreAttachLeaderboardUGC : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreAttachLeaderboardUGC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreAttachLeaderboardUGC, UnknownData_WGV8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreAttachLeaderboardUGC, OnRequestCompleted, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreAttachLeaderboardUGC, OnRequestCompletedMinimal, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreAttachLeaderboardUGC, 0x0078);
		}

		// class UUWorksRequestCoreGetNumberOfCurrentPlayers : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreGetNumberOfCurrentPlayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreGetNumberOfCurrentPlayers, UnknownData_REC7, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreGetNumberOfCurrentPlayers, OnRequestCompleted, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreGetNumberOfCurrentPlayers, OnRequestCompletedMinimal, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreGetNumberOfCurrentPlayers, 0x0060);
		}

		// class UUWorksRequestCoreRequestGlobalAchievementPercentages : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreRequestGlobalAchievementPercentages)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestGlobalAchievementPercentages, UnknownData_29G8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestGlobalAchievementPercentages, OnRequestCompleted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestGlobalAchievementPercentages, OnRequestCompletedMinimal, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreRequestGlobalAchievementPercentages, 0x0068);
		}

		// class UUWorksRequestCoreRequestGlobalStats : public UUWorksRequestCore
		TEST_METHOD(Class__UWorksCore__UWorksRequestCoreRequestGlobalStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestGlobalStats, UnknownData_JZE5, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestGlobalStats, OnRequestCompleted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestCoreRequestGlobalStats, OnRequestCompletedMinimal, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestCoreRequestGlobalStats, 0x0070);
		}

		// class UCoreGetFileDetailsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreGetFileDetailsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreGetFileDetailsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreGetFileDetailsNode, 0x0040);
		}

		// class UCoreSetPersonaNameNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreSetPersonaNameNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreSetPersonaNameNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreSetPersonaNameNode, 0x0040);
		}

		// class UCoreDownloadClanActivityCountsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreDownloadClanActivityCountsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreDownloadClanActivityCountsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreDownloadClanActivityCountsNode, 0x0040);
		}

		// class UCoreRequestClanOfficerListNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreRequestClanOfficerListNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreRequestClanOfficerListNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreRequestClanOfficerListNode, 0x0040);
		}

		// class UCoreJoinClanChatRoomNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreJoinClanChatRoomNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreJoinClanChatRoomNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreJoinClanChatRoomNode, 0x0040);
		}

		// class UCoreGetFollowerCountNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreGetFollowerCountNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreGetFollowerCountNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreGetFollowerCountNode, 0x0040);
		}

		// class UCoreIsFollowingNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreIsFollowingNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreIsFollowingNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreIsFollowingNode, 0x0040);
		}

		// class UCoreEnumerateFollowingListNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreEnumerateFollowingListNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreEnumerateFollowingListNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreEnumerateFollowingListNode, 0x0040);
		}

		// class UCoreAssociateWithClanNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreAssociateWithClanNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreAssociateWithClanNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreAssociateWithClanNode, 0x0040);
		}

		// class UCoreComputeNewPlayerCompatibilityNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreComputeNewPlayerCompatibilityNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreComputeNewPlayerCompatibilityNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreComputeNewPlayerCompatibilityNode, 0x0040);
		}

		// class UCoreRequestUserStatsGSNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreRequestUserStatsGSNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreRequestUserStatsGSNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreRequestUserStatsGSNode, 0x0040);
		}

		// class UCoreStoreUserStatsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreStoreUserStatsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStoreUserStatsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreStoreUserStatsNode, 0x0040);
		}

		// class UCoreRequestEligiblePromoItemDefinitionsIDsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreRequestEligiblePromoItemDefinitionsIDsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreRequestEligiblePromoItemDefinitionsIDsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreRequestEligiblePromoItemDefinitionsIDsNode, 0x0040);
		}

		// class UCoreRequestLobbyListNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreRequestLobbyListNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreRequestLobbyListNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreRequestLobbyListNode, 0x0040);
		}

		// class UCoreCreateLobbyNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreCreateLobbyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreCreateLobbyNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreCreateLobbyNode, 0x0040);
		}

		// class UCoreJoinLobbyNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreJoinLobbyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreJoinLobbyNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreJoinLobbyNode, 0x0040);
		}

		// class UCoreServerListNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreServerListNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreServerListNode, Updated, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreServerListNode, UnknownData_0D5G, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreServerListNode, 0x0050);
		}

		// class UCorePingNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CorePingNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePingNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCorePingNode, 0x0040);
		}

		// class UCorePlayersNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CorePlayersNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePlayersNode, Updated, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePlayersNode, UnknownData_S8X7, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCorePlayersNode, 0x0050);
		}

		// class UCoreRulesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreRulesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreRulesNode, Updated, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreRulesNode, UnknownData_6VPI, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreRulesNode, 0x0050);
		}

		// class UCoreFileWriteAsyncNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreFileWriteAsyncNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreFileWriteAsyncNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreFileWriteAsyncNode, 0x0040);
		}

		// class UCoreFileReadAsyncNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreFileReadAsyncNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreFileReadAsyncNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreFileReadAsyncNode, 0x0040);
		}

		// class UCoreSendQueryUGCRequestNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreSendQueryUGCRequestNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreSendQueryUGCRequestNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreSendQueryUGCRequestNode, 0x0040);
		}

		// class UCoreCreateItemNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreCreateItemNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreCreateItemNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreCreateItemNode, 0x0040);
		}

		// class UCoreSubmitItemUpdateNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreSubmitItemUpdateNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreSubmitItemUpdateNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreSubmitItemUpdateNode, 0x0040);
		}

		// class UCoreSetUserItemVoteNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreSetUserItemVoteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreSetUserItemVoteNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreSetUserItemVoteNode, 0x0040);
		}

		// class UCoreGetUserItemVoteNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreGetUserItemVoteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreGetUserItemVoteNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreGetUserItemVoteNode, 0x0040);
		}

		// class UCoreAddItemToFavoritesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreAddItemToFavoritesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreAddItemToFavoritesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreAddItemToFavoritesNode, 0x0040);
		}

		// class UCoreRemoveItemFromFavoritesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreRemoveItemFromFavoritesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreRemoveItemFromFavoritesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreRemoveItemFromFavoritesNode, 0x0040);
		}

		// class UCoreSubscribeItemNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreSubscribeItemNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreSubscribeItemNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreSubscribeItemNode, 0x0040);
		}

		// class UCoreUnsubscribeItemNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreUnsubscribeItemNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreUnsubscribeItemNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreUnsubscribeItemNode, 0x0040);
		}

		// class UCoreStartPlaytimeTrackingNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreStartPlaytimeTrackingNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStartPlaytimeTrackingNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreStartPlaytimeTrackingNode, 0x0040);
		}

		// class UCoreStopPlaytimeTrackingNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreStopPlaytimeTrackingNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStopPlaytimeTrackingNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreStopPlaytimeTrackingNode, 0x0040);
		}

		// class UCoreStopPlaytimeTrackingForAllItemsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreStopPlaytimeTrackingForAllItemsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStopPlaytimeTrackingForAllItemsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreStopPlaytimeTrackingForAllItemsNode, 0x0040);
		}

		// class UCoreRequestEncryptedAppTicketNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreRequestEncryptedAppTicketNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreRequestEncryptedAppTicketNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreRequestEncryptedAppTicketNode, 0x0040);
		}

		// class UCoreRequestStoreAuthURLNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreRequestStoreAuthURLNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreRequestStoreAuthURLNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreRequestStoreAuthURLNode, 0x0040);
		}

		// class UCoreRequestUserStatsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreRequestUserStatsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreRequestUserStatsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreRequestUserStatsNode, 0x0040);
		}

		// class UCoreFindOrCreateLeaderboardNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreFindOrCreateLeaderboardNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreFindOrCreateLeaderboardNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreFindOrCreateLeaderboardNode, 0x0040);
		}

		// class UCoreFindLeaderboardNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreFindLeaderboardNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreFindLeaderboardNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreFindLeaderboardNode, 0x0040);
		}

		// class UCoreDownloadLeaderboardEntriesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreDownloadLeaderboardEntriesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreDownloadLeaderboardEntriesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreDownloadLeaderboardEntriesNode, 0x0040);
		}

		// class UCoreDownloadLeaderboardEntriesForUsersNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreDownloadLeaderboardEntriesForUsersNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreDownloadLeaderboardEntriesForUsersNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreDownloadLeaderboardEntriesForUsersNode, 0x0040);
		}

		// class UCoreUploadLeaderboardScoreNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreUploadLeaderboardScoreNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreUploadLeaderboardScoreNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreUploadLeaderboardScoreNode, 0x0040);
		}

		// class UCoreAttachLeaderboardUGCNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreAttachLeaderboardUGCNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreAttachLeaderboardUGCNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreAttachLeaderboardUGCNode, 0x0040);
		}

		// class UCoreGetNumberOfCurrentPlayersNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreGetNumberOfCurrentPlayersNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreGetNumberOfCurrentPlayersNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreGetNumberOfCurrentPlayersNode, 0x0040);
		}

		// class UCoreRequestGlobalAchievementPercentagesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreRequestGlobalAchievementPercentagesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreRequestGlobalAchievementPercentagesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreRequestGlobalAchievementPercentagesNode, 0x0040);
		}

		// class UCoreRequestGlobalStatsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksCore__CoreRequestGlobalStatsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreRequestGlobalStatsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreRequestGlobalStatsNode, 0x0040);
		}

		// class UUWorksInterfaceWeb : public UUWorksInterface
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWeb)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWeb, 0x0028);
		}

		// class UUWorksInterfaceWebApps : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebApps)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebApps, 0x0028);
		}

		// class UUWorksInterfaceWebBroadcast : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebBroadcast)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebBroadcast, 0x0028);
		}

		// class UUWorksInterfaceWebCheatReporting : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebCheatReporting)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebCheatReporting, 0x0028);
		}

		// class UUWorksInterfaceWebCommunity : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebCommunity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebCommunity, 0x0028);
		}

		// class UUWorksInterfaceWebEcon : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebEcon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebEcon, 0x0028);
		}

		// class UUWorksInterfaceWebEconMarket : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebEconMarket)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebEconMarket, 0x0028);
		}

		// class UUWorksInterfaceWebEconomy : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebEconomy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebEconomy, 0x0028);
		}

		// class UUWorksInterfaceWebGameInventory : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebGameInventory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebGameInventory, 0x0028);
		}

		// class UUWorksInterfaceWebGameNotifications : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebGameNotifications)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebGameNotifications, 0x0028);
		}

		// class UUWorksInterfaceWebGameServers : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebGameServers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebGameServers, 0x0028);
		}

		// class UUWorksInterfaceWebGameServerStats : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebGameServerStats)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebGameServerStats, 0x0028);
		}

		// class UUWorksInterfaceWebInventory : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebInventory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebInventory, 0x0028);
		}

		// class UUWorksInterfaceWebLeaderboards : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebLeaderboards)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebLeaderboards, 0x0028);
		}

		// class UUWorksInterfaceWebMicroTxn : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebMicroTxn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebMicroTxn, 0x0028);
		}

		// class UUWorksInterfaceWebNews : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebNews)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebNews, 0x0028);
		}

		// class UUWorksInterfaceWebPlayer : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebPlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebPlayer, 0x0028);
		}

		// class UUWorksInterfaceWebPublishedFile : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebPublishedFile)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebPublishedFile, 0x0028);
		}

		// class UUWorksInterfaceWebPublishedItemSearch : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebPublishedItemSearch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebPublishedItemSearch, 0x0028);
		}

		// class UUWorksInterfaceWebPublishedItemVoting : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebPublishedItemVoting)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebPublishedItemVoting, 0x0028);
		}

		// class UUWorksInterfaceWebRemoteStorage : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebRemoteStorage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebRemoteStorage, 0x0028);
		}

		// class UUWorksInterfaceWebUser : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebUser)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebUser, 0x0028);
		}

		// class UUWorksInterfaceWebUserAuth : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebUserAuth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebUserAuth, 0x0028);
		}

		// class UUWorksInterfaceWebUserStats : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebUserStats)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebUserStats, 0x0028);
		}

		// class UUWorksInterfaceWebWorkshop : public UUWorksInterfaceWeb
		TEST_METHOD(Class__UWorksWeb__UWorksInterfaceWebWorkshop)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterfaceWebWorkshop, 0x0028);
		}

		// class UUWorksRequestWeb : public UUWorksRequest
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWeb)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWeb, UnknownData_V4I6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWeb, 0x00A0);
		}

		// class UUWorksRequestWebGetAppBetas : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetAppBetas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAppBetas, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAppBetas, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetAppBetas, 0x00C0);
		}

		// class UUWorksRequestWebGetAppBuilds : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetAppBuilds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAppBuilds, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAppBuilds, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetAppBuilds, 0x00C0);
		}

		// class UUWorksRequestWebGetAppDepotVersions : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetAppDepotVersions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAppDepotVersions, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAppDepotVersions, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetAppDepotVersions, 0x00C0);
		}

		// class UUWorksRequestWebGetAppList : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetAppList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAppList, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAppList, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetAppList, 0x00C0);
		}

		// class UUWorksRequestWebGetCheatingReportsList : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetCheatingReportsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetCheatingReportsList, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetCheatingReportsList, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetCheatingReportsList, 0x00C0);
		}

		// class UUWorksRequestWebGetPlayersBanned : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetPlayersBanned)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPlayersBanned, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPlayersBanned, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetPlayersBanned, 0x00C0);
		}

		// class UUWorksRequestWebGetServerList : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetServerList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetServerList, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetServerList, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetServerList, 0x00C0);
		}

		// class UUWorksRequestWebGetServersAtAddress : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetServersAtAddress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetServersAtAddress, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetServersAtAddress, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetServersAtAddress, 0x00C0);
		}

		// class UUWorksRequestWebSetAppBuildLive : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebSetAppBuildLive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetAppBuildLive, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetAppBuildLive, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebSetAppBuildLive, 0x00C0);
		}

		// class UUWorksRequestWebUpToDateCheck : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebUpToDateCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebUpToDateCheck, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebUpToDateCheck, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebUpToDateCheck, 0x00C0);
		}

		// class UUWorksRequestWebPostGameDataFrame : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebPostGameDataFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebPostGameDataFrame, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebPostGameDataFrame, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebPostGameDataFrame, 0x00C0);
		}

		// class UUWorksRequestWebReportPlayerCheating : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebReportPlayerCheating)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebReportPlayerCheating, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebReportPlayerCheating, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebReportPlayerCheating, 0x00C0);
		}

		// class UUWorksRequestWebRequestPlayerGameBan : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebRequestPlayerGameBan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRequestPlayerGameBan, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRequestPlayerGameBan, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebRequestPlayerGameBan, 0x00C0);
		}

		// class UUWorksRequestWebRemovePlayerGameBan : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebRemovePlayerGameBan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRemovePlayerGameBan, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRemovePlayerGameBan, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebRemovePlayerGameBan, 0x00C0);
		}

		// class UUWorksRequestWebGetCheatingReports : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetCheatingReports)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetCheatingReports, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetCheatingReports, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetCheatingReports, 0x00C0);
		}

		// class UUWorksRequestWebRequestVacStatusForUser : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebRequestVacStatusForUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRequestVacStatusForUser, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRequestVacStatusForUser, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebRequestVacStatusForUser, 0x00C0);
		}

		// class UUWorksRequestWebStartSecureMultiplayerSession : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebStartSecureMultiplayerSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebStartSecureMultiplayerSession, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebStartSecureMultiplayerSession, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebStartSecureMultiplayerSession, 0x00C0);
		}

		// class UUWorksRequestWebEndSecureMultiplayerSession : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebEndSecureMultiplayerSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebEndSecureMultiplayerSession, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebEndSecureMultiplayerSession, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebEndSecureMultiplayerSession, 0x00C0);
		}

		// class UUWorksRequestWebReportCheatData : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebReportCheatData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebReportCheatData, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebReportCheatData, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebReportCheatData, 0x00C0);
		}

		// class UUWorksRequestWebReportAbuse : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebReportAbuse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebReportAbuse, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebReportAbuse, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebReportAbuse, 0x00C0);
		}

		// class UUWorksRequestWebGetTradeHistory : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetTradeHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetTradeHistory, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetTradeHistory, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetTradeHistory, 0x00C0);
		}

		// class UUWorksRequestWebFlushInventoryCache : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebFlushInventoryCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebFlushInventoryCache, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebFlushInventoryCache, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebFlushInventoryCache, 0x00C0);
		}

		// class UUWorksRequestWebFlushAssetAppearanceCache : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebFlushAssetAppearanceCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebFlushAssetAppearanceCache, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebFlushAssetAppearanceCache, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebFlushAssetAppearanceCache, 0x00C0);
		}

		// class UUWorksRequestWebFlushContextCache : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebFlushContextCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebFlushContextCache, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebFlushContextCache, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebFlushContextCache, 0x00C0);
		}

		// class UUWorksRequestWebGetTradeOffers : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetTradeOffers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetTradeOffers, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetTradeOffers, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetTradeOffers, 0x00C0);
		}

		// class UUWorksRequestWebGetTradeOffer : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetTradeOffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetTradeOffer, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetTradeOffer, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetTradeOffer, 0x00C0);
		}

		// class UUWorksRequestWebGetTradeOffersSummary : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetTradeOffersSummary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetTradeOffersSummary, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetTradeOffersSummary, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetTradeOffersSummary, 0x00C0);
		}

		// class UUWorksRequestWebDeclineTradeOffer : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebDeclineTradeOffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebDeclineTradeOffer, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebDeclineTradeOffer, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebDeclineTradeOffer, 0x00C0);
		}

		// class UUWorksRequestWebCancelTradeOffer : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebCancelTradeOffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebCancelTradeOffer, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebCancelTradeOffer, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebCancelTradeOffer, 0x00C0);
		}

		// class UUWorksRequestWebGetMarketEligibility : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetMarketEligibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetMarketEligibility, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetMarketEligibility, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetMarketEligibility, 0x00C0);
		}

		// class UUWorksRequestWebCancelAppListingsForUser : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebCancelAppListingsForUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebCancelAppListingsForUser, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebCancelAppListingsForUser, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebCancelAppListingsForUser, 0x00C0);
		}

		// class UUWorksRequestWebGetAssetID : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetAssetID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAssetID, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAssetID, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetAssetID, 0x00C0);
		}

		// class UUWorksRequestWebGetPopular : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetPopular)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPopular, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPopular, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetPopular, 0x00C0);
		}

		// class UUWorksRequestWebCanTrade : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebCanTrade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebCanTrade, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebCanTrade, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebCanTrade, 0x00C0);
		}

		// class UUWorksRequestWebFinalizeAssetTransaction : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebFinalizeAssetTransaction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebFinalizeAssetTransaction, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebFinalizeAssetTransaction, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebFinalizeAssetTransaction, 0x00C0);
		}

		// class UUWorksRequestWebGetAssetClassInfo : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetAssetClassInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAssetClassInfo, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAssetClassInfo, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetAssetClassInfo, 0x00C0);
		}

		// class UUWorksRequestWebGetAssetPrices : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetAssetPrices)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAssetPrices, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAssetPrices, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetAssetPrices, 0x00C0);
		}

		// class UUWorksRequestWebGetExportedAssetsForUser : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetExportedAssetsForUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetExportedAssetsForUser, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetExportedAssetsForUser, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetExportedAssetsForUser, 0x00C0);
		}

		// class UUWorksRequestWebGetMarketPrices : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetMarketPrices)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetMarketPrices, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetMarketPrices, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetMarketPrices, 0x00C0);
		}

		// class UUWorksRequestWebStartAssetTransaction : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebStartAssetTransaction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebStartAssetTransaction, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebStartAssetTransaction, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebStartAssetTransaction, 0x00C0);
		}

		// class UUWorksRequestWebStartTrade : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebStartTrade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebStartTrade, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebStartTrade, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebStartTrade, 0x00C0);
		}

		// class UUWorksRequestWebGetHistoryCommandDetails : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetHistoryCommandDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetHistoryCommandDetails, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetHistoryCommandDetails, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetHistoryCommandDetails, 0x00C0);
		}

		// class UUWorksRequestWebGetUserHistory : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetUserHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetUserHistory, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetUserHistory, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetUserHistory, 0x00C0);
		}

		// class UUWorksRequestWebHistoryExecuteCommands : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebHistoryExecuteCommands)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebHistoryExecuteCommands, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebHistoryExecuteCommands, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebHistoryExecuteCommands, 0x00C0);
		}

		// class UUWorksRequestWebSupportGetAssetHistory : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebSupportGetAssetHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSupportGetAssetHistory, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSupportGetAssetHistory, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebSupportGetAssetHistory, 0x00C0);
		}

		// class UUWorksRequestWebCreateSession : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebCreateSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebCreateSession, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebCreateSession, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebCreateSession, 0x00C0);
		}

		// class UUWorksRequestWebUpdateSession : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebUpdateSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebUpdateSession, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebUpdateSession, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebUpdateSession, 0x00C0);
		}

		// class UUWorksRequestWebEnumerateSessionsForApp : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebEnumerateSessionsForApp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebEnumerateSessionsForApp, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebEnumerateSessionsForApp, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebEnumerateSessionsForApp, 0x00C0);
		}

		// class UUWorksRequestWebGetSessionDetailsForApp : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetSessionDetailsForApp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetSessionDetailsForApp, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetSessionDetailsForApp, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetSessionDetailsForApp, 0x00C0);
		}

		// class UUWorksRequestWebRequestNotifications : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebRequestNotifications)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRequestNotifications, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRequestNotifications, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebRequestNotifications, 0x00C0);
		}

		// class UUWorksRequestWebDeleteSession : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebDeleteSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebDeleteSession, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebDeleteSession, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebDeleteSession, 0x00C0);
		}

		// class UUWorksRequestWebDeleteSessionBatch : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebDeleteSessionBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebDeleteSessionBatch, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebDeleteSessionBatch, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebDeleteSessionBatch, 0x00C0);
		}

		// class UUWorksRequestWebGetAccountList : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetAccountList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAccountList, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAccountList, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetAccountList, 0x00C0);
		}

		// class UUWorksRequestWebCreateAccount : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebCreateAccount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebCreateAccount, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebCreateAccount, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebCreateAccount, 0x00C0);
		}

		// class UUWorksRequestWebSetMemo : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebSetMemo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetMemo, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetMemo, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebSetMemo, 0x00C0);
		}

		// class UUWorksRequestWebResetLoginToken : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebResetLoginToken)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebResetLoginToken, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebResetLoginToken, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebResetLoginToken, 0x00C0);
		}

		// class UUWorksRequestWebDeleteAccount : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebDeleteAccount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebDeleteAccount, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebDeleteAccount, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebDeleteAccount, 0x00C0);
		}

		// class UUWorksRequestWebGetAccountPublicInfo : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetAccountPublicInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAccountPublicInfo, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAccountPublicInfo, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetAccountPublicInfo, 0x00C0);
		}

		// class UUWorksRequestWebQueryLoginToken : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebQueryLoginToken)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebQueryLoginToken, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebQueryLoginToken, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebQueryLoginToken, 0x00C0);
		}

		// class UUWorksRequestWebSetBanStatus : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebSetBanStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetBanStatus, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetBanStatus, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebSetBanStatus, 0x00C0);
		}

		// class UUWorksRequestWebGetServerSteamIDsByIP : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetServerSteamIDsByIP)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetServerSteamIDsByIP, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetServerSteamIDsByIP, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetServerSteamIDsByIP, 0x00C0);
		}

		// class UUWorksRequestWebGetServerIPsBySteamID : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetServerIPsBySteamID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetServerIPsBySteamID, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetServerIPsBySteamID, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetServerIPsBySteamID, 0x00C0);
		}

		// class UUWorksRequestWebGetGameServerPlayerStatsForGame : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetGameServerPlayerStatsForGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetGameServerPlayerStatsForGame, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetGameServerPlayerStatsForGame, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetGameServerPlayerStatsForGame, 0x00C0);
		}

		// class UUWorksRequestWebAddItem : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebAddItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebAddItem, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebAddItem, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebAddItem, 0x00C0);
		}

		// class UUWorksRequestWebAddPromoItem : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebAddPromoItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebAddPromoItem, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebAddPromoItem, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebAddPromoItem, 0x00C0);
		}

		// class UUWorksRequestWebConsumeItem : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebConsumeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebConsumeItem, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebConsumeItem, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebConsumeItem, 0x00C0);
		}

		// class UUWorksRequestWebExchangeItem : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebExchangeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebExchangeItem, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebExchangeItem, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebExchangeItem, 0x00C0);
		}

		// class UUWorksRequestWebGetInventory : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetInventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetInventory, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetInventory, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetInventory, 0x00C0);
		}

		// class UUWorksRequestWebGetItemDefs : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetItemDefs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetItemDefs, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetItemDefs, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetItemDefs, 0x00C0);
		}

		// class UUWorksRequestWebGetPriceSheet : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetPriceSheet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPriceSheet, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPriceSheet, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetPriceSheet, 0x00C0);
		}

		// class UUWorksRequestWebConsolidate : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebConsolidate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebConsolidate, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebConsolidate, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebConsolidate, 0x00C0);
		}

		// class UUWorksRequestWebGetQuantity : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetQuantity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetQuantity, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetQuantity, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetQuantity, 0x00C0);
		}

		// class UUWorksRequestWebDeleteLeaderboard : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebDeleteLeaderboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebDeleteLeaderboard, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebDeleteLeaderboard, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebDeleteLeaderboard, 0x00C0);
		}

		// class UUWorksRequestWebFindOrCreateLeaderboard : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebFindOrCreateLeaderboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebFindOrCreateLeaderboard, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebFindOrCreateLeaderboard, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebFindOrCreateLeaderboard, 0x00C0);
		}

		// class UUWorksRequestWebGetLeaderboardEntries : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetLeaderboardEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetLeaderboardEntries, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetLeaderboardEntries, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetLeaderboardEntries, 0x00C0);
		}

		// class UUWorksRequestWebGetLeaderboardsForGame : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetLeaderboardsForGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetLeaderboardsForGame, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetLeaderboardsForGame, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetLeaderboardsForGame, 0x00C0);
		}

		// class UUWorksRequestWebResetLeaderboard : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebResetLeaderboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebResetLeaderboard, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebResetLeaderboard, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebResetLeaderboard, 0x00C0);
		}

		// class UUWorksRequestWebSetLeaderboardScore : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebSetLeaderboardScore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetLeaderboardScore, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetLeaderboardScore, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebSetLeaderboardScore, 0x00C0);
		}

		// class UUWorksRequestWebAdjustAgreement : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebAdjustAgreement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebAdjustAgreement, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebAdjustAgreement, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebAdjustAgreement, 0x00C0);
		}

		// class UUWorksRequestWebCancelAgreement : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebCancelAgreement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebCancelAgreement, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebCancelAgreement, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebCancelAgreement, 0x00C0);
		}

		// class UUWorksRequestWebFinalizeTxn : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebFinalizeTxn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebFinalizeTxn, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebFinalizeTxn, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebFinalizeTxn, 0x00C0);
		}

		// class UUWorksRequestWebGetReport : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetReport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetReport, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetReport, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetReport, 0x00C0);
		}

		// class UUWorksRequestWebGetUserAgreementInfo : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetUserAgreementInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetUserAgreementInfo, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetUserAgreementInfo, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetUserAgreementInfo, 0x00C0);
		}

		// class UUWorksRequestWebGetUserInfo : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetUserInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetUserInfo, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetUserInfo, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetUserInfo, 0x00C0);
		}

		// class UUWorksRequestWebInitTxn : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebInitTxn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebInitTxn, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebInitTxn, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebInitTxn, 0x00C0);
		}

		// class UUWorksRequestWebProcessAgreement : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebProcessAgreement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebProcessAgreement, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebProcessAgreement, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebProcessAgreement, 0x00C0);
		}

		// class UUWorksRequestWebQueryTxn : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebQueryTxn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebQueryTxn, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebQueryTxn, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebQueryTxn, 0x00C0);
		}

		// class UUWorksRequestWebRefundTxn : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebRefundTxn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRefundTxn, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRefundTxn, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebRefundTxn, 0x00C0);
		}

		// class UUWorksRequestWebGetNewsForApp : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetNewsForApp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetNewsForApp, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetNewsForApp, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetNewsForApp, 0x00C0);
		}

		// class UUWorksRequestWebGetNewsForAppAuthed : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetNewsForAppAuthed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetNewsForAppAuthed, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetNewsForAppAuthed, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetNewsForAppAuthed, 0x00C0);
		}

		// class UUWorksRequestWebRecordOfflinePlaytime : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebRecordOfflinePlaytime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRecordOfflinePlaytime, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRecordOfflinePlaytime, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebRecordOfflinePlaytime, 0x00C0);
		}

		// class UUWorksRequestWebGetRecentlyPlayedGames : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetRecentlyPlayedGames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetRecentlyPlayedGames, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetRecentlyPlayedGames, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetRecentlyPlayedGames, 0x00C0);
		}

		// class UUWorksRequestWebGetOwnedGames : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetOwnedGames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetOwnedGames, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetOwnedGames, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetOwnedGames, 0x00C0);
		}

		// class UUWorksRequestWebGetSteamLevel : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetSteamLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetSteamLevel, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetSteamLevel, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetSteamLevel, 0x00C0);
		}

		// class UUWorksRequestWebGetBadges : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetBadges)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetBadges, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetBadges, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetBadges, 0x00C0);
		}

		// class UUWorksRequestWebGetCommunityBadgeProgress : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetCommunityBadgeProgress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetCommunityBadgeProgress, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetCommunityBadgeProgress, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetCommunityBadgeProgress, 0x00C0);
		}

		// class UUWorksRequestWebIsPlayingSharedGame : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebIsPlayingSharedGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebIsPlayingSharedGame, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebIsPlayingSharedGame, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebIsPlayingSharedGame, 0x00C0);
		}

		// class UUWorksRequestWebQueryFiles : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebQueryFiles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebQueryFiles, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebQueryFiles, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebQueryFiles, 0x00C0);
		}

		// class UUWorksRequestWebSetDeveloperMetadata : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebSetDeveloperMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetDeveloperMetadata, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetDeveloperMetadata, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebSetDeveloperMetadata, 0x00C0);
		}

		// class UUWorksRequestWebUpdateTags : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebUpdateTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebUpdateTags, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebUpdateTags, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebUpdateTags, 0x00C0);
		}

		// class UUWorksRequestWebRankedByPublicationOrder : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebRankedByPublicationOrder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRankedByPublicationOrder, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRankedByPublicationOrder, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebRankedByPublicationOrder, 0x00C0);
		}

		// class UUWorksRequestWebRankedByTrend : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebRankedByTrend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRankedByTrend, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRankedByTrend, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebRankedByTrend, 0x00C0);
		}

		// class UUWorksRequestWebRankedByVote : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebRankedByVote)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRankedByVote, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebRankedByVote, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebRankedByVote, 0x00C0);
		}

		// class UUWorksRequestWebResultSetSummary : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebResultSetSummary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebResultSetSummary, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebResultSetSummary, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebResultSetSummary, 0x00C0);
		}

		// class UUWorksRequestWebItemVoteSummary : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebItemVoteSummary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebItemVoteSummary, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebItemVoteSummary, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebItemVoteSummary, 0x00C0);
		}

		// class UUWorksRequestWebUserVoteSummary : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebUserVoteSummary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebUserVoteSummary, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebUserVoteSummary, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebUserVoteSummary, 0x00C0);
		}

		// class UUWorksRequestWebEnumerateUserPublishedFiles : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebEnumerateUserPublishedFiles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebEnumerateUserPublishedFiles, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebEnumerateUserPublishedFiles, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebEnumerateUserPublishedFiles, 0x00C0);
		}

		// class UUWorksRequestWebEnumerateUserSubscribedFiles : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebEnumerateUserSubscribedFiles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebEnumerateUserSubscribedFiles, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebEnumerateUserSubscribedFiles, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebEnumerateUserSubscribedFiles, 0x00C0);
		}

		// class UUWorksRequestWebGetCollectionDetails : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetCollectionDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetCollectionDetails, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetCollectionDetails, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetCollectionDetails, 0x00C0);
		}

		// class UUWorksRequestWebGetPublishedFileDetails : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetPublishedFileDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPublishedFileDetails, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPublishedFileDetails, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetPublishedFileDetails, 0x00C0);
		}

		// class UUWorksRequestWebGetUGCFileDetails : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetUGCFileDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetUGCFileDetails, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetUGCFileDetails, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetUGCFileDetails, 0x00C0);
		}

		// class UUWorksRequestWebSetUGCUsedByGC : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebSetUGCUsedByGC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetUGCUsedByGC, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetUGCUsedByGC, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebSetUGCUsedByGC, 0x00C0);
		}

		// class UUWorksRequestWebSubscribePublishedFile : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebSubscribePublishedFile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSubscribePublishedFile, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSubscribePublishedFile, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebSubscribePublishedFile, 0x00C0);
		}

		// class UUWorksRequestWebUnsubscribePublishedFile : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebUnsubscribePublishedFile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebUnsubscribePublishedFile, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebUnsubscribePublishedFile, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebUnsubscribePublishedFile, 0x00C0);
		}

		// class UUWorksRequestWebCheckAppOwnership : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebCheckAppOwnership)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebCheckAppOwnership, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebCheckAppOwnership, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebCheckAppOwnership, 0x00C0);
		}

		// class UUWorksRequestWebGetAppPriceInfo : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetAppPriceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAppPriceInfo, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetAppPriceInfo, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetAppPriceInfo, 0x00C0);
		}

		// class UUWorksRequestWebGetFriendList : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetFriendList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetFriendList, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetFriendList, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetFriendList, 0x00C0);
		}

		// class UUWorksRequestWebGetPlayerBans : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetPlayerBans)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPlayerBans, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPlayerBans, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetPlayerBans, 0x00C0);
		}

		// class UUWorksRequestWebGetPlayerSummaries : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetPlayerSummaries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPlayerSummaries, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPlayerSummaries, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetPlayerSummaries, 0x00C0);
		}

		// class UUWorksRequestWebGetPublisherAppOwnership : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetPublisherAppOwnership)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPublisherAppOwnership, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPublisherAppOwnership, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetPublisherAppOwnership, 0x00C0);
		}

		// class UUWorksRequestWebGetPublisherAppOwnershipChanges : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetPublisherAppOwnershipChanges)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPublisherAppOwnershipChanges, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPublisherAppOwnershipChanges, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetPublisherAppOwnershipChanges, 0x00C0);
		}

		// class UUWorksRequestWebGetUserGroupList : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetUserGroupList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetUserGroupList, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetUserGroupList, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetUserGroupList, 0x00C0);
		}

		// class UUWorksRequestWebGrantPackage : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGrantPackage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGrantPackage, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGrantPackage, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGrantPackage, 0x00C0);
		}

		// class UUWorksRequestWebResolveVanityURL : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebResolveVanityURL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebResolveVanityURL, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebResolveVanityURL, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebResolveVanityURL, 0x00C0);
		}

		// class UUWorksRequestWebAuthenticateUser : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebAuthenticateUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebAuthenticateUser, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebAuthenticateUser, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebAuthenticateUser, 0x00C0);
		}

		// class UUWorksRequestWebAuthenticateUserTicket : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebAuthenticateUserTicket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebAuthenticateUserTicket, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebAuthenticateUserTicket, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebAuthenticateUserTicket, 0x00C0);
		}

		// class UUWorksRequestWebGetGlobalAchievementPercentagesForApp : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetGlobalAchievementPercentagesForApp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetGlobalAchievementPercentagesForApp, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetGlobalAchievementPercentagesForApp, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetGlobalAchievementPercentagesForApp, 0x00C0);
		}

		// class UUWorksRequestWebGetGlobalStatsForGame : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetGlobalStatsForGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetGlobalStatsForGame, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetGlobalStatsForGame, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetGlobalStatsForGame, 0x00C0);
		}

		// class UUWorksRequestWebGetNumberOfCurrentPlayers : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetNumberOfCurrentPlayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetNumberOfCurrentPlayers, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetNumberOfCurrentPlayers, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetNumberOfCurrentPlayers, 0x00C0);
		}

		// class UUWorksRequestWebGetPlayerAchievements : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetPlayerAchievements)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPlayerAchievements, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetPlayerAchievements, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetPlayerAchievements, 0x00C0);
		}

		// class UUWorksRequestWebGetSchemaForGame : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetSchemaForGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetSchemaForGame, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetSchemaForGame, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetSchemaForGame, 0x00C0);
		}

		// class UUWorksRequestWebGetUserStatsForGame : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetUserStatsForGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetUserStatsForGame, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetUserStatsForGame, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetUserStatsForGame, 0x00C0);
		}

		// class UUWorksRequestWebSetUserStatsForGame : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebSetUserStatsForGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetUserStatsForGame, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetUserStatsForGame, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebSetUserStatsForGame, 0x00C0);
		}

		// class UUWorksRequestWebSetItemPaymentRules : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebSetItemPaymentRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetItemPaymentRules, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebSetItemPaymentRules, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebSetItemPaymentRules, 0x00C0);
		}

		// class UUWorksRequestWebGetFinalizedContributors : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetFinalizedContributors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetFinalizedContributors, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetFinalizedContributors, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetFinalizedContributors, 0x00C0);
		}

		// class UUWorksRequestWebGetItemDailyRevenue : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebGetItemDailyRevenue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetItemDailyRevenue, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebGetItemDailyRevenue, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebGetItemDailyRevenue, 0x00C0);
		}

		// class UUWorksRequestWebPopulateItemDescriptions : public UUWorksRequestWeb
		TEST_METHOD(Class__UWorksWeb__UWorksRequestWebPopulateItemDescriptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebPopulateItemDescriptions, OnRequestCompleted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksRequestWebPopulateItemDescriptions, OnRequestCompletedMinimal, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequestWebPopulateItemDescriptions, 0x00C0);
		}

		// class UGetAppBetasNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetAppBetasNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetAppBetasNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetAppBetasNode, 0x0040);
		}

		// class UGetAppBuildsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetAppBuildsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetAppBuildsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetAppBuildsNode, 0x0040);
		}

		// class UGetAppDepotVersionsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetAppDepotVersionsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetAppDepotVersionsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetAppDepotVersionsNode, 0x0040);
		}

		// class UGetAppListNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetAppListNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetAppListNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetAppListNode, 0x0040);
		}

		// class UGetCheatingReportsListNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetCheatingReportsListNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetCheatingReportsListNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetCheatingReportsListNode, 0x0040);
		}

		// class UGetPlayersBannedNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetPlayersBannedNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetPlayersBannedNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetPlayersBannedNode, 0x0040);
		}

		// class UGetServerListNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetServerListNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetServerListNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetServerListNode, 0x0040);
		}

		// class UGetServersAtAddressNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetServersAtAddressNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetServersAtAddressNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetServersAtAddressNode, 0x0040);
		}

		// class USetAppBuildLiveNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__SetAppBuildLiveNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetAppBuildLiveNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetAppBuildLiveNode, 0x0040);
		}

		// class UUpToDateCheckNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__UpToDateCheckNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpToDateCheckNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpToDateCheckNode, 0x0040);
		}

		// class UPostGameDataFrameNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__PostGameDataFrameNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostGameDataFrameNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostGameDataFrameNode, 0x0040);
		}

		// class UReportPlayerCheatingNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__ReportPlayerCheatingNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReportPlayerCheatingNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReportPlayerCheatingNode, 0x0040);
		}

		// class URequestPlayerGameBanNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__RequestPlayerGameBanNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URequestPlayerGameBanNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URequestPlayerGameBanNode, 0x0040);
		}

		// class URemovePlayerGameBanNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__RemovePlayerGameBanNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemovePlayerGameBanNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemovePlayerGameBanNode, 0x0040);
		}

		// class UGetCheatingReportsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetCheatingReportsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetCheatingReportsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetCheatingReportsNode, 0x0040);
		}

		// class URequestVacStatusForUserNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__RequestVacStatusForUserNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URequestVacStatusForUserNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URequestVacStatusForUserNode, 0x0040);
		}

		// class UStartSecureMultiplayerSessionNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__StartSecureMultiplayerSessionNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartSecureMultiplayerSessionNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStartSecureMultiplayerSessionNode, 0x0040);
		}

		// class UEndSecureMultiplayerSessionNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__EndSecureMultiplayerSessionNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndSecureMultiplayerSessionNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndSecureMultiplayerSessionNode, 0x0040);
		}

		// class UReportCheatDataNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__ReportCheatDataNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReportCheatDataNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReportCheatDataNode, 0x0040);
		}

		// class UReportAbuseNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__ReportAbuseNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReportAbuseNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReportAbuseNode, 0x0040);
		}

		// class UGetTradeHistoryNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetTradeHistoryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetTradeHistoryNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetTradeHistoryNode, 0x0040);
		}

		// class UFlushInventoryCacheNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__FlushInventoryCacheNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlushInventoryCacheNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlushInventoryCacheNode, 0x0040);
		}

		// class UFlushAssetAppearanceCacheNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__FlushAssetAppearanceCacheNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlushAssetAppearanceCacheNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlushAssetAppearanceCacheNode, 0x0040);
		}

		// class UFlushContextCacheNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__FlushContextCacheNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlushContextCacheNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlushContextCacheNode, 0x0040);
		}

		// class UGetTradeOffersNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetTradeOffersNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetTradeOffersNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetTradeOffersNode, 0x0040);
		}

		// class UGetTradeOfferNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetTradeOfferNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetTradeOfferNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetTradeOfferNode, 0x0040);
		}

		// class UGetTradeOffersSummaryNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetTradeOffersSummaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetTradeOffersSummaryNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetTradeOffersSummaryNode, 0x0040);
		}

		// class UDeclineTradeOfferNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__DeclineTradeOfferNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeclineTradeOfferNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeclineTradeOfferNode, 0x0040);
		}

		// class UCancelTradeOfferNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__CancelTradeOfferNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelTradeOfferNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCancelTradeOfferNode, 0x0040);
		}

		// class UGetMarketEligibilityNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetMarketEligibilityNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMarketEligibilityNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetMarketEligibilityNode, 0x0040);
		}

		// class UCancelAppListingsForUserNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__CancelAppListingsForUserNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelAppListingsForUserNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCancelAppListingsForUserNode, 0x0040);
		}

		// class UGetAssetIDNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetAssetIDNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetAssetIDNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetAssetIDNode, 0x0040);
		}

		// class UGetPopularNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetPopularNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetPopularNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetPopularNode, 0x0040);
		}

		// class UCanTradeNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__CanTradeNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanTradeNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanTradeNode, 0x0040);
		}

		// class UFinalizeAssetTransactionNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__FinalizeAssetTransactionNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFinalizeAssetTransactionNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFinalizeAssetTransactionNode, 0x0040);
		}

		// class UGetAssetClassInfoNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetAssetClassInfoNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetAssetClassInfoNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetAssetClassInfoNode, 0x0040);
		}

		// class UGetAssetPricesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetAssetPricesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetAssetPricesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetAssetPricesNode, 0x0040);
		}

		// class UGetExportedAssetsForUserNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetExportedAssetsForUserNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetExportedAssetsForUserNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetExportedAssetsForUserNode, 0x0040);
		}

		// class UGetMarketPricesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetMarketPricesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetMarketPricesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetMarketPricesNode, 0x0040);
		}

		// class UStartAssetTransactionNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__StartAssetTransactionNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartAssetTransactionNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStartAssetTransactionNode, 0x0040);
		}

		// class UStartTradeNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__StartTradeNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartTradeNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStartTradeNode, 0x0040);
		}

		// class UGetHistoryCommandDetailsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetHistoryCommandDetailsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetHistoryCommandDetailsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetHistoryCommandDetailsNode, 0x0040);
		}

		// class UGetUserHistoryNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetUserHistoryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetUserHistoryNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetUserHistoryNode, 0x0040);
		}

		// class UHistoryExecuteCommandsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__HistoryExecuteCommandsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHistoryExecuteCommandsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHistoryExecuteCommandsNode, 0x0040);
		}

		// class USupportGetAssetHistoryNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__SupportGetAssetHistoryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USupportGetAssetHistoryNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USupportGetAssetHistoryNode, 0x0040);
		}

		// class UCreateSessionNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__CreateSessionNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionNode, 0x0040);
		}

		// class UUpdateSessionNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__UpdateSessionNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateSessionNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpdateSessionNode, 0x0040);
		}

		// class UEnumerateSessionsForAppNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__EnumerateSessionsForAppNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumerateSessionsForAppNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumerateSessionsForAppNode, 0x0040);
		}

		// class UGetSessionDetailsForAppNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetSessionDetailsForAppNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetSessionDetailsForAppNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetSessionDetailsForAppNode, 0x0040);
		}

		// class URequestNotificationsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__RequestNotificationsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URequestNotificationsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URequestNotificationsNode, 0x0040);
		}

		// class UDeleteSessionNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__DeleteSessionNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeleteSessionNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeleteSessionNode, 0x0040);
		}

		// class UDeleteSessionBatchNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__DeleteSessionBatchNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeleteSessionBatchNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeleteSessionBatchNode, 0x0040);
		}

		// class UGetAccountListNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetAccountListNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetAccountListNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetAccountListNode, 0x0040);
		}

		// class UCreateAccountNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__CreateAccountNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateAccountNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateAccountNode, 0x0040);
		}

		// class USetMemoNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__SetMemoNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetMemoNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetMemoNode, 0x0040);
		}

		// class UResetLoginTokenNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__ResetLoginTokenNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetLoginTokenNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResetLoginTokenNode, 0x0040);
		}

		// class UDeleteAccountNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__DeleteAccountNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeleteAccountNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeleteAccountNode, 0x0040);
		}

		// class UGetAccountPublicInfoNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetAccountPublicInfoNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetAccountPublicInfoNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetAccountPublicInfoNode, 0x0040);
		}

		// class UQueryLoginTokenNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__QueryLoginTokenNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQueryLoginTokenNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQueryLoginTokenNode, 0x0040);
		}

		// class USetBanStatusNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__SetBanStatusNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetBanStatusNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetBanStatusNode, 0x0040);
		}

		// class UGetServerSteamIDsByIPNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetServerSteamIDsByIPNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetServerSteamIDsByIPNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetServerSteamIDsByIPNode, 0x0040);
		}

		// class UGetServerIPsBySteamIDNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetServerIPsBySteamIDNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetServerIPsBySteamIDNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetServerIPsBySteamIDNode, 0x0040);
		}

		// class UGetGameServerPlayerStatsForGameNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetGameServerPlayerStatsForGameNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGameServerPlayerStatsForGameNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetGameServerPlayerStatsForGameNode, 0x0040);
		}

		// class UAddItemNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__AddItemNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddItemNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddItemNode, 0x0040);
		}

		// class UAddPromoItemNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__AddPromoItemNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPromoItemNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPromoItemNode, 0x0040);
		}

		// class UConsumeItemNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__ConsumeItemNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsumeItemNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsumeItemNode, 0x0040);
		}

		// class UExchangeItemNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__ExchangeItemNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExchangeItemNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExchangeItemNode, 0x0040);
		}

		// class UGetInventoryNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetInventoryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetInventoryNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetInventoryNode, 0x0040);
		}

		// class UGetItemDefsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetItemDefsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetItemDefsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetItemDefsNode, 0x0040);
		}

		// class UGetPriceSheetNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetPriceSheetNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetPriceSheetNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetPriceSheetNode, 0x0040);
		}

		// class UConsolidateNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__ConsolidateNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsolidateNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsolidateNode, 0x0040);
		}

		// class UGetQuantityNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetQuantityNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetQuantityNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetQuantityNode, 0x0040);
		}

		// class UDeleteLeaderboardNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__DeleteLeaderboardNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeleteLeaderboardNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeleteLeaderboardNode, 0x0040);
		}

		// class UFindOrCreateLeaderboardNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__FindOrCreateLeaderboardNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindOrCreateLeaderboardNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindOrCreateLeaderboardNode, 0x0040);
		}

		// class UGetLeaderboardEntriesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetLeaderboardEntriesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetLeaderboardEntriesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetLeaderboardEntriesNode, 0x0040);
		}

		// class UGetLeaderboardsForGameNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetLeaderboardsForGameNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetLeaderboardsForGameNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetLeaderboardsForGameNode, 0x0040);
		}

		// class UResetLeaderboardNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__ResetLeaderboardNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResetLeaderboardNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResetLeaderboardNode, 0x0040);
		}

		// class USetLeaderboardScoreNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__SetLeaderboardScoreNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetLeaderboardScoreNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetLeaderboardScoreNode, 0x0040);
		}

		// class UAdjustAgreementNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__AdjustAgreementNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustAgreementNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdjustAgreementNode, 0x0040);
		}

		// class UCancelAgreementNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__CancelAgreementNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelAgreementNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCancelAgreementNode, 0x0040);
		}

		// class UFinalizeTxnNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__FinalizeTxnNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFinalizeTxnNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFinalizeTxnNode, 0x0040);
		}

		// class UGetReportNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetReportNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetReportNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetReportNode, 0x0040);
		}

		// class UGetUserAgreementInfoNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetUserAgreementInfoNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetUserAgreementInfoNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetUserAgreementInfoNode, 0x0040);
		}

		// class UGetUserInfoNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetUserInfoNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetUserInfoNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetUserInfoNode, 0x0040);
		}

		// class UInitTxnNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__InitTxnNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInitTxnNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInitTxnNode, 0x0040);
		}

		// class UProcessAgreementNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__ProcessAgreementNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProcessAgreementNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProcessAgreementNode, 0x0040);
		}

		// class UQueryTxnNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__QueryTxnNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQueryTxnNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQueryTxnNode, 0x0040);
		}

		// class URefundTxnNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__RefundTxnNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URefundTxnNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URefundTxnNode, 0x0040);
		}

		// class UGetNewsForAppNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetNewsForAppNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetNewsForAppNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetNewsForAppNode, 0x0040);
		}

		// class UGetNewsForAppAuthedNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetNewsForAppAuthedNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetNewsForAppAuthedNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetNewsForAppAuthedNode, 0x0040);
		}

		// class URecordOfflinePlaytimeNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__RecordOfflinePlaytimeNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecordOfflinePlaytimeNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecordOfflinePlaytimeNode, 0x0040);
		}

		// class UGetRecentlyPlayedGamesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetRecentlyPlayedGamesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetRecentlyPlayedGamesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetRecentlyPlayedGamesNode, 0x0040);
		}

		// class UGetOwnedGamesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetOwnedGamesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetOwnedGamesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetOwnedGamesNode, 0x0040);
		}

		// class UGetSteamLevelNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetSteamLevelNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetSteamLevelNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetSteamLevelNode, 0x0040);
		}

		// class UGetBadgesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetBadgesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetBadgesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetBadgesNode, 0x0040);
		}

		// class UGetCommunityBadgeProgressNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetCommunityBadgeProgressNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetCommunityBadgeProgressNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetCommunityBadgeProgressNode, 0x0040);
		}

		// class UIsPlayingSharedGameNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__IsPlayingSharedGameNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsPlayingSharedGameNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsPlayingSharedGameNode, 0x0040);
		}

		// class UQueryFilesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__QueryFilesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQueryFilesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQueryFilesNode, 0x0040);
		}

		// class USetDeveloperMetadataNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__SetDeveloperMetadataNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetDeveloperMetadataNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetDeveloperMetadataNode, 0x0040);
		}

		// class UUpdateTagsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__UpdateTagsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateTagsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpdateTagsNode, 0x0040);
		}

		// class URankedByPublicationOrderNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__RankedByPublicationOrderNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedByPublicationOrderNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URankedByPublicationOrderNode, 0x0040);
		}

		// class URankedByTrendNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__RankedByTrendNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedByTrendNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URankedByTrendNode, 0x0040);
		}

		// class URankedByVoteNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__RankedByVoteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URankedByVoteNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URankedByVoteNode, 0x0040);
		}

		// class UResultSetSummaryNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__ResultSetSummaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultSetSummaryNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResultSetSummaryNode, 0x0040);
		}

		// class UItemVoteSummaryNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__ItemVoteSummaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemVoteSummaryNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemVoteSummaryNode, 0x0040);
		}

		// class UUserVoteSummaryNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__UserVoteSummaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserVoteSummaryNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserVoteSummaryNode, 0x0040);
		}

		// class UEnumerateUserPublishedFilesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__EnumerateUserPublishedFilesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumerateUserPublishedFilesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumerateUserPublishedFilesNode, 0x0040);
		}

		// class UEnumerateUserSubscribedFilesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__EnumerateUserSubscribedFilesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumerateUserSubscribedFilesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumerateUserSubscribedFilesNode, 0x0040);
		}

		// class UGetCollectionDetailsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetCollectionDetailsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetCollectionDetailsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetCollectionDetailsNode, 0x0040);
		}

		// class UGetPublishedFileDetailsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetPublishedFileDetailsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetPublishedFileDetailsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetPublishedFileDetailsNode, 0x0040);
		}

		// class UGetUGCFileDetailsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetUGCFileDetailsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetUGCFileDetailsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetUGCFileDetailsNode, 0x0040);
		}

		// class USetUGCUsedByGCNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__SetUGCUsedByGCNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetUGCUsedByGCNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetUGCUsedByGCNode, 0x0040);
		}

		// class USubscribePublishedFileNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__SubscribePublishedFileNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubscribePublishedFileNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubscribePublishedFileNode, 0x0040);
		}

		// class UUnsubscribePublishedFileNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__UnsubscribePublishedFileNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnsubscribePublishedFileNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUnsubscribePublishedFileNode, 0x0040);
		}

		// class UCheckAppOwnershipNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__CheckAppOwnershipNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckAppOwnershipNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckAppOwnershipNode, 0x0040);
		}

		// class UGetAppPriceInfoNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetAppPriceInfoNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetAppPriceInfoNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetAppPriceInfoNode, 0x0040);
		}

		// class UGetFriendListNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetFriendListNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetFriendListNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetFriendListNode, 0x0040);
		}

		// class UGetPlayerBansNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetPlayerBansNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetPlayerBansNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetPlayerBansNode, 0x0040);
		}

		// class UGetPlayerSummariesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetPlayerSummariesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetPlayerSummariesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetPlayerSummariesNode, 0x0040);
		}

		// class UGetPublisherAppOwnershipNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetPublisherAppOwnershipNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetPublisherAppOwnershipNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetPublisherAppOwnershipNode, 0x0040);
		}

		// class UGetPublisherAppOwnershipChangesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetPublisherAppOwnershipChangesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetPublisherAppOwnershipChangesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetPublisherAppOwnershipChangesNode, 0x0040);
		}

		// class UGetUserGroupListNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetUserGroupListNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetUserGroupListNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetUserGroupListNode, 0x0040);
		}

		// class UGrantPackageNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GrantPackageNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrantPackageNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGrantPackageNode, 0x0040);
		}

		// class UResolveVanityURLNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__ResolveVanityURLNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResolveVanityURLNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResolveVanityURLNode, 0x0040);
		}

		// class UAuthenticateUserNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__AuthenticateUserNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthenticateUserNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAuthenticateUserNode, 0x0040);
		}

		// class UAuthenticateUserTicketNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__AuthenticateUserTicketNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthenticateUserTicketNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAuthenticateUserTicketNode, 0x0040);
		}

		// class UGetGlobalAchievementPercentagesForAppNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetGlobalAchievementPercentagesForAppNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGlobalAchievementPercentagesForAppNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetGlobalAchievementPercentagesForAppNode, 0x0040);
		}

		// class UGetGlobalStatsForGameNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetGlobalStatsForGameNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGlobalStatsForGameNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetGlobalStatsForGameNode, 0x0040);
		}

		// class UGetNumberOfCurrentPlayersNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetNumberOfCurrentPlayersNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetNumberOfCurrentPlayersNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetNumberOfCurrentPlayersNode, 0x0040);
		}

		// class UGetPlayerAchievementsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetPlayerAchievementsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetPlayerAchievementsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetPlayerAchievementsNode, 0x0040);
		}

		// class UGetSchemaForGameNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetSchemaForGameNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetSchemaForGameNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetSchemaForGameNode, 0x0040);
		}

		// class UGetUserStatsForGameNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetUserStatsForGameNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetUserStatsForGameNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetUserStatsForGameNode, 0x0040);
		}

		// class USetUserStatsForGameNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__SetUserStatsForGameNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetUserStatsForGameNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetUserStatsForGameNode, 0x0040);
		}

		// class USetItemPaymentRulesNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__SetItemPaymentRulesNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetItemPaymentRulesNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetItemPaymentRulesNode, 0x0040);
		}

		// class UGetFinalizedContributorsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetFinalizedContributorsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetFinalizedContributorsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetFinalizedContributorsNode, 0x0040);
		}

		// class UGetItemDailyRevenueNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__GetItemDailyRevenueNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetItemDailyRevenueNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetItemDailyRevenueNode, 0x0040);
		}

		// class UPopulateItemDescriptionsNode : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UWorksWeb__PopulateItemDescriptionsNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPopulateItemDescriptionsNode, Completed, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPopulateItemDescriptionsNode, 0x0040);
		}

		// class UUI_QuitMatch_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_QuitMatch__UI_QuitMatch_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuitMatch_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuitMatch_C, Button_No, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuitMatch_C, Button_Yes, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_QuitMatch_C, 0x0278);
		}

		// class UUI_CountdownTimer_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_CountdownTimer__UI_CountdownTimer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CountdownTimer_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CountdownTimer_C, TextBlock_TextInfo, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CountdownTimer_C, TextBlock_Timer, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CountdownTimer_C, GameState, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_CountdownTimer_C, 0x0280);
		}

		// class ALVL_Storage_Canal_Night_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__LVL_Storage_Canal_Night__LVL_Storage_Canal_Night_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALVL_Storage_Canal_Night_C, 0x0228);
		}

		// class UUI_Shop_WeaponInfo_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Shop_WeaponInfo__UI_Shop_WeaponInfo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_WeaponInfo_C, Image_WeaponIcon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_WeaponInfo_C, TextBlock_WeaponName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_WeaponInfo_C, UI_ItemParameter_AccuracyHip, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_WeaponInfo_C, UI_ItemParameter_AccuracySight, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_WeaponInfo_C, UI_ItemParameter_Damage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_WeaponInfo_C, UI_ItemParameter_MagazineCapacity, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_WeaponInfo_C, UI_ItemParameter_Range, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_WeaponInfo_C, UI_ItemParameter_RateOfFire, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_WeaponInfo_C, WeaponClass, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Shop_WeaponInfo_C, 0x02A8);
		}

		// class UEnvQueryNode : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, VerNum, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, UnknownData_QUZZ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryNode, 0x0030);
		}

		// class UEnvQueryTest : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestPurpose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_AV51, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestComment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextFilterOp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextScoreOp, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FilterType, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_UVG8, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, BoolValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMin, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMax, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_H4PC, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringEquation, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMinType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMaxType, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, NormalizationType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_LQC2, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMin, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMax, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringFactor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ReferenceValue, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, bDefineReferenceValue, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_H6Z4, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_BF9T, 0x01F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest, 0x01F8);
		}

		// class UAIAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AIModule__AIAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnFail, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, UnknownData_3MW5, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIAsyncTaskBlueprintProxy, 0x0068);
		}

		// class UAIBlueprintHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__AIBlueprintHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBlueprintHelperLibrary, 0x0028);
		}

		// class AAIController : public AController
		TEST_METHOD(Class__AIModule__AIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_FS0A, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_YWJH, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PathFollowingComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, BrainComponent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PerceptionComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ActionsComp, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, Blackboard, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, CachedGameplayTasksComponent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, DefaultNavigationFilterClass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ReceiveMoveCompleted, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_Z5UI, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController, 0x0328);
		}

		// class UAIDataProvider : public UObject
		TEST_METHOD(Class__AIModule__AIDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider, 0x0028);
		}

		// class UAIDataProvider_QueryParams : public UAIDataProvider
		TEST_METHOD(Class__AIModule__AIDataProvider_QueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, ParamName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, FloatValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, IntValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, BoolValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, UnknownData_0TI3, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_QueryParams, 0x0040);
		}

		// class UAIDataProvider_Random : public UAIDataProvider_QueryParams
		TEST_METHOD(Class__AIModule__AIDataProvider_Random)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Max, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, UnknownData_QXHV, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_Random, 0x0050);
		}

		// class UAIHotSpotManager : public UObject
		TEST_METHOD(Class__AIModule__AIHotSpotManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHotSpotManager, 0x0028);
		}

		// class UAIPerceptionComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, SensesConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, DominantSense, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_V1SB, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, AIOwner, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_JJQP, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnPerceptionUpdated, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionUpdated, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionInfoUpdated, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionComponent, 0x0190);
		}

		// class UAIPerceptionListenerInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIPerceptionListenerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionListenerInterface, 0x0028);
		}

		// class UAIPerceptionStimuliSourceComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionStimuliSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, UnknownData_PDTM, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, RegisterAsSourceForSenses, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionStimuliSourceComponent, 0x00C8);
		}

		// class UAISubsystem : public UObject
		TEST_METHOD(Class__AIModule__AISubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, UnknownData_XDJ8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, AISystem, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISubsystem, 0x0038);
		}

		// class UAIPerceptionSystem : public UAISubsystem
		TEST_METHOD(Class__AIModule__AIPerceptionSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_YOVV, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, Senses, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, PerceptionAgingRate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_O4L2, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionSystem, 0x0130);
		}

		// class UAIResourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIResourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResourceInterface, 0x0028);
		}

		// class UAIResource_Movement : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Movement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Movement, 0x0038);
		}

		// class UAIResource_Logic : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Logic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Logic, 0x0038);
		}

		// class UAISense : public UObject
		TEST_METHOD(Class__AIModule__AISense)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, DefaultExpirationAge, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, NotifyType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_6TH5, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_S3UC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, PerceptionSystemInstance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_A3FT, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense, 0x0080);
		}

		// class UAISense_Blueprint : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerDataType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerContainer, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, UnprocessedEvents, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Blueprint, 0x00A8);
		}

		// class UAISense_Damage : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Damage, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Damage, 0x0090);
		}

		// class UAISense_Hearing : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, NoiseEvents, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, SpeedOfSoundSq, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, UnknownData_RW5F, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Hearing, 0x00E8);
		}

		// class UAISense_Prediction : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Prediction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Prediction, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Prediction, 0x0090);
		}

		// class UAISense_Sight : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_ZB5Z, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTracesPerTick, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MinQueriesPerTimeSliceCheck, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTimeSlicePerTick, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, HighImportanceQueryDistanceThreshold, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_D8WS, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxQueryImportance, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, SightLimitQueryImportance, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_R5WC, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Sight, 0x0170);
		}

		// class UAISense_Team : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Team)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Team, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Team, 0x0090);
		}

		// class UAISense_Touch : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Touch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Touch, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Touch, 0x0090);
		}

		// class UAISenseBlueprintListener : public UUserDefinedStruct
		TEST_METHOD(Class__AIModule__AISenseBlueprintListener)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseBlueprintListener, 0x0108);
		}

		// class UAISenseConfig : public UObject
		TEST_METHOD(Class__AIModule__AISenseConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, DebugColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, MaxAge, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, UnknownData_N5KT, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig, 0x0048);
		}

		// class UAISenseConfig_Blueprint : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Blueprint, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Blueprint, 0x0050);
		}

		// class UAISenseConfig_Damage : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Damage, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Damage, 0x0050);
		}

		// class UAISenseConfig_Hearing : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, LoSHearingRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_UFGQ, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, DetectionByAffiliation, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Hearing, 0x0060);
		}

		// class UAISenseConfig_Prediction : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Prediction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Prediction, 0x0048);
		}

		// class UAISenseConfig_Sight : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, SightRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, LoseSightRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PeripheralVisionAngleDegrees, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, DetectionByAffiliation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, AutoSuccessRangeFromLastSeenLocation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PointOfViewBackwardOffset, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, NearClippingRadius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, UnknownData_5SZH, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Sight, 0x0070);
		}

		// class UAISenseConfig_Team : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Team)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Team, 0x0048);
		}

		// class UAISenseConfig_Touch : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Touch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Touch, 0x0048);
		}

		// class UAISenseEvent : public UObject
		TEST_METHOD(Class__AIModule__AISenseEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent, 0x0028);
		}

		// class UAISenseEvent_Damage : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Damage, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Damage, 0x0058);
		}

		// class UAISenseEvent_Hearing : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Hearing, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Hearing, 0x0058);
		}

		// class UAISightTargetInterface : public UInterface
		TEST_METHOD(Class__AIModule__AISightTargetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISightTargetInterface, 0x0028);
		}

		// class UAISystem : public UAISystemBase
		TEST_METHOD(Class__AIModule__AISystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystemClassName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManagerClassName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AcceptanceRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingRegularPathPointAcceptanceRadius, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingNavLinkAcceptanceRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bFinishMoveOnGoalOverlap, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAcceptPartialPaths, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowStrafing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableBTAITasks, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowControllersAsEQSQuerier, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableDebuggerPlugin, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bForgetStaleActors, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAddBlackboardSelfKey, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, DefaultSightCollisionChannel, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_V80O, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, BehaviorTreeManager, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, EnvironmentQueryManager, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystem, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AllProxyObjects, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManager, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, NavLocalGrids, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_9O4Y, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystem, 0x0130);
		}

		// class UAITask : public UGameplayTask
		TEST_METHOD(Class__AIModule__AITask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask, OwnerController, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask, 0x0070);
		}

		// class UAITask_LockLogic : public UAITask
		TEST_METHOD(Class__AIModule__AITask_LockLogic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_LockLogic, 0x0070);
		}

		// class UAITask_MoveTo : public UAITask
		TEST_METHOD(Class__AIModule__AITask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnRequestFailed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnMoveFinished, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, MoveRequest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, UnknownData_U59Q, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_MoveTo, 0x0110);
		}

		// class UAITask_RunEQS : public UAITask
		TEST_METHOD(Class__AIModule__AITask_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_RunEQS, UnknownData_W54M, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_RunEQS, 0x00E8);
		}

		// class UBehaviorTree : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_KWHA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootNode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, BlackboardAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecorators, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecoratorOps, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_KLKS, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTree, 0x0068);
		}

		// class UBrainComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_JR61, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, BlackboardComp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, AIOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_9PL1, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrainComponent, 0x0108);
		}

		// class UBehaviorTreeComponent : public UBrainComponent
		TEST_METHOD(Class__AIModule__BehaviorTreeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_SCTV, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, NodeInstances, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_1Y2G, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, DefaultBehaviorTreeAsset, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_Y81O, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeComponent, 0x0298);
		}

		// class UBehaviorTreeManager : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, MaxDebuggerSteps, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, UnknownData_Y2O8, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, LoadedTemplates, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, ActiveComponents, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeManager, 0x0050);
		}

		// class UBehaviorTreeTypes : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeTypes, 0x0028);
		}

		// class UBlackboardAssetProvider : public UInterface
		TEST_METHOD(Class__AIModule__BlackboardAssetProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardAssetProvider, 0x0028);
		}

		// class UBlackboardComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BlackboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BrainComp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, DefaultBlackboardAsset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BlackboardAsset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_X8DV, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, KeyInstances, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_AM6H, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardComponent, 0x01B8);
		}

		// class UBlackboardData : public UDataAsset
		TEST_METHOD(Class__AIModule__BlackboardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Parent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Keys, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, UnknownData_J3TZ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardData, 0x0050);
		}

		// class UBlackboardKeyType : public UObject
		TEST_METHOD(Class__AIModule__BlackboardKeyType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType, UnknownData_5FOH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType, 0x0030);
		}

		// class UBlackboardKeyType_Bool : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Bool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Bool, 0x0030);
		}

		// class UBlackboardKeyType_Class : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Class, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Class, 0x0038);
		}

		// class UBlackboardKeyType_Enum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, UnknownData_V12B, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Enum, 0x0050);
		}

		// class UBlackboardKeyType_Float : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Float)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Float, 0x0030);
		}

		// class UBlackboardKeyType_Int : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Int)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Int, 0x0030);
		}

		// class UBlackboardKeyType_Name : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Name)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Name, 0x0030);
		}

		// class UBlackboardKeyType_NativeEnum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_NativeEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumType, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_NativeEnum, 0x0048);
		}

		// class UBlackboardKeyType_Object : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Object, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Object, 0x0038);
		}

		// class UBlackboardKeyType_Rotator : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Rotator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Rotator, 0x0030);
		}

		// class UBlackboardKeyType_String : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_String)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_String, StringValue, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_String, 0x0040);
		}

		// class UBlackboardKeyType_Vector : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Vector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Vector, 0x0030);
		}

		// class UBTNode : public UObject
		TEST_METHOD(Class__AIModule__BTNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_XB23, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, NodeName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, TreeAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, ParentNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_2W32, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTNode, 0x0058);
		}

		// class UBTAuxiliaryNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTAuxiliaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTAuxiliaryNode, UnknownData_4XQW, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTAuxiliaryNode, 0x0060);
		}

		// class UBTCompositeNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTCompositeNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Children, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Services, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_MHD8, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_YJU6, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTCompositeNode, 0x0090);
		}

		// class UBTComposite_Selector : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Selector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Selector, 0x0090);
		}

		// class UBTComposite_Sequence : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Sequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Sequence, 0x0090);
		}

		// class UBTComposite_SimpleParallel : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_SimpleParallel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, FinishMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, UnknownData_NMQO, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_SimpleParallel, 0x0098);
		}

		// class UBTDecorator : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_Q6QQ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, FlowAbortMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_GOLC, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator, 0x0068);
		}

		// class UBTDecorator_BlackboardBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, BlackboardKey, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlackboardBase, 0x0090);
		}

		// class UBTDecorator_Blackboard : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_Blackboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, IntValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, FloatValue, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, StringValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, CachedDescription, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, OperationType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, NotifyObserver, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, UnknownData_9YCB, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Blackboard, 0x00C0);
		}

		// class UBTDecorator_BlueprintBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, AIOwner, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ActorOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ObservedKeyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_G3JS, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_O99T, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlueprintBase, 0x00A0);
		}

		// class UBTDecorator_CheckGameplayTagsOnActor : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CheckGameplayTagsOnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, ActorToCheck, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, TagsToMatch, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, UnknownData_V9BT, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, GameplayTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, CachedDescription, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CheckGameplayTagsOnActor, 0x00C8);
		}

		// class UBTDecorator_CompareBBEntries : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CompareBBEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, Operator, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_KZZC, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyB, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CompareBBEntries, 0x00C0);
		}

		// class UBTDecorator_ConditionalLoop : public UBTDecorator_Blackboard
		TEST_METHOD(Class__AIModule__BTDecorator_ConditionalLoop)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConditionalLoop, 0x00C0);
		}

		// class UBTDecorator_ConeCheck : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ConeCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_248M, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeDirection, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, Observed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_M0KH, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConeCheck, 0x00F0);
		}

		// class UBTDecorator_Cooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Cooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, CoolDownTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, UnknownData_ZBI5, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Cooldown, 0x0070);
		}

		// class UBTDecorator_DoesPathExist : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_DoesPathExist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_5QCT, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, PathQueryType, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_C0C5, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, FilterClass, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_DoesPathExist, 0x00C8);
		}

		// class UBTDecorator_ForceSuccess : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ForceSuccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ForceSuccess, 0x0068);
		}

		// class UBTDecorator_IsAtLocation : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsAtLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, AcceptableRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_EHZT, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, ParametrizedAcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, GeometricDistanceType, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_AXHM, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_189U, 0x00D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsAtLocation, 0x00D8);
		}

		// class UBTDecorator_IsBBEntryOfClass : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsBBEntryOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsBBEntryOfClass, TestClass, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsBBEntryOfClass, 0x0098);
		}

		// class UBTDecorator_KeepInCone : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_KeepInCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_1F07, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, Observed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_UQA7, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_KeepInCone, 0x00C8);
		}

		// class UBTDecorator_Loop : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Loop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, NumLoops, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, bInfiniteLoop, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_QR27, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, InfiniteLoopTimeoutTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_9FPS, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Loop, 0x0078);
		}

		// class UBTDecorator_ReachedMoveGoal : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ReachedMoveGoal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ReachedMoveGoal, 0x0068);
		}

		// class UBTDecorator_SetTagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, UnknownData_RQ9C, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_SetTagCooldown, 0x0078);
		}

		// class UBTDecorator_TagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bActivatesCooldown, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, UnknownData_FAYK, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TagCooldown, 0x0078);
		}

		// class UBTDecorator_TimeLimit : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TimeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimit, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, UnknownData_92IP, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TimeLimit, 0x0070);
		}

		// class UBTFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__BTFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTFunctionLibrary, 0x0028);
		}

		// class UBTService : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTService)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, Interval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, RandomDeviation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, UnknownData_CDA4, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService, 0x0070);
		}

		// class UBTService_BlackboardBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlackboardBase, 0x0098);
		}

		// class UBTService_BlueprintBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_OPXR, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_MOTA, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlueprintBase, 0x0098);
		}

		// class UBTService_DefaultFocus : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_DefaultFocus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, FocusPriority, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, UnknownData_DY5Z, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DefaultFocus, 0x00A0);
		}

		// class UBTService_RunEQS : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, EQSRequest, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, UnknownData_6JFT, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_RunEQS, 0x00F0);
		}

		// class UBTTaskNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTTaskNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, Services, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, UnknownData_V3EW, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTaskNode, 0x0070);
		}

		// class UBTTask_BlackboardBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlackboardBase, 0x0098);
		}

		// class UBTTask_BlueprintBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, TickInterval, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_5L44, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_RG57, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlueprintBase, 0x00A8);
		}

		// class UBTTask_FinishWithResult : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_FinishWithResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, Result, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, UnknownData_25UY, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FinishWithResult, 0x0078);
		}

		// class UBTTask_GameplayTaskBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_GameplayTaskBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GameplayTaskBase, UnknownData_OS5M, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_GameplayTaskBase, 0x0078);
		}

		// class UBTTask_MakeNoise : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_MakeNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, Loudnes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, UnknownData_2KJE, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MakeNoise, 0x0078);
		}

		// class UBTTask_MoveTo : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, AcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_1QKR, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, FilterClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, ObservedBlackboardValueTolerance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_9KQW, 0x00AE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveTo, 0x00B0);
		}

		// class UBTTask_MoveDirectlyToward : public UBTTask_MoveTo
		TEST_METHOD(Class__AIModule__BTTask_MoveDirectlyToward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, UnknownData_T7TD, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveDirectlyToward, 0x00B8);
		}

		// class UBTTask_PawnActionBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PawnActionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PawnActionBase, 0x0070);
		}

		// class UBTTask_PlayAnimation : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlayAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, AnimationToPlay, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_EX9W, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, MyOwnerComp, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, CachedSkelMesh, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_M4VL, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlayAnimation, 0x00B0);
		}

		// class UBTTask_PlaySound : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaySound, SoundToPlay, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaySound, 0x0078);
		}

		// class UBTTask_PushPawnAction : public UBTTask_PawnActionBase
		TEST_METHOD(Class__AIModule__BTTask_PushPawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PushPawnAction, Action, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PushPawnAction, 0x0078);
		}

		// class UBTTask_RotateToFaceBBEntry : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RotateToFaceBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, Precision, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_IFUW, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RotateToFaceBBEntry, 0x00A0);
		}

		// class UBTTask_RunBehavior : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, BehaviorAsset, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehavior, 0x0078);
		}

		// class UBTTask_RunBehaviorDynamic : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehaviorDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, InjectionTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, DefaultBehaviorAsset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, BehaviorAsset, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehaviorDynamic, 0x0088);
		}

		// class UBTTask_RunEQSQuery : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RunEQSQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryTemplate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryParams, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, RunMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_QHHF, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSQueryBlackboardKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, bUseBBKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_H9I6, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSRequest, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_QPK4, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunEQSQuery, 0x0150);
		}

		// class UBTTask_SetTagCooldown : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, bAddToExistingDuration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, UnknownData_L28V, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownDuration, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetTagCooldown, 0x0080);
		}

		// class UBTTask_Wait : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, WaitTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, RandomDeviation, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Wait, 0x0078);
		}

		// class UBTTask_WaitBlackboardTime : public UBTTask_Wait
		TEST_METHOD(Class__AIModule__BTTask_WaitBlackboardTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_WaitBlackboardTime, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_WaitBlackboardTime, 0x00A0);
		}

		// class UCrowdAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__CrowdAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdAgentInterface, 0x0028);
		}

		// class UPathFollowingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_ZU8R, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MovementComp, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_5ZFN, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MyNavData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_5TRR, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingComponent, 0x0250);
		}

		// class UCrowdFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__CrowdFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_A96E, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CrowdAgentMoveDirection, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_TB99, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdFollowingComponent, 0x0298);
		}

		// class UCrowdManager : public UCrowdManagerBase
		TEST_METHOD(Class__AIModule__CrowdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MyNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, AvoidanceConfig, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SamplingPatterns, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgentRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedAgents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedWalls, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, NavmeshCheckInterval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOptimizationInterval, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SeparationDirClamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOffsetRadiusMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, UnknownData_7Q6S, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManager, 0x00F0);
		}

		// class ADetourCrowdAIController : public AAIController
		TEST_METHOD(Class__AIModule__DetourCrowdAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADetourCrowdAIController, 0x0328);
		}

		// class UEnvQuery : public UDataAsset
		TEST_METHOD(Class__AIModule__EnvQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, QueryName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, Options, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQuery, 0x0048);
		}

		// class UEnvQueryContext : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryContext)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext, 0x0028);
		}

		// class UEnvQueryContext_BlueprintBase : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryContext_BlueprintBase, UnknownData_IGQA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_BlueprintBase, 0x0030);
		}

		// class UEnvQueryContext_Item : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Item)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Item, 0x0028);
		}

		// class UEnvQueryContext_Querier : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Querier)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Querier, 0x0028);
		}

		// class UEnvQueryDebugHelpers : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryDebugHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryDebugHelpers, 0x0028);
		}

		// class UEnvQueryGenerator : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, OptionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, ItemType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, UnknownData_ONHO, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator, 0x0050);
		}

		// class UEnvQueryGenerator_ActorsOfClass : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ActorsOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchedActorClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, GenerateOnlyActorsInRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchCenter, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ActorsOfClass, 0x00D0);
		}

		// class UEnvQueryGenerator_BlueprintBase : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratorsActionDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Context, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratedItemType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_HCB7, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_BlueprintBase, 0x0080);
		}

		// class UEnvQueryGenerator_Composite : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Composite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, Generators, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, UnknownData_EW29, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, ForcedItemType, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Composite, 0x0070);
		}

		// class UEnvQueryGenerator_ProjectedPoints : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ProjectedPoints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ProjectedPoints, ProjectionData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ProjectedPoints, 0x0080);
		}

		// class UEnvQueryGenerator_Cone : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Cone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AlignedPointsDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, ConeDegrees, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AngleStep, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, Range, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, CenterActor, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, UnknownData_CX83, 0x0169);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Cone, 0x0170);
		}

		// class UEnvQueryGenerator_CurrentLocation : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_CurrentLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_CurrentLocation, QueryContext, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_CurrentLocation, 0x0058);
		}

		// class UEnvQueryGenerator_Donut : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Donut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, InnerRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, OuterRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, NumberOfRings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, PointsPerRing, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcDirection, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcAngle, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, bUseSpiralPattern, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_76NO, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, Center, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_SME4, 0x01C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Donut, 0x01D0);
		}

		// class UEnvQueryGenerator_OnCircle : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_OnCircle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, NumberOfPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, PointOnCircleSpacingMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_I0M2, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcDirection, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcAngle, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, AngleRadians, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_ACKY, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenter, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, bIgnoreAnyContextActorsWhenGeneratingCircle, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_V91Y, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenterZOffset, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, TraceData, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_TDP9, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_OnCircle, 0x0210);
		}

		// class UEnvQueryGenerator_SimpleGrid : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_SimpleGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GridSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GenerateAround, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_SimpleGrid, 0x00F8);
		}

		// class UEnvQueryGenerator_PathingGrid : public UEnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_PathingGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, PathToItem, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, NavigationFilter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, ScanRangeMultiplier, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_PathingGrid, 0x0170);
		}

		// class UEnvQueryInstanceBlueprintWrapper : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryInstanceBlueprintWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_39P6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_5P3K, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, ItemType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OptionIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_01EZ, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OnQueryFinishedEvent, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryInstanceBlueprintWrapper, 0x0078);
		}

		// class UEnvQueryItemType : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryItemType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryItemType, UnknownData_EEQ8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType, 0x0030);
		}

		// class UEnvQueryItemType_VectorBase : public UEnvQueryItemType
		TEST_METHOD(Class__AIModule__EnvQueryItemType_VectorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_VectorBase, 0x0030);
		}

		// class UEnvQueryItemType_ActorBase : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_ActorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_ActorBase, 0x0030);
		}

		// class UEnvQueryItemType_Actor : public UEnvQueryItemType_ActorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Actor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Actor, 0x0030);
		}

		// class UEnvQueryItemType_Direction : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Direction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Direction, 0x0030);
		}

		// class UEnvQueryItemType_Point : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Point)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Point, 0x0030);
		}

		// class UEnvQueryManager : public UAISubsystem
		TEST_METHOD(Class__AIModule__EnvQueryManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_5CN2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, InstanceCache, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, LocalContexts, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, GCShieldedWrappers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_FHYT, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, MaxAllowedTestingTime, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, bTestQueriesUsingBreadth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_ALRD, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningThreshold, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningInterval, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryManager, 0x0140);
		}

		// class UEnvQueryOption : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Tests, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryOption, 0x0040);
		}

		// class UEnvQueryTest_Distance : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Distance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, UnknownData_WRDD, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, DistanceTo, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Distance, 0x0208);
		}

		// class UEnvQueryTest_Dot : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Dot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineA, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineB, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, TestMode, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, bAbsoluteValue, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, UnknownData_UJF1, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Dot, 0x0240);
		}

		// class UEnvQueryTest_GameplayTags : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_GameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagQueryToMatch, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, bUpdatedToUseQuery, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagsToMatch, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, UnknownData_IBSF, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, GameplayTags, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_GameplayTags, 0x0268);
		}

		// class UEnvQueryTest_Overlap : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Overlap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Overlap, OverlapData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Overlap, 0x0218);
		}

		// class UEnvQueryTest_Pathfinding : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Pathfinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_7580, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, Context, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, PathFromContext, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, SkipUnreachable, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, FilterClass, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Pathfinding, 0x0280);
		}

		// class UEnvQueryTest_PathfindingBatch : public UEnvQueryTest_Pathfinding
		TEST_METHOD(Class__AIModule__EnvQueryTest_PathfindingBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_PathfindingBatch, ScanRangeMultiplier, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_PathfindingBatch, 0x02B8);
		}

		// class UEnvQueryTest_Project : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Project)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Project, ProjectionData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Project, 0x0228);
		}

		// class UEnvQueryTest_Random : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Random)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Random, 0x01F8);
		}

		// class UEnvQueryTest_Trace : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Trace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceData, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceFromContext, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ItemHeightOffset, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ContextHeightOffset, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, Context, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Trace, 0x02D8);
		}

		// class UEnvQueryTest_Volume : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Volume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeContext, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeClass, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, UnknownData_Y18T, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Volume, 0x0210);
		}

		// class UEnvQueryTypes : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTypes, 0x0028);
		}

		// class UEQSQueryResultSourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__EQSQueryResultSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSQueryResultSourceInterface, 0x0028);
		}

		// class UEQSRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__AIModule__EQSRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_F0FG, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSRenderingComponent, 0x0480);
		}

		// class AEQSTestingPawn : public ACharacter
		TEST_METHOD(Class__AIModule__EQSTestingPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_JDIK, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryTemplate, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryParams, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryConfig, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, TimeLimitPerStep, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, StepToDebugDraw, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, HighlightMode, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_A84O, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_WC8R, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryingMode, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_EQP7, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, NavAgentProperties, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_EDAK, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQSTestingPawn, 0x0550);
		}

		// class UGenericTeamAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__GenericTeamAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTeamAgentInterface, 0x0028);
		}

		// class AGridPathAIController : public AAIController
		TEST_METHOD(Class__AIModule__GridPathAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGridPathAIController, 0x0328);
		}

		// class UGridPathFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__GridPathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, GridManager, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, UnknownData_VJK4, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPathFollowingComponent, 0x0280);
		}

		// class UNavFilter_AIControllerDefault : public UNavigationQueryFilter
		TEST_METHOD(Class__AIModule__NavFilter_AIControllerDefault)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_AIControllerDefault, 0x0048);
		}

		// class ANavLinkProxy : public AActor
		TEST_METHOD(Class__AIModule__NavLinkProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_J5XU, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, PointLinks, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SegmentLinks, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SmartLinkComp, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, bSmartLinkIsRelevant, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_PKA9, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, OnSmartLinkReached, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavLinkProxy, 0x0270);
		}

		// class UNavLocalGridManager : public UObject
		TEST_METHOD(Class__AIModule__NavLocalGridManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLocalGridManager, UnknownData_4JJY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLocalGridManager, 0x0058);
		}

		// class UPathFollowingManager : public UObject
		TEST_METHOD(Class__AIModule__PathFollowingManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingManager, 0x0028);
		}

		// class UPawnAction : public UObject
		TEST_METHOD(Class__AIModule__PawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ChildAction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ParentAction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, OwnerComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, Instigator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, BrainComp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_EHW8, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_AH1L, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction, 0x0098);
		}

		// class UPawnAction_BlueprintBase : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_BlueprintBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_BlueprintBase, 0x0098);
		}

		// class UPawnAction_Move : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Move)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalLocation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, AcceptableRadius, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, FilterClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, UnknownData_ZJFO, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Move, 0x00E8);
		}

		// class UPawnAction_Repeat : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Repeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ActionToRepeat, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, RecentActionCopy, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, UnknownData_01WD, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Repeat, 0x00B8);
		}

		// class UPawnAction_Sequence : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Sequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ActionSequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_DQ90, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, RecentActionCopy, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_IKYW, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Sequence, 0x00C0);
		}

		// class UPawnAction_Wait : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, TimeToWait, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, UnknownData_YXHA, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Wait, 0x00A8);
		}

		// class UPawnActionsComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnActionsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ControlledPawn, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionStacks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionEvents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, CurrentAction, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, UnknownData_QD7P, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnActionsComponent, 0x00E8);
		}

		// class UPawnSensingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnSensingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingThreshold, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, LOSHearingThreshold, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SightRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SensingInterval, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingMaxSoundAge, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, UnknownData_LEB9, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnSeePawn, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnHearNoise, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionAngle, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionCosine, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnSensingComponent, 0x00F8);
		}

		// class UVisualLoggerExtension : public UObject
		TEST_METHOD(Class__AIModule__VisualLoggerExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExtension, 0x0028);
		}

		// class UNiagaraDataInterface : public UNiagaraDataInterfaceBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface, UnknownData_898K, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface, 0x0038);
		}

		// class UMovieSceneNiagaraTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraTrack, 0x0088);
		}

		// class UMovieSceneNiagaraParameterTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraParameterTrack, Parameter, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraParameterTrack, 0x00A8);
		}

		// class UMovieSceneNiagaraBoolParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraBoolParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraBoolParameterTrack, UnknownData_VU5I, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraBoolParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraColorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraColorParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraColorParameterTrack, UnknownData_AUZ0, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraColorParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraFloatParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraFloatParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraFloatParameterTrack, UnknownData_R78J, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraFloatParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraIntegerParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraIntegerParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraIntegerParameterTrack, UnknownData_XXRL, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraIntegerParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraSystemSpawnSection : public UMovieSceneSection
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemSpawnSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionStartBehavior, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_N5ZB, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEvaluateBehavior, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_Y8ZV, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEndBehavior, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_FK5J, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, AgeUpdateMode, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_HBUN, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemSpawnSection, 0x00F8);
		}

		// class UMovieSceneNiagaraSystemTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemTrack, UnknownData_7ZRP, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemTrack, 0x0090);
		}

		// class UMovieSceneNiagaraVectorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraVectorParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_HBHH, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, ChannelsUsed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_5JJI, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraVectorParameterTrack, 0x00B8);
		}

		// class ANiagaraActor : public AActor
		TEST_METHOD(Class__Niagara__NiagaraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, NiagaraComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, UnknownData_R506, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraActor, 0x0230);
		}

		// class UNiagaraComponent : public UFXSystemComponent
		TEST_METHOD(Class__Niagara__NiagaraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, Asset, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, TickBehavior, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_B7CT, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OverrideParameters, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_PXE3, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_RYFC, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, MaxTimeBeforeForceUpdateTransform, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_7FSR, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, EmitterMaterials, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_VHR0, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OnSystemFinished, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachParent, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachSocketName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachLocationRule, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachRotationRule, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachScaleRule, 0x058A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_DSGK, 0x058B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponent, 0x05F0);
		}

		// class UNiagaraComponentPool : public UObject
		TEST_METHOD(Class__Niagara__NiagaraComponentPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, WorldParticleSystemPools, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, UnknownData_4X7W, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentPool, 0x0080);
		}

		// class UNiagaraRendererProperties : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, Platforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, SortOrderHint, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, BIsEnabled, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bMotionBlurEnabled, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, UnknownData_M7BN, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRendererProperties, 0x0080);
		}

		// class UNiagaraComponentRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraComponentRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, ComponentType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, ComponentCountLimit, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_CFV6, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, EnabledBinding, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, bAssignComponentsOnParticleID, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, bOnlyCreateComponentsOnParticleSpawn, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_PNDB, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, TemplateComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, PropertyBindings, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_81S3, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentRendererProperties, 0x0160);
		}

		// class UNiagaraComponentSettings : public UObject
		TEST_METHOD(Class__Niagara__NiagaraComponentSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, SuppressActivationList, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, ForceAutoPooolingList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, SuppressEmitterList, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentSettings, 0x0118);
		}

		// class UNiagaraConvertInPlaceUtilityBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraConvertInPlaceUtilityBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraConvertInPlaceUtilityBase, 0x0028);
		}

		// class UNiagaraDataInterface2DArrayTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterface2DArrayTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface2DArrayTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface2DArrayTexture, 0x0040);
		}

		// class UNiagaraDataInterfaceArray : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, UnknownData_CAQU, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, MaxElements, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, UnknownData_3334, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArray, 0x0050);
		}

		// class UNiagaraDataInterfaceArrayFloat : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat2 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat2, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat2, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat3 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat3)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat3, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat3, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat4 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat4, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat4, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayColor : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayColor, ColorData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayColor, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayQuat : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayQuat, QuatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayQuat, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFunctionLibrary, 0x0028);
		}

		// class UNiagaraDataInterfaceArrayInt32 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayInt32, IntData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayInt32, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayBool : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayBool, BoolData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayBool, 0x0060);
		}

		// class UNiagaraDataInterfaceAudioSubmix : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSubmix, Submix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSubmix, 0x0040);
		}

		// class UNiagaraDataInterfaceAudioOscilloscope : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioOscilloscope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Submix, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Resolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, ScopeInMilliseconds, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioOscilloscope, 0x0048);
		}

		// class UNiagaraDataInterfaceAudioPlayer : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, SoundToPlay, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, Attenuation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, Concurrency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, ParameterNames, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, bLimitPlaysPerTick, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, UnknownData_827L, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, MaxPlaysPerTick, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, bStopWhenComponentIsDestroyed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, UnknownData_N0B3, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioPlayer, 0x0070);
		}

		// class UNiagaraDataInterfaceAudioSpectrum : public UNiagaraDataInterfaceAudioSubmix
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSpectrum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, Resolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MinimumFrequency, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MaximumFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, NoiseFloorDb, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSpectrum, 0x0050);
		}

		// class UNiagaraDataInterfaceCamera : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, PlayerControllerIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, bRequireCurrentFrameData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, UnknownData_4ZLP, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCamera, 0x0040);
		}

		// class UNiagaraDataInterfaceCollisionQuery : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCollisionQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCollisionQuery, UnknownData_GL7N, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCollisionQuery, 0x0048);
		}

		// class UNiagaraDataInterfaceCurveBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ShaderLUT, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMinTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMaxTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTInvTimeRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTNumSamplesMinusOne, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_IZ6Y, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ExposedName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_73FM, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ExposedTexture, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurveBase, 0x0070);
		}

		// class UNiagaraDataInterfaceColorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceColorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, RedCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, GreenCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, BlueCurve, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, AlphaCurve, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceColorCurve, 0x0270);
		}

		// class UNiagaraDataInterfaceCurlNoise : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurlNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, Seed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, UnknownData_31KP, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurlNoise, 0x0048);
		}

		// class UNiagaraDataInterfaceCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurve, Curve, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurve, 0x00F0);
		}

		// class UNiagaraParticleCallbackHandler : public UInterface
		TEST_METHOD(Class__Niagara__NiagaraParticleCallbackHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParticleCallbackHandler, 0x0028);
		}

		// class UNiagaraDataInterfaceExport : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, CallbackHandlerParameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, UnknownData_ETSG, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationFixedSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationPerParticleSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, UnknownData_RX0A, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceExport, 0x0068);
		}

		// class UNiagaraDataInterfaceGBuffer : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGBuffer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGBuffer, 0x0038);
		}

		// class UNiagaraDataInterfaceRWBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRWBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, OutputShaderStages, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, IterationShaderStages, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRWBase, 0x00D8);
		}

		// class UNiagaraDataInterfaceGrid2D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsY, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsMaxAxis, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumAttributes, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, SetGridFromMaxAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_5NW9, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, WorldBBoxSize, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_J3YZ, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2D, 0x00F8);
		}

		// class UNiagaraDataInterfaceGrid2DCollection : public UNiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, RenderTargetUserParameter, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, OverrideBufferFormat, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, UnknownData_FMFA, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, ManagedRenderTargets, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollection, 0x01C0);
		}

		// class UNiagaraDataInterfaceGrid2DCollectionReader : public UNiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollectionReader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, EmitterName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, DIName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, UnknownData_FF1O, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollectionReader, 0x0168);
		}

		// class UNiagaraDataInterfaceGrid3D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumCells, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, CellSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumCellsMaxAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, SetResolutionMethod, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_0X6J, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, WorldBBoxSize, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_S46O, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3D, 0x0100);
		}

		// class UNiagaraDataInterfaceGrid3DCollection : public UNiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3DCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, NumAttributes, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, UnknownData_B4UI, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, RenderTargetUserParameter, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, BufferFormat, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, UnknownData_Z8KY, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3DCollection, 0x0180);
		}

		// class UNiagaraDataInterfaceLandscape : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceLandscape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceLandscape, SourceLandscape, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceLandscape, 0x0040);
		}

		// class UNiagaraDataInterfaceNeighborGrid3D : public UNiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceNeighborGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, MaxNeighborsPerCell, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, UnknownData_TR95, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceNeighborGrid3D, 0x0108);
		}

		// class UNiagaraDataInterfaceOcclusion : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceOcclusion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceOcclusion, 0x0038);
		}

		// class UNiagaraDataInterfaceParticleRead : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceParticleRead)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceParticleRead, EmitterName, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceParticleRead, 0x00E8);
		}

		// class UNiagaraDataInterfacePlatformSet : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfacePlatformSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePlatformSet, Platforms, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfacePlatformSet, 0x0068);
		}

		// class UNiagaraDataInterfaceRenderTarget2D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, OverrideRenderTargetFormat, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, UnknownData_U581, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTarget2D, 0x0158);
		}

		// class UNiagaraDataInterfaceRenderTarget2DArray : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTarget2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, OverrideRenderTargetFormat, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, UnknownData_SAED, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTarget2DArray, 0x0158);
		}

		// class UNiagaraDataInterfaceRenderTargetVolume : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTargetVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, OverrideRenderTargetFormat, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, UnknownData_4ABH, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTargetVolume, 0x0158);
		}

		// class UNiagaraDataInterfaceSimpleCounter : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSimpleCounter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSimpleCounter, 0x0038);
		}

		// class UNiagaraDataInterfaceSkeletalMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_Q1G1, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, MeshUserParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceComponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SkinningMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_IDPS, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SamplingRegions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, WholeMeshLOD, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_9G6R, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredBones, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredSockets, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, ExcludeBoneName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, bRequireCurrentFrameData, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_LEFW, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSkeletalMesh, 0x00C0);
		}

		// class UNiagaraDataInterfaceSpline : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSpline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSpline, Source, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSpline, 0x0040);
		}

		// class UNiagaraDataInterfaceStaticMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_QZO1, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, DefaultMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, Source, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SectionFilter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, bUsePhysicsBodyVelocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_UTHG, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, FilteredSockets, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_LVWT, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceStaticMesh, 0x0088);
		}

		// class UNiagaraDataInterfaceTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceTexture, 0x0040);
		}

		// class UNiagaraDataInterfaceVector2DCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector2DCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, YCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector2DCurve, 0x0170);
		}

		// class UNiagaraDataInterfaceVector4Curve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector4Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, YCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, ZCurve, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, WCurve, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector4Curve, 0x0270);
		}

		// class UNiagaraDataInterfaceVectorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, YCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, ZCurve, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorCurve, 0x01F0);
		}

		// class UNiagaraDataInterfaceVectorField : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, Field, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileY, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileZ, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, UnknownData_SEJU, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorField, 0x0048);
		}

		// class UNiagaraDataInterfaceVolumeTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVolumeTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVolumeTexture, 0x0040);
		}

		// class UNiagaraEditorDataBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEditorDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEditorDataBase, 0x0028);
		}

		// class UNiagaraSignificanceHandler : public UObject
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandler, 0x0028);
		}

		// class UNiagaraSignificanceHandlerDistance : public UNiagaraSignificanceHandler
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandlerDistance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandlerDistance, 0x0028);
		}

		// class UNiagaraSignificanceHandlerAge : public UNiagaraSignificanceHandler
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandlerAge)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandlerAge, 0x0028);
		}

		// class UNiagaraEffectType : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEffectType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UpdateFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_NEP7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, CullReaction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_1X89, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SignificanceHandler, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, DetailLevelScalabilitySettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SystemScalabilitySettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, EmitterScalabilitySettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_H2T4, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEffectType, 0x0110);
		}

		// class UNiagaraEmitter : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bLocalSpace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bDeterminism, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_OYMD, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RandomSeed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, AllocationMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_8T8N, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, PreAllocationCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UpdateScriptProps, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnScriptProps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimTarget, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_EQRS, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, FixedBounds, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MinDetailLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDetailLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GlobalSpawnCountScaleOverrides, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_NT13, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, Platforms, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, ScalabilityOverrides, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_M7QB, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDeltaTimePerTick, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, DefaultShaderStageIndex, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxUpdateIterations, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnStages, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_N68M, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UniqueEmitterName, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RendererProperties, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EventHandlerScriptProps, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimulationStages, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GPUComputeScript, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SharedEventGeneratorIds, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_KIXJ, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEmitter, 0x02A0);
		}

		// class UNiagaraEventReceiverEmitterAction : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction, 0x0028);
		}

		// class UNiagaraEventReceiverEmitterAction_SpawnParticles : public UNiagaraEventReceiverEmitterAction
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction_SpawnParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, NumParticles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, UnknownData_I1U8, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, 0x0030);
		}

		// class UNiagaraFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraFunctionLibrary, 0x0028);
		}

		// class UNiagaraLightRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraLightRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_E72C, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorAdd, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_10U7, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightRenderingEnabledBinding, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightExponentBinding, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, PositionBinding, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorBinding, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusBinding, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, VolumetricScatteringBinding, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_KAUB, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraLightRendererProperties, 0x02D8);
		}

		// class UNiagaraMeshRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraMeshRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ParticleMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SortMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_JGYB, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_6J74, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, OverrideMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_9Q0S, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, FacingMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_W12C, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_2J2K, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxis, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxisSpace, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_YL66, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PivotOffset, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PivotOffsetSpace, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_42WO, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_2VHW, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MinCameraDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaxCameraDistance, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, RendererVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_F0XG, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PositionBinding, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ColorBinding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MeshOrientationBinding, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ScaleBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageIndexBinding, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterialBinding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial1Binding, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial2Binding, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial3Binding, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaterialRandomBinding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CustomSortingBinding, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, NormalizedAgeBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CameraOffsetBinding, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, RendererVisibilityTagBinding, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_K3MY, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMeshRendererProperties, 0x0678);
		}

		// class UNiagaraMessageDataBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraMessageDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMessageDataBase, 0x0028);
		}

		// class UNiagaraParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, Collection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, OverridenParameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, ParameterStorage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, UnknownData_TBSD, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollectionInstance, 0x00C0);
		}

		// class UNiagaraParameterCollection : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Namespace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Parameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, SourceMaterialCollection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, DefaultInstance, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, CompileId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollection, 0x0060);
		}

		// class UNiagaraPrecompileContainer : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPrecompileContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, Scripts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, System, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPrecompileContainer, 0x0040);
		}

		// class ANiagaraPreviewBase : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewBase, 0x0220);
		}

		// class UNiagaraPreviewAxis : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis, 0x0028);
		}

		// class UNiagaraPreviewAxis_InterpParamBase : public UNiagaraPreviewAxis
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Param, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Count, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, UnknownData_LPDR, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamBase, 0x0038);
		}

		// class UNiagaraPreviewAxis_InterpParamInt32 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamInt32, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamFloat : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamFloat, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamVector2D : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Max, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector2D, 0x0048);
		}

		// class UNiagaraPreviewAxis_InterpParamVector : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Max, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector, 0x0050);
		}

		// class UNiagaraPreviewAxis_InterpParamVector4 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, UnknownData_RYAQ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Max, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector4, 0x0060);
		}

		// class UNiagaraPreviewAxis_InterpParamLinearColor : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Max, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamLinearColor, 0x0058);
		}

		// class ANiagaraPreviewGrid : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, System, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, ResetMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_CO7G, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisX, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisY, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingX, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingY, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumY, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewComponents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_46AK, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewGrid, 0x0270);
		}

		// class UNiagaraRibbonRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraRibbonRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, Material, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialUserParamBinding, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, FacingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_UR6Q, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0Settings, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1Settings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DrawDirection, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_AA7Q, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, CurveTension, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_IAA7, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationFactor, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bUseConstantFactor, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_VIWN, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationAngle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bScreenSpaceTessellation, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_Z8R6, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, PositionBinding, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, ColorBinding, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, VelocityBinding, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, NormalizedAgeBinding, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonTwistBinding, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonWidthBinding, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonFacingBinding, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonIdBinding, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonLinkOrderBinding, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialRandomBinding, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterialBinding, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial1Binding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial2Binding, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial3Binding, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, U0OverrideBinding, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, V0RangeOverrideBinding, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, U1OverrideBinding, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, V1RangeOverrideBinding, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_KA0K, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRibbonRendererProperties, 0x07D8);
		}

		// class UNiagaraScript : public UNiagaraScriptBase
		TEST_METHOD(Class__Niagara__NiagaraScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, Usage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_S17T, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, RapidIterationParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionParamStore, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionBoundParameters, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVMId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_WDI3, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVM, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedParameterCollectionReferences, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedDefaultDataInterfaces, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_0HWD, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScript, 0x02C0);
		}

		// class UNiagaraScriptSourceBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraScriptSourceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScriptSourceBase, UnknownData_6XI5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptSourceBase, 0x0048);
		}

		// class UNiagaraSettings : public UDeveloperSettings
		TEST_METHOD(Class__Niagara__NiagaraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, QualityLevels, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, ComponentRendererWarningsPerClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultRenderTargetFormat, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultGridFormat, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, UnknownData_WPQO, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectTypePtr, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSettings, 0x00C0);
		}

		// class UNiagaraSimulationStageBase : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, Script, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, SimulationStageName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, UnknownData_8FAF, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageBase, 0x0040);
		}

		// class UNiagaraSimulationStageGeneric : public UNiagaraSimulationStageBase
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageGeneric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, IterationSource, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_L1TJ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, Iterations, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_Q9Y7, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, DataInterface, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageGeneric, 0x0070);
		}

		// class UNiagaraSpriteRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraSpriteRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Material, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SourceMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_DPZF, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialUserParamBinding, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Alignment, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, FacingMode, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_DJPM, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PivotInUVSpace, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SortMode, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_25G9, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageSize, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_WN3N, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinFacingCameraBlendDistance, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxFacingCameraBlendDistance, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_BI5X, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinCameraDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxCameraDistance, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, RendererVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_UHJ5, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PositionBinding, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, ColorBinding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteRotationBinding, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteSizeBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteFacingBinding, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteAlignmentBinding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageIndexBinding, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterialBinding, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial1Binding, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial2Binding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial3Binding, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CameraOffsetBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UVScaleBinding, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialRandomBinding, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CustomSortingBinding, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, NormalizedAgeBinding, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, RendererVisibilityTagBinding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialParameterBindings, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_BHHW, 0x0728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSpriteRendererProperties, 0x07A0);
		}

		// class UNiagaraSystem : public UFXSystemAsset
		TEST_METHOD(Class__Niagara__NiagaraSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugSystemInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugEmitterInfo, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bRequireCurrentFrameData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_BBCM, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_5E90, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bOverrideScalabilitySettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_FCEF, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ScalabilityOverrides, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemScalabilityOverrides, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EmitterHandles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ParameterCollectionOverrides, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemSpawnScript, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemUpdateScript, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_6OUQ, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemCompiledData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ExposedParameters, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, FixedBounds, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bAutoDeactivate, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_MNLN, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTime, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickCount, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickDelta, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bHasSystemScriptDIsWithPerInstanceData, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_25MK, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UserDINamesReadInSystemScripts, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_HFLQ, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSystem, 0x0480);
		}

		// class UUI_ServerList_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ServerList__UI_ServerList_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerList_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerList_C, RotateRefreshButton, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerList_C, Border_JoinServer_Background, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerList_C, Button_JoinServer, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerList_C, Button_Refresh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerList_C, Image_MapPreview, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerList_C, ScrollBox_ServerList, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerList_C, SizeBox_ServerInfo, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerList_C, TextBlock_ServerCurrentPlayerNumber, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerList_C, TextBlock_ServerTotalPlayersNumber, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerList_C, ServerMap, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerList_C, RequestServerPing, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerList_C, Servers, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerList_C, SelectedServer, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ServerList_C, 0x02E0);
		}

		// class UUI_PremiumShop_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_PremiumShop__UI_PremiumShop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_C, HorizontalBox_Header, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_C, MultiLineEditableText_178, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_C, UI_Button_Crowns, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_C, UI_Button_Skin, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_C, UI_Button_Subscriptions, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_C, UI_PremiumShop_Crowns, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_C, UI_PremiumShop_Skin, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_C, UI_PremiumShop_Subscriptions, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_C, WidgetSwitcher_Main, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_C, PlayerState, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_PremiumShop_C, 0x02B8);
		}

		// class UUI_HomeScreen_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HomeScreen__UI_HomeScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HomeScreen_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HomeScreen_C, RotateSearchMatchTimeIcon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HomeScreen_C, PlayHovered, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HomeScreen_C, Button_Matchmaking, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HomeScreen_C, Image_MatchmakingTimer, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HomeScreen_C, TextBlock_MatchmakingTimer, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HomeScreen_C, WidgetSwitcher_Matchmaking, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HomeScreen_C, PlayerController, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HomeScreen_C, MatchmakingTime, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HomeScreen_C, 0x02A4);
		}

		// class UClothConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigBase, 0x0028);
		}

		// class UClothingSimulationFactory : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0028);
		}

		// class UClothingSimulationInteractor : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractor, UnknownData_8LEZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractor, 0x0030);
		}

		// class UClothSharedSimConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothSharedSimConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedSimConfigBase, 0x0028);
		}

		// class UClothingAssetBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0048);
		}

		// class UClothPhysicalMeshDataBase_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothPhysicalMeshDataBase_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Vertices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Normals, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Indices, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, InverseMasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, BoneData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, NumFixedVerts, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, MaxBoneWeights, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, SelfCollisionIndices, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, UnknownData_669G, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataBase_Legacy, 0x00E0);
		}

		// class UMotoSynthPreset : public UObject
		TEST_METHOD(Class__MotoSynth__MotoSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthPreset, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotoSynthPreset, 0x0090);
		}

		// class UMotoSynthSource : public UObject
		TEST_METHOD(Class__MotoSynth__MotoSynthSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, bConvertTo8Bit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_Y86U, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, DownSampleFactor, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, RPMCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceDataPCM, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceSampleRate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_MJ1X, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, GrainTable, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_90AT, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotoSynthSource, 0x00F8);
		}

		// class USynthComponentMoto : public USynthComponent
		TEST_METHOD(Class__MotoSynth__SynthComponentMoto)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, MotoSynthPreset, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, RPM, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, UnknownData_9MNN, 0x06CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMoto, 0x0780);
		}

		// class ACableActor : public AActor
		TEST_METHOD(Class__CableComponent__CableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACableActor, CableComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACableActor, 0x0228);
		}

		// class UCableComponent : public UMeshComponent
		TEST_METHOD(Class__CableComponent__CableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_DYSP, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndTo, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndToSocketName, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, EndLocation, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableLength, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSegments, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SubstepTime, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SolverIterations, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableStiffness, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bUseSubstepping, 0x04BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bSkipCableUpdateWhenNotVisible, 0x04BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bSkipCableUpdateWhenNotOwnerRecentlyRendered, 0x04BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableCollision, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_0WJ8, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CollisionFriction, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableForce, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableGravityScale, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableWidth, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSides, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, TileMaterial, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_10T9, 0x04E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCableComponent, 0x0500);
		}

		// class UUI_Solder_WeaponCustomization_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Solder_WeaponCustomization__UI_Solder_WeaponCustomization_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, Button_Back, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, UI_Solder_CustomizationSlot_Barrel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, UI_Solder_CustomizationSlot_Skin, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, UI_Solder_CustomizationSlot_Underbarrel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, UI_SolderCustomizationSlot_Accessory, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, UI_SolderCustomizationSlot_Optic, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, VerticalBox_Accessory, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, VerticalBox_Barrel, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, VerticalBox_Equipped, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, VerticalBox_Optic, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, VerticalBox_Skin, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, VerticalBox_Underbarrel, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, WidgetSwitcher_Inventory, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, modules, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomization_C, WeaponJsonInfo, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Solder_WeaponCustomization_C, 0x02E8);
		}

		// class UUI_Solder_Customization_Item_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Solder_Customization_Item__UI_Solder_Customization_Item_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, Hover, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, Border, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, Border_IsEquipped, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, Button, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, HorizontalBox_Condition, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, Image_ItemIcon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, ProgressBar_Condition, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, SizeBox, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, TextBlock_Condition, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, TextBlock_ItemName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, IsEquipped, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, UnknownData_51DQ, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, ClickDelegate, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, ItemClass, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, ItemJson, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, UI_Customization, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, IsLocked, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, UnknownData_8WPY, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, HoveredDelegate, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Item_C, Widget_Class, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Solder_Customization_Item_C, 0x0308);
		}

		// class UUI_ShopItem_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ShopItem__UI_ShopItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, Border, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, Border_Purchased, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, Border_RequiredLevel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, Button, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, Button_Unavailable, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, HorizontalBox_Price, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, HorizontalBox_RequiredLevel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, Image_Coin, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, Image_Corner, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, Image_Crowns, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, Image_ItemIcon, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, Overlay_Loading, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, TextBlock_Buy, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, TextBlock_ItemName, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, TextBlock_Price, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, TextBlock_Purchased, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, TextBlock_RequiredLevel, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, WidgetSwitcher_PriceType, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, ItemClass, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, IsHoveredDelegate, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, IsPurchased, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, IsAvailable, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, IsPremium, 0x0312);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, UnknownData_WQ3W, 0x0313);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, LevelRequired, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ShopItem_C, PlayerController, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ShopItem_C, 0x0320);
		}

		// class AARActor : public AActor
		TEST_METHOD(Class__AugmentedReality__ARActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARActor, 0x0220);
		}

		// class UARBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBlueprintLibrary, 0x0028);
		}

		// class UARTraceResultLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARTraceResultLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultLibrary, 0x0028);
		}

		// class UARBaseAsyncTaskBlueprintProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AugmentedReality__ARBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBaseAsyncTaskBlueprintProxy, UnknownData_1JVQ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBaseAsyncTaskBlueprintProxy, 0x0050);
		}

		// class UARSaveWorldAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARSaveWorldAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, UnknownData_X8WG, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSaveWorldAsyncTaskBlueprintProxy, 0x0080);
		}

		// class UARGetCandidateObjectAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARGetCandidateObjectAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, UnknownData_N5RW, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, 0x0098);
		}

		// class UARComponent : public USceneComponent
		TEST_METHOD(Class__AugmentedReality__ARComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, NativeID, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_MD04, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, bUseDefaultReplication, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_EEUF, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, DefaultMeshMaterial, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, DefaultWireframeMeshMaterial, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, MRMeshComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, MyTrackedGeometry, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_7C23, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARComponent, 0x0280);
		}

		// class UARPlaneComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPlaneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneComponent, 0x0300);
		}

		// class UARPointComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPointComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPointComponent, 0x0280);
		}

		// class UARFaceComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARFaceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceComponent, ReplicatedPayload, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceComponent, UnknownData_86Y0, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceComponent, 0x02E0);
		}

		// class UARImageComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARImageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARImageComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARImageComponent, 0x02E0);
		}

		// class UARQRCodeComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARQRCodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARQRCodeComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARQRCodeComponent, 0x02F0);
		}

		// class UARPoseComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPoseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPoseComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPoseComponent, 0x02C0);
		}

		// class UAREnvironmentProbeComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__AREnvironmentProbeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentProbeComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentProbeComponent, 0x02B0);
		}

		// class UARObjectComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARObjectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARObjectComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARObjectComponent, 0x02B0);
		}

		// class UARMeshComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARMeshComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARMeshComponent, 0x02E0);
		}

		// class UARGeoAnchorComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARGeoAnchorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchorComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoAnchorComponent, 0x02F0);
		}

		// class UARDependencyHandler : public UObject
		TEST_METHOD(Class__AugmentedReality__ARDependencyHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARDependencyHandler, 0x0028);
		}

		// class UARGeoTrackingSupport : public UObject
		TEST_METHOD(Class__AugmentedReality__ARGeoTrackingSupport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoTrackingSupport, 0x0028);
		}

		// class UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, UnknownData_9V8Q, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, 0x00A0);
		}

		// class UGetGeoLocationAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__GetGeoLocationAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, onSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, UnknownData_8J5K, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetGeoLocationAsyncTaskBlueprintProxy, 0x00A0);
		}

		// class UARLifeCycleComponent : public USceneComponent
		TEST_METHOD(Class__AugmentedReality__ARLifeCycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, OnARActorSpawnedDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, OnARActorToBeDestroyedDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, UnknownData_GWUR, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLifeCycleComponent, 0x0230);
		}

		// class UARLightEstimate : public UObject
		TEST_METHOD(Class__AugmentedReality__ARLightEstimate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLightEstimate, 0x0028);
		}

		// class UARBasicLightEstimate : public UARLightEstimate
		TEST_METHOD(Class__AugmentedReality__ARBasicLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientIntensityLumens, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColorTemperatureKelvin, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColor, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBasicLightEstimate, 0x0040);
		}

		// class AAROriginActor : public AActor
		TEST_METHOD(Class__AugmentedReality__AROriginActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAROriginActor, 0x0220);
		}

		// class UARPin : public UObject
		TEST_METHOD(Class__AugmentedReality__ARPin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackedGeometry, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, PinnedComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_11Q3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_7QZC, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTrackingStateChanged, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTransformUpdated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_FN7V, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPin, 0x00F0);
		}

		// class UARSessionConfig : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateMeshDataFromTrackedGeometry, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateCollisionForMeshData, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateNavMeshForMeshData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseMeshDataForOcclusion, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bRenderMeshDataInWireframe, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bTrackSceneObjects, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUsePersonSegmentationForOcclusion, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseSceneDepthForOcclusion, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseAutomaticImageScaleEstimation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseStandardOnboardingUX, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldAlignment, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SessionType, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneDetectionMode, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bHorizontalPlaneDetection, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bVerticalPlaneDetection, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutoFocus, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, LightEstimationMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FrameSyncMode, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraOverlay, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraTracking, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetCameraTracking, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetTrackedObjects, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_QAEW, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateImages, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumSimultaneousImagesTracked, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentCaptureProbeType, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_O6TO, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldMapData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateObjects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DesiredVideoFormat, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseOptimalVideoFormat, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingDirection, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingUpdate, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_Z6OE, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumberOfTrackedFaces, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_ONII, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SerializedARCandidateImageDatabase, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnabledSessionTrackingFeature, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SceneReconstructionMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_5ZNY, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneComponentClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PointComponentClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceComponentClass, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, ImageComponentClass, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, QRCodeComponentClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PoseComponentClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentProbeComponentClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, ObjectComponentClass, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MeshComponentClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, GeoAnchorComponentClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DefaultMeshMaterial, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DefaultWireframeMeshMaterial, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSessionConfig, 0x0110);
		}

		// class AARSharedWorldGameMode : public AGameMode
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, BufferSizePerChunk, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, UnknownData_0BPX, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameMode, 0x0370);
		}

		// class AARSharedWorldGameState : public AGameState
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageData, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesTotal, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesTotal, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesDelivered, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesDelivered, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, UnknownData_LM6J, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameState, 0x02C8);
		}

		// class AARSharedWorldPlayerController : public APlayerController
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldPlayerController, UnknownData_7WL3, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldPlayerController, 0x0578);
		}

		// class AARSkyLight : public ASkyLight
		TEST_METHOD(Class__AugmentedReality__ARSkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, CaptureProbe, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, UnknownData_JI6B, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSkyLight, 0x0240);
		}

		// class UARTexture : public UTexture
		TEST_METHOD(Class__AugmentedReality__ARTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, TextureType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, UnknownData_ERNC, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Timestamp, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, ExternalTextureGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Size, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTexture, 0x00F8);
		}

		// class UARTextureCameraImage : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraImage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraImage, 0x00F8);
		}

		// class UARTextureCameraDepth : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthQuality, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthAccuracy, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, bIsTemporallySmoothed, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, UnknownData_TONE, 0x00FB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraDepth, 0x0100);
		}

		// class UAREnvironmentCaptureProbeTexture : public UTextureCube
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, TextureType, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, UnknownData_0L4O, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Timestamp, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, ExternalTextureGuid, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Size, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbeTexture, 0x0150);
		}

		// class UARTraceResultDummy : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTraceResultDummy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultDummy, 0x0028);
		}

		// class UARTrackedGeometry : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTrackedGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UniqueId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_XB65, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_737P, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnderlyingMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, ObjectClassification, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_28IQ, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LastUpdateFrameNumber, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_7SWQ, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, DebugName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_ZPON, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedGeometry, 0x00F8);
		}

		// class UARPlaneGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARPlaneGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_X22E, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Center, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Extent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_CNU1, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, BoundaryPolygon, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, SubsumedBy, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneGeometry, 0x0130);
		}

		// class UARTrackedPoint : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPoint, UnknownData_07P3, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPoint, 0x0100);
		}

		// class UARTrackedImage : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, DetectedImage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, EstimatedSize, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedImage, 0x0108);
		}

		// class UARTrackedQRCode : public UARTrackedImage
		TEST_METHOD(Class__AugmentedReality__ARTrackedQRCode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, QRCode, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, Version, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, UnknownData_X7LR, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedQRCode, 0x0120);
		}

		// class UARFaceGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARFaceGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LookAtTarget, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, bIsTracked, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_DVLM, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, BlendShapes, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_9CYF, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LeftEyeTransform, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, RightEyeTransform, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceGeometry, 0x01F0);
		}

		// class UAREnvironmentCaptureProbe : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, Extent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_AYT0, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, EnvironmentCaptureTexture, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbe, 0x0110);
		}

		// class UARTrackedObject : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedObject, DetectedObject, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedObject, 0x0100);
		}

		// class UARTrackedPose : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, TrackedPose, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, UnknownData_WSCO, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPose, 0x0150);
		}

		// class UARMeshGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARMeshGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARMeshGeometry, UnknownData_PIAQ, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARMeshGeometry, 0x0100);
		}

		// class UARGeoAnchor : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARGeoAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchor, UnknownData_FWMM, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchor, UnknownData_IDN6, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoAnchor, 0x0110);
		}

		// class UARTrackableNotifyComponent : public UActorComponent
		TEST_METHOD(Class__AugmentedReality__ARTrackableNotifyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedGeometry, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedGeometry, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedGeometry, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPlane, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPlane, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPlane, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPoint, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPoint, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPoint, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedImage, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedImage, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedImage, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedFace, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedFace, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedFace, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedEnvProbe, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedEnvProbe, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedEnvProbe, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedObject, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedObject, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedObject, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackableNotifyComponent, 0x0200);
		}

		// class UARTypesDummyClass : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTypesDummyClass)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTypesDummyClass, 0x0028);
		}

		// class UARCandidateImage : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, CandidateTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, FriendlyName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Width, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Height, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Orientation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, UnknownData_XKHP, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateImage, 0x0058);
		}

		// class UARCandidateObject : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, CandidateObjectData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, FriendlyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, BoundingBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, UnknownData_0KNY, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateObject, 0x0070);
		}

		// class UAnimationDataSourceRegistry : public UObject
		TEST_METHOD(Class__AnimationCore__AnimationDataSourceRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationDataSourceRegistry, DataSources, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationDataSourceRegistry, 0x0078);
		}

		// class UUI_Solder_Statistic_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Solder_Statistic__UI_Solder_Statistic_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Statistic_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Statistic_C, Button_VipStatus, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Statistic_C, Image_Rank, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Statistic_C, ProgressBar_Progress, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Statistic_C, TextBlock_CurrentProgress, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Statistic_C, TextBlock_Level, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Statistic_C, TextBlock_PlayerName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Statistic_C, TextBlock_ProgressToNextLevel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Statistic_C, TextBlock_RegistrationDate, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Solder_Statistic_C, 0x02A8);
		}

		// class UUI_KillLog_Entry_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_KillLog_Entry__UI_KillLog_Entry_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_KillLog_Entry_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_KillLog_Entry_C, Hidden, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_KillLog_Entry_C, HorizontalBox_Headshot, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_KillLog_Entry_C, Image_GrenadeKill, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_KillLog_Entry_C, TextBlock_Killed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_KillLog_Entry_C, TextBlock_Killer, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_KillLog_Entry_C, TextBlock_Weapon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_KillLog_Entry_C, MyPlayerState, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_KillLog_Entry_C, killed, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_KillLog_Entry_C, killer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_KillLog_Entry_C, isHeadshot, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_KillLog_Entry_C, isGrenade, 0x02B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_KillLog_Entry_C, 0x02B2);
		}

		// class UUWorks : public UObject
		TEST_METHOD(Class__UWorks__UWorks)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorks, 0x0028);
		}

		// class UUWorksInterface : public UUWorks
		TEST_METHOD(Class__UWorks__UWorksInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksInterface, 0x0028);
		}

		// class UUWorksRequest : public UUWorks
		TEST_METHOD(Class__UWorks__UWorksRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksRequest, 0x0028);
		}

		// class ABP_PG_GameState_Game_C : public APG_GameState_Game
		TEST_METHOD(BlueprintGeneratedClass__BP_PG_GameState_Game__BP_PG_GameState_Game_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_GameState_Game_C, DefaultSceneRoot, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PG_GameState_Game_C, 0x0380);
		}

		// class UFontBulkData : public UObject
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_ALR9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x0078);
		}

		// class UFontFaceInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0028);
		}

		// class UFontProviderInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0028);
		}

		// class USlateTypes : public UObject
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0028);
		}

		// class USlateWidgetStyleAsset : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0030);
		}

		// class USlateWidgetStyleContainerBase : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_PTUW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0030);
		}

		// class USlateWidgetStyleContainerInterface : public UInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0028);
		}

		// class UCameraShake_Explosion_C : public UMatineeCameraShake
		TEST_METHOD(BlueprintGeneratedClass__CameraShake_Explosion__CameraShake_Explosion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake_Explosion_C, 0x0180);
		}

		// class UFixedFrameRateCustomTimeStep : public UEngineCustomTimeStep
		TEST_METHOD(Class__TimeManagement__FixedFrameRateCustomTimeStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedFrameRateCustomTimeStep, FixedFrameRate, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedFrameRateCustomTimeStep, 0x0030);
		}

		// class UGenlockedCustomTimeStep : public UFixedFrameRateCustomTimeStep
		TEST_METHOD(Class__TimeManagement__GenlockedCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenlockedCustomTimeStep, 0x0030);
		}

		// class UGenlockedTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__TimeManagement__GenlockedTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenlockedTimecodeProvider, bUseGenlockToCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenlockedTimecodeProvider, UnknownData_68GM, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenlockedTimecodeProvider, 0x0058);
		}

		// class UTimeManagementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TimeManagement__TimeManagementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeManagementBlueprintLibrary, 0x0028);
		}

		// class UTimeSynchronizationSource : public UObject
		TEST_METHOD(Class__TimeManagement__TimeSynchronizationSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, bUseForSynchronization, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, UnknownData_9QYA, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, FrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizationSource, 0x0030);
		}

		// class UChaosDestructionListener : public USceneComponent
		TEST_METHOD(Class__GeometryCollectionEngine__ChaosDestructionListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_246B, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, CollisionEventRequestSettings, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, BreakingEventRequestSettings, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, TrailingEventRequestSettings, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_0F59, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, ChaosSolverActors, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, GeometryCollectionActors, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnCollisionEvents, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnBreakingEvents, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnTrailingEvents, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_TATI, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDestructionListener, 0x0420);
		}

		// class AGeometryCollectionActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionDebugDrawComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionActor, 0x0230);
		}

		// class UGeometryCollectionCache : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, RecordedData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, SupportedCollection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, CompatibleCollectionState, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionCache, 0x0050);
		}

		// class UGeometryCollectionComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_I3L0, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ChaosSolverActor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_LBKA, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RestCollection, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitializationFields, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, Simulating, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_9XJW, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ObjectType, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, EnableClustering, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_TPA0, 0x057A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterGroupIndex, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MaxClusterLevel, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_NIZ1, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DamageThreshold, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterConnectionType, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_SSQJ, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionGroup, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionSampleFraction, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, LinearEtherDrag, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, AngularEtherDrag, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_PYC9, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterial, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialVelocityType, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_TNEL, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialLinearVelocity, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialAngularVelocity, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_CQEY, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterialOverride, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CacheParameters, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsStateChange, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsLoadingStateChange, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_4DKC, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosBreakEvent, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DesiredCacheTime, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CachePlayback, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_J3MH, 0x067D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosPhysicsCollision, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyBreaks, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyCollisions, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bEnableReplication, 0x0692);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bEnableAbandonAfterLevel, 0x0693);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ReplicationAbandonClusterLevel, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RepData, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_XXDF, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DummyBodySetup, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_H1JL, 0x08D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionComponent, 0x08F0);
		}

		// class AGeometryCollectionDebugDrawActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, WarningMessage, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_LDW8, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SelectedRigidBody, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawWholeCollection, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawHierarchy, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawClustering, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, HideGeometry, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyId, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyCollision, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bCollisionAtOrigin, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyTransform, 0x0247);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInertia, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyVelocity, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyForce, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInfos, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransformIndex, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransform, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowParent, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowLevel, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowConnectivityEdges, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryIndex, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryTransform, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowBoundingBox, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaces, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceIndices, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceNormals, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowSingleFace, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceIndex, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertices, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexIndices, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexNormals, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bUseActiveVisualization, 0x025F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, PointThickness, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LineThickness, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bTextShadow, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_JJES, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TextScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, NormalScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, AxisScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ArrowScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyIdColor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyTransformScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyCollisionColor, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInertiaColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyVelocityColor, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyForceColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInfoColor, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformIndexColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LevelColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ParentColor, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ConnectivityEdgeThickness, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryIndexColor, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryTransformScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, BoundingBoxColor, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceIndexColor, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceNormalColor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceColor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexIndexColor, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexNormalColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_0U3P, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SpriteComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_JHN5, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionDebugDrawActor, 0x0308);
		}

		// class UGeometryCollectionDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionDebugDrawActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionRenderLevelSetActor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_VIV5, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionDebugDrawComponent, 0x00C8);
		}

		// class UGeometryCollection : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_O2PD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, GeometrySource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Materials, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, ImplicitType, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_YZ5S, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinLevelSetResolution, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxLevelSetResolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinClusterLevelSetResolution, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxClusterLevelSetResolution, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionObjectReductionPercentage, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, bMassAsDensity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_VIBA, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Mass, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinimumMassClamp, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionParticlesFraction, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaximumCollisionParticles, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_9D4U, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, SizeSpecificData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, EnableRemovePiecesOnFracture, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_RCL1, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, RemoveOnFractureMaterials, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, PersistentGuid, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, StateGuid, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, BoneSelectedMaterialIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_VHRC, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollection, 0x00E0);
		}

		// class AGeometryCollectionRenderLevelSetActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionRenderLevelSetActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, TargetVolumeTexture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RayMarchMaterial, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, SurfaceTolerance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Isovalue, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Enabled, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RenderVolumeBoundingBox, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, UnknownData_TIKQ, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionRenderLevelSetActor, 0x02C0);
		}

		// class USkeletalMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__SkeletalMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_C0X0, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, PhysicalMaterial, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ChaosSolverActor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bSimulating, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bNotifyCollisions, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ObjectType, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_4I3G, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, Density, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinMass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxMass, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionType, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_LN2I, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeParticlesPerUnitArea, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMinNumParticles, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMaxNumParticles, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinLevelSetResolution, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxLevelSetResolution, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionGroup, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialVelocityType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_VN8N, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialLinearVelocity, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialAngularVelocity, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OnChaosPhysicsCollision, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_7VSL, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimulationComponent, 0x0138);
		}

		// class UStaticMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__StaticMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_429U, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Simulating, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, bNotifyCollisions, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ObjectType, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_1NT5, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Mass, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, CollisionType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ImplicitType, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_0TWJ, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MinLevelSetResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MaxLevelSetResolution, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialVelocityType, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_44FK, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialLinearVelocity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialAngularVelocity, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, DamageThreshold, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_S93N, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, PhysicalMaterial, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ChaosSolverActor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, OnChaosPhysicsCollision, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_LA0R, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, SimulatedComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_HLXT, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSimulationComponent, 0x0138);
		}

		// class UNetDebugStatsFunctions : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__NetDebugStats__NetDebugStatsFunctions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDebugStatsFunctions, 0x0028);
		}

		// class UAnimSharingStateInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingStateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, AnimationToPlay, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PermutationTimeOffset, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PlayRate, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, bStateBool, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_QYYO, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, Instance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_HK86, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingStateInstance, 0x02E0);
		}

		// class UAnimSharingTransitionInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingTransitionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, FromComponent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, ToComponent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, BlendTime, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, bBlendBool, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, UnknownData_1WUD, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingTransitionInstance, 0x02D0);
		}

		// class UAnimSharingAdditiveInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingAdditiveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, BaseComponent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, AdditiveAnimation, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, Alpha, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, bStateBool, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, UnknownData_X9QX, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingAdditiveInstance, 0x02D0);
		}

		// class UAnimSharingInstance : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimSharingInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, RegisteredActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_0WR2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateProcessor, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_E252, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UsedAnimationSequences, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_L0ZF, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateEnum, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, SharingActor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_76OA, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingInstance, 0x0118);
		}

		// class UAnimationSharingManager : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, Skeletons, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, PerSkeletonData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, UnknownData_VO9R, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingManager, 0x0088);
		}

		// class UAnimationSharingSetup : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, SkeletonSetups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, ScalabilitySettings, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingSetup, 0x0048);
		}

		// class UAnimationSharingStateProcessor : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingStateProcessor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingStateProcessor, AnimationStateEnum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingStateProcessor, 0x0050);
		}

		// class UMyPluginObject : public UObject
		TEST_METHOD(Class__UObjectPlugin__MyPluginObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMyPluginObject, MyStruct, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMyPluginObject, 0x0038);
		}

		// class UActorSequence : public UMovieSceneSequence
		TEST_METHOD(Class__ActorSequence__ActorSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, ObjectReferences, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequence, 0x0088);
		}

		// class UActorSequenceComponent : public UActorComponent
		TEST_METHOD(Class__ActorSequence__ActorSequenceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, PlaybackSettings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, UnknownData_260J, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, Sequence, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, SequencePlayer, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequenceComponent, 0x00D8);
		}

		// class UActorSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__ActorSequence__ActorSequencePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequencePlayer, 0x0680);
		}

		// class UMeshDescription : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescription, 0x0028);
		}

		// class UMeshDescriptionBase : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescriptionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshDescriptionBase, UnknownData_35A6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescriptionBase, 0x0390);
		}

		// class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0028);
		}

		// class UMotionControllerComponent : public UPrimitiveComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, PlayerIndex, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, Hand, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_IGCI, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, MotionSource, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_LP6V, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, bDisplayDeviceModel, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_IA84, 0x0456);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayModelSource, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CustomDisplayMesh, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayMeshMaterialOverrides, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_LV4G, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayComponent, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_T2UV, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x0500);
		}

		// class UMotionTrackedDeviceFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0028);
		}

		// class UVRNotificationsComponent : public UActorComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0140);
		}

		// class UXRAssetFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRAssetFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRAssetFunctionLibrary, 0x0028);
		}

		// class UAsyncTask_LoadXRDeviceVisComponent : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__HeadMountedDisplay__AsyncTask_LoadXRDeviceVisComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnModelLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnLoadFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, UnknownData_4SVP, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, SpawnedComponent, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTask_LoadXRDeviceVisComponent, 0x0060);
		}

		// class UXRLoadingScreenFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRLoadingScreenFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRLoadingScreenFunctionLibrary, 0x0028);
		}

		// class UStaticMeshDescription : public UMeshDescriptionBase
		TEST_METHOD(Class__StaticMeshDescription__StaticMeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshDescription, 0x0390);
		}

		// class UAnimSequenceLevelSequenceLink : public UAssetUserData
		TEST_METHOD(Class__LevelSequence__AnimSequenceLevelSequenceLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceLevelSequenceLink, SkelTrackGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceLevelSequenceLink, PathToLevelSequence, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceLevelSequenceLink, 0x0050);
		}

		// class UDefaultLevelSequenceInstanceData : public UObject
		TEST_METHOD(Class__LevelSequence__DefaultLevelSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_ZJDF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOriginActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_DGP8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOrigin, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLevelSequenceInstanceData, 0x0070);
		}

		// class ULevelSequenceMetaData : public UInterface
		TEST_METHOD(Class__LevelSequence__LevelSequenceMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceMetaData, 0x0028);
		}

		// class ULevelSequence : public UMovieSceneSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, UnknownData_1T77, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, DirectorClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, AssetUserData, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x01C8);
		}

		// class ULevelSequenceBurnInInitSettings : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0028);
		}

		// class ULevelSequenceBurnInOptions : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_KFT6, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, Settings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0050);
		}

		// class ALevelSequenceActor : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_4379, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, PlaybackSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_5M46, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, SequencePlayer, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, LevelSequence, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, CameraSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_8INN, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInOptions, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BindingOverrides, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_RF5U, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, DefaultInstanceData, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInInstance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bShowBurnin, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_YQ00, 0x0299);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceActor, 0x02A0);
		}

		// class ULevelSequenceAnimSequenceLink : public UAssetUserData
		TEST_METHOD(Class__LevelSequence__LevelSequenceAnimSequenceLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceAnimSequenceLink, AnimSequenceLinks, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceAnimSequenceLink, 0x0038);
		}

		// class ULevelSequenceBurnIn : public UUserWidget
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x0320);
		}

		// class ULevelSequenceDirector : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceDirector, Player, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceDirector, 0x0030);
		}

		// class ULegacyLevelSequenceDirectorBlueprint : public UBlueprint
		TEST_METHOD(Class__LevelSequence__LegacyLevelSequenceDirectorBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegacyLevelSequenceDirectorBlueprint, 0x00A0);
		}

		// class ULevelSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_Q91H, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x0798);
		}

		// class ALevelSequenceMediaController : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceMediaController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_SIKS, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, Sequence, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, MediaComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, ServerStartTimeSeconds, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_ZYJN, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceMediaController, 0x0248);
		}

		// class UTKMathFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__VictoryBPLibrary__TKMathFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTKMathFunctionLibrary, 0x0028);
		}

		// class UVictoryBPFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__VictoryBPLibrary__VictoryBPFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVictoryBPFunctionLibrary, 0x0028);
		}

		// class UVictoryBPHTML : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__VictoryBPLibrary__VictoryBPHTML)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVictoryBPHTML, 0x0028);
		}

		// class AVictoryISM : public AActor
		TEST_METHOD(Class__VictoryBPLibrary__VictoryISM)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVictoryISM, Mesh, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVictoryISM, 0x0228);
		}

		// class AVictoryPC : public APlayerController
		TEST_METHOD(Class__VictoryBPLibrary__VictoryPC)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVictoryPC, 0x0570);
		}

		// class UVictoryTMapComp : public UActorComponent
		TEST_METHOD(Class__VictoryBPLibrary__VictoryTMapComp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVictoryTMapComp, UnknownData_WYBY, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVictoryTMapComp, 0x02E0);
		}

		// class UNiagaraMergeable : public UObject
		TEST_METHOD(Class__NiagaraCore__NiagaraMergeable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMergeable, 0x0028);
		}

		// class UNiagaraDataInterfaceBase : public UNiagaraMergeable
		TEST_METHOD(Class__NiagaraCore__NiagaraDataInterfaceBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceBase, 0x0028);
		}

		// class UAssetTagsSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__AssetTags__AssetTagsSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetTagsSubsystem, 0x0030);
		}

		// class UAudioAnalyzerAsset : public UObject
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerAsset, 0x0028);
		}

		// class UAudioAnalyzerNRTSettings : public UAudioAnalyzerAsset
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerNRTSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerNRTSettings, 0x0028);
		}

		// class UAudioAnalyzerNRT : public UAudioAnalyzerAsset
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, Sound, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, DurationInSeconds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, UnknownData_IKVJ, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerNRT, 0x0078);
		}

		// class ABP_Item_Rifle_AK47_C : public AItem_Weapon_Rifle
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Rifle_AK47__BP_Item_Rifle_AK47_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Rifle_AK47_C, UberGraphFrame, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Rifle_AK47_C, 0x03E8);
		}

		// class ABP_Item_Rifle_AK12_C : public AItem_Weapon_Rifle
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Rifle_AK12__BP_Item_Rifle_AK12_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Rifle_AK12_C, UberGraphFrame, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Rifle_AK12_C, IronSight, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Rifle_AK12_C, 0x03F0);
		}

		// class AFieldSystemActor : public AActor
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFieldSystemActor, FieldSystemComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFieldSystemActor, 0x0228);
		}

		// class UFieldSystem : public UObject
		TEST_METHOD(Class__FieldSystemEngine__FieldSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystem, UnknownData_BLGB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystem, 0x0038);
		}

		// class UFieldSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, FieldSystem, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_0BF5, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, SupportedSolvers, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_O4WI, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemComponent, 0x0480);
		}

		// class UFieldSystemMetaData : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaData, 0x00B0);
		}

		// class UFieldSystemMetaDataIteration : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataIteration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, Iterations, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, UnknownData_APAP, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataIteration, 0x00B8);
		}

		// class UFieldSystemMetaDataProcessingResolution : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataProcessingResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, ResolutionType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, UnknownData_XSCW, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataProcessingResolution, 0x00B8);
		}

		// class UFieldNodeBase : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeBase, 0x00B0);
		}

		// class UFieldNodeInt : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeInt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeInt, 0x00B0);
		}

		// class UFieldNodeFloat : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeFloat)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeFloat, 0x00B0);
		}

		// class UFieldNodeVector : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeVector, 0x00B0);
		}

		// class UUniformInteger : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__UniformInteger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, UnknownData_9UGI, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformInteger, 0x00B8);
		}

		// class URadialIntMask : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__RadialIntMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Position, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, InteriorValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, ExteriorValue, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, SetMaskCondition, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, UnknownData_VBGT, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialIntMask, 0x00D0);
		}

		// class UUniformScalar : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__UniformScalar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, UnknownData_QBNL, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformScalar, 0x00B8);
		}

		// class URadialFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__RadialFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Radius, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Falloff, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, UnknownData_51LO, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialFalloff, 0x00D8);
		}

		// class UPlaneFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__PlaneFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Distance, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Normal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Falloff, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, UnknownData_GVKM, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneFalloff, 0x00E0);
		}

		// class UBoxFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__BoxFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Falloff, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, UnknownData_YDUW, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxFalloff, 0x0100);
		}

		// class UNoiseField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__NoiseField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MinRange, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MaxRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, UnknownData_24FK, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, Transform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoiseField, 0x00F0);
		}

		// class UUniformVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__UniformVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Direction, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformVector, 0x00C0);
		}

		// class URadialVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RadialVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Position, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialVector, 0x00C0);
		}

		// class URandomVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RandomVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, UnknownData_N4SZ, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomVector, 0x00B8);
		}

		// class UOperatorField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__OperatorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_VR1K, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, RightField, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, LeftField, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Operation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_C9WM, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOperatorField, 0x00D0);
		}

		// class UToIntegerField : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__ToIntegerField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToIntegerField, FloatField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToIntegerField, 0x00B8);
		}

		// class UToFloatField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__ToFloatField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToFloatField, IntField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToFloatField, 0x00B8);
		}

		// class UCullingField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__CullingField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Culling, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Field, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Operation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, UnknownData_COF7, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCullingField, 0x00C8);
		}

		// class UReturnResultsTerminal : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__ReturnResultsTerminal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReturnResultsTerminal, 0x00B0);
		}

		// class USignificanceManager : public UObject
		TEST_METHOD(Class__SignificanceManager__SignificanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, UnknownData_2I5U, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, SignificanceManagerClassName, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USignificanceManager, 0x0120);
		}

		// class ABP_PG_GameMode_Game_C : public APG_GameMode_Game
		TEST_METHOD(BlueprintGeneratedClass__BP_PG_GameMode_Game__BP_PG_GameMode_Game_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_GameMode_Game_C, DefaultSceneRoot, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PG_GameMode_Game_C, 0x0330);
		}

		// class UDefaultComboBoxSetting_C : public UComboBoxSetting
		TEST_METHOD(WidgetBlueprintGeneratedClass__DefaultComboBoxSetting__DefaultComboBoxSetting_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultComboBoxSetting_C, 0x02D8);
		}

		// class UDefaultCheckBoxSetting_C : public UCheckBoxSetting
		TEST_METHOD(WidgetBlueprintGeneratedClass__DefaultCheckBoxSetting__DefaultCheckBoxSetting_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultCheckBoxSetting_C, 0x02B8);
		}

		// class UAvfMediaSettings : public UObject
		TEST_METHOD(Class__AvfMediaFactory__AvfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, NativeAudioOut, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, UnknownData_HF9I, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvfMediaSettings, 0x0030);
		}

		// class ABP_Item_Skin_ScarH_05_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_ScarH_05__BP_Item_Skin_ScarH_05_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_ScarH_05_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_ScarH_05_C, 0x0290);
		}

		// class ABP_Item_Skin_ScarH_04_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_ScarH_04__BP_Item_Skin_ScarH_04_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_ScarH_04_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_ScarH_04_C, 0x0290);
		}

		// class ABP_Item_Skin_M14_03_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_M14_03__BP_Item_Skin_M14_03_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_M14_03_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_M14_03_C, 0x0290);
		}

		// class ABP_Item_Skin_Glock17_04_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_Glock17_04__BP_Item_Skin_Glock17_04_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_Glock17_04_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_Glock17_04_C, 0x0290);
		}

		// class ABP_Item_Skin_AK47_01_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_AK47_01__BP_Item_Skin_AK47_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_AK47_01_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_AK47_01_C, 0x0290);
		}

		// class ABP_Item_Skin_AK12_07_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_AK12_07__BP_Item_Skin_AK12_07_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_AK12_07_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_AK12_07_C, 0x0290);
		}

		// class ABP_Item_Optic_CollimatorSight_01_C : public AItem_Module_Optic
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Optic_CollimatorSight_01__BP_Item_Optic_CollimatorSight_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Optic_CollimatorSight_01_C, 0x0298);
		}

		// class ABP_Item_Optic_HolographicSight_01_C : public AItem_Module_Optic
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Optic_HolographicSight_01__BP_Item_Optic_HolographicSight_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Optic_HolographicSight_01_C, 0x0298);
		}

		// class UUI_TeamBaseMarker_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_TeamBaseMarker__UI_TeamBaseMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TeamBaseMarker_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TeamBaseMarker_C, Button, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TeamBaseMarker_C, SizeBox, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TeamBaseMarker_C, Team, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TeamBaseMarker_C, AllowPlayerSpawn, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TeamBaseMarker_C, UnknownData_DG5D, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TeamBaseMarker_C, SelectAsSpawnPointDelegate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_TeamBaseMarker_C, Size, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_TeamBaseMarker_C, 0x0294);
		}

		// class ABP_MenuCharacter_C : public AMenuCharacter
		TEST_METHOD(BlueprintGeneratedClass__BP_MenuCharacter__BP_MenuCharacter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MenuCharacter_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MenuCharacter_C, Pistol, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MenuCharacter_C, Grenade_02, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MenuCharacter_C, Grenade_01, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MenuCharacter_C, Pouch_03, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MenuCharacter_C, Pouch_02, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MenuCharacter_C, Pouch_01, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MenuCharacter_C, Glowstick, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MenuCharacter_C, Tool, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MenuCharacter_C, Radio, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MenuCharacter_C, 0x02B0);
		}

		// class UDefaultActionLabel_C : public UActionLabel
		TEST_METHOD(WidgetBlueprintGeneratedClass__DefaultActionLabel__DefaultActionLabel_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultActionLabel_C, 0x02F8);
		}

		// class UDefaultBindCaptureButton_C : public UBindCaptureButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__DefaultBindCaptureButton__DefaultBindCaptureButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultBindCaptureButton_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultBindCaptureButton_C, Button_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultBindCaptureButton_C, Content, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultBindCaptureButton_C, 0x02A8);
		}

		// class UDefaultAxisLabel_C : public UAxisLabel
		TEST_METHOD(WidgetBlueprintGeneratedClass__DefaultAxisLabel__DefaultAxisLabel_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultAxisLabel_C, 0x02A8);
		}

		// class UDefaultActionMapping_C : public UActionMapping
		TEST_METHOD(WidgetBlueprintGeneratedClass__DefaultActionMapping__DefaultActionMapping_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultActionMapping_C, 0x02A8);
		}

		// class ABP_ControlPoint_C : public AControlPoint
		TEST_METHOD(BlueprintGeneratedClass__BP_ControlPoint__BP_ControlPoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ControlPoint_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ControlPoint_C, Billboard, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ControlPoint_C, Widget, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ControlPoint_C, 0x02A8);
		}

		// class ABP_Sky_Sphere_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Sky_Sphere__BP_Sky_Sphere_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, SkySphereMesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Base, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Sky_material, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Refresh_material, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, UnknownData_FFBT, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Directional_light_actor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Colors_determined_by_sun_position, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, UnknownData_QBPF, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Sun_height, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Sun_brightness, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Horizon_falloff, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Zenith_Color, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Horizon_color, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_color, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Overall_Color, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_speed, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_opacity, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Stars_brightness, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, UnknownData_PS6A, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Horizon_color_curve, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Zenith_color_curve, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sky_Sphere_C, Cloud_color_curve, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sky_Sphere_C, 0x02C0);
		}

		// class ABP_Item_Sniper_VSS_C : public AItem_Weapon_Sniper
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Sniper_VSS__BP_Item_Sniper_VSS_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Sniper_VSS_C, UberGraphFrame, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Sniper_VSS_C, Detail_03, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Sniper_VSS_C, Detail_02, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Sniper_VSS_C, Detail_01, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Sniper_VSS_C, 0x0400);
		}

		// class ABP_Item_Sniper_SVU_C : public AItem_Weapon_Sniper
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Sniper_SVU__BP_Item_Sniper_SVU_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Sniper_SVU_C, 0x03E0);
		}

		// class ABP_Item_Rifle_Groza_C : public AItem_Weapon_Rifle
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Rifle_Groza__BP_Item_Rifle_Groza_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Rifle_Groza_C, 0x03E0);
		}

		// class UCameraShake_Damage_C : public UMatineeCameraShake
		TEST_METHOD(BlueprintGeneratedClass__CameraShake_Damage__CameraShake_Damage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake_Damage_C, 0x0180);
		}

		// class UBP_PG_GameInstance_C : public UPG_GameInstance
		TEST_METHOD(BlueprintGeneratedClass__BP_PG_GameInstance__BP_PG_GameInstance_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_GameInstance_C, UberGraphFrame, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PG_GameInstance_C, 0x01B8);
		}

		// class UUI_Minimap_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Minimap__UI_Minimap_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, Border_Background_Blue, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, Border_Background_Red, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, HorizontalBox_AlphaMarker, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, HorizontalBox_BravoMarker, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, HorizontalBox_CharlieMarker, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, HorizontalBox_ControlPoints, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, HorizontalBox_DeltaMarker, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, HorizontalBox_EchoMarker, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, HorizontalBox_FoxtrotMarker, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, Lines, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, LinesRainbow, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, ProgressBar_CaptureProcessBlueTeam, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, ProgressBar_CaptureProcessRedTeam, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, SizeBox_Map, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, TextBlock_CapturePointsBlueTeam, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, TextBlock_CapturePointsRedTeam, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, TextBlock_GameTimer, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, UI_ControlPointMarker_A, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, UI_ControlPointMarker_B, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, UI_ControlPointMarker_C, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, UI_ControlPointMarker_D, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, UI_ControlPointMarker_E, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, UI_ControlPointMarker_F, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, UI_Map, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, GameState, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, PlayerController, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Minimap_C, PlayerState, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Minimap_C, 0x0340);
		}

		// class ABP_PG_PlayerController_Game_C : public APG_PlayerController_Game
		TEST_METHOD(BlueprintGeneratedClass__BP_PG_PlayerController_Game__BP_PG_PlayerController_Game_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_PlayerController_Game_C, UberGraphFrame, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_PlayerController_Game_C, UI_GeneralGameScreen, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_PlayerController_Game_C, UI_InteractionTime, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_PlayerController_Game_C, UI_DarkenScreen, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_PlayerController_Game_C, UI_CaptureProcess, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PG_PlayerController_Game_C, 0x05C8);
		}

		// class UUI_Map_OtherIcon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Map_OtherIcon__UI_Map_OtherIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_OtherIcon_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_OtherIcon_C, Icon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_OtherIcon_C, MainOverlay, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_OtherIcon_C, Owner, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_OtherIcon_C, MapSize, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Map_OtherIcon_C, 0x0284);
		}

		// class UUI_Map_TeamBaseMarker_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Map_TeamBaseMarker__UI_Map_TeamBaseMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_TeamBaseMarker_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_TeamBaseMarker_C, TeamBaseReference, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_TeamBaseMarker_C, MapSize, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Map_TeamBaseMarker_C, 0x0274);
		}

		// class UUI_EscapeMenu_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_EscapeMenu__UI_EscapeMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EscapeMenu_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EscapeMenu_C, LinesBackground, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EscapeMenu_C, UI_Button_Options, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EscapeMenu_C, UI_Button_Quit, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EscapeMenu_C, UI_Button_Resume, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EscapeMenu_C, UI_Button_TeamSetup, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EscapeMenu_C, UI_Options, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EscapeMenu_C, VerticalBox_Buttons, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_EscapeMenu_C, WidgetSwitcher_Main, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_EscapeMenu_C, 0x02A8);
		}

		// class UIpConnection : public UNetConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_NEK7, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, SocketErrorDisconnectDelay, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_PXDP, 0x1B44);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x1B90);
		}

		// class UIpNetDriver : public UNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_HSXX, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_IMIH, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_PDDU, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxSecondsInReceive, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, NbPacketsBetweenReceiveTimeTest, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ResolutionConnectionTimeout, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_DQYU, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x07B8);
		}

		// class UAchievementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0028);
		}

		// class UAchievementQueryCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_NYD4, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0068);
		}

		// class UAchievementWriteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_SXAD, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0080);
		}

		// class UConnectionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_TV3K, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0078);
		}

		// class UCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_V2NI, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x0098);
		}

		// class UDestroySessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_UBD0, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x0078);
		}

		// class UEndMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_J501, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0080);
		}

		// class UEndTurnCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_VNN6, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0078);
		}

		// class UFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_PZU1, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x0090);
		}

		// class UFindTurnBasedMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_UI7U, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0088);
		}

		// class UInAppPurchaseCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_RTEX, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x0080);
		}

		// class UInAppPurchaseCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, UnknownData_M8LR, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy2, 0x00A8);
		}

		// class UInAppPurchaseQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_JDR4, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseQueryCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, UnknownData_B556, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy2, 0x0068);
		}

		// class UInAppPurchaseRestoreCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_HWYM, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseRestoreCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, UnknownData_ETIZ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy2, 0x00A8);
		}

		// class UJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_YRUQ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0180);
		}

		// class ULeaderboardBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0028);
		}

		// class ULeaderboardFlushCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_BZQD, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0068);
		}

		// class ULeaderboardQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, onSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, onFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_GX73, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x0098);
		}

		// class ULogoutCallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_DVOT, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0068);
		}

		// class AOnlineBeacon : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_61GT, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionInitialTimeout, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionTimeout, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_LPSE, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0250);
		}

		// class AOnlineBeaconClient : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconConnection, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, ConnectionState, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, UnknownData_4PMN, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x02B0);
		}

		// class AOnlineBeaconHost : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_I4XQ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_RUWB, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0308);
		}

		// class AOnlineBeaconHostObject : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientBeaconActorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientActors, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0248);
		}

		// class UOnlineEngineInterfaceImpl : public UOnlineEngineInterface
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_KDTA, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0128);
		}

		// class UOnlinePIESettings : public UDeveloperSettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_8NJ2, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0050);
		}

		// class UOnlineSessionClient : public UOnlineSession
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_HF9U, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_YZ27, 0x01DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x01E0);
		}

		// class APartyBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_D3LS, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, RequestType, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bPendingReservationSent, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bCancelReservation, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_X38U, 0x0343);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x0370);
		}

		// class APartyBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_ABTR, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_UX9R, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_T9MN, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x02C0);
		}

		// class UPartyBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bRestrictCrossConsole, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bEnableRemovalRequests, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_HYZJ, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_9POW, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0078);
		}

		// class UQuitMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_7HWY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0078);
		}

		// class UShowLoginUICallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, onFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_UJ6D, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0060);
		}

		// class ASpectatorBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_QTDK, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, RequestType, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bPendingReservationSent, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bCancelReservation, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_B2Q3, 0x036B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconClient, 0x0398);
		}

		// class ASpectatorBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_X92Z, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_O41P, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_K7CN, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconHost, 0x02C0);
		}

		// class USpectatorBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, bRestrictCrossConsole, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_JN5B, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, Reservations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_V90S, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorBeaconState, 0x0060);
		}

		// class ATestBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x02B0);
		}

		// class ATestBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0248);
		}

		// class UTurnBasedBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0028);
		}

		// class UVoipListenerSynthComponent : public USynthComponent
		TEST_METHOD(Class__OnlineSubsystemUtils__VoipListenerSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoipListenerSynthComponent, UnknownData_DC34, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoipListenerSynthComponent, 0x0720);
		}

		// class UUI_Solder_Customization_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Solder_Customization__UI_Solder_Customization_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_C, ScrollBox_PrimaryWeapons, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_C, ScrollBox_SecondaryWeapons, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_C, UI_Solder_Customization_ItemInfo, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_C, UI_Solder_CustomizationSlot_WeaponSetup, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_C, UI_SolderCustomizationSlot_PrimaryWeapon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_C, UI_SolderCustomizationSlot_SecondaryWeapon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_C, VerticalBox_Equipped, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_C, WidgetSwitcher, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_C, WidgetSwitcher_Inventory, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_C, PlayerState, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Solder_Customization_C, 0x02B8);
		}

		// class AArchVisCharacter : public ACharacter
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAxisName, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAtRateAxisName, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAxisName, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAtRateAxisName, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveForwardAxisName, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveRightAxisName, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Pitch, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Yaw, 0x051C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AArchVisCharacter, 0x0520);
		}

		// class UArchVisCharMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalAcceleration, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalDeceleration, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxRotationalVelocity, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MinPitch, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxPitch, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingFriction, 0x0B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingSpeed, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingAcceleration, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, UnknownData_NMNP, 0x0B38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchVisCharMovementComponent, 0x0B50);
		}

		// class UUI_CaptureProcess_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_CaptureProcess__UI_CaptureProcess_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CaptureProcess_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CaptureProcess_C, Border_Process, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CaptureProcess_C, Image_Lines, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CaptureProcess_C, ProgressBar_Process, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CaptureProcess_C, UI_ControlPointMarker, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CaptureProcess_C, ControlPointReference, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_CaptureProcess_C, 0x0290);
		}

		// class UInputCoreTypes : public UObject
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0028);
		}

		// class AControlPointMeshActor : public AActor
		TEST_METHOD(Class__Landscape__ControlPointMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPointMeshActor, ControlPointMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AControlPointMeshActor, 0x0228);
		}

		// class UControlPointMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, UnknownData_F45B, 0x04D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x04E0);
		}

		// class ALandscapeProxy : public AActor
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_96MR, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentScreenSizeToUseSubSections, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0ScreenSize, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0DistributionSetting, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistributionSetting, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSize, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UseTessellationComponentScreenSizeFalloff, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_7FLM, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSizeFalloff, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, OccluderGeometryLOD, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_KYQC, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_LUJ7, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterialsOverride, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bMeshHoles, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MeshHolesMaxLod, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_HWI7, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, RuntimeVirtualTextures, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureNumLods, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureLodBias, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureRenderPassType, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_MZ2E, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NegativeZBoundsExtension, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, PositiveZBoundsExtension, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_82IK, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, FoliageComponents, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_DSDL, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLandscapeGrass, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_FH41, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_WK1L, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_2RU0, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_NZDZ, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_XEFW, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightingChannels, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_QZ6J, 0x039E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_DITF, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilWriteMask, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_6BI2, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilValue, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LDMaxDrawDistance, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SimpleCollisionMipLevel, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_VE6E, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_0SK7, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_47F4, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseDynamicMaterialInstance, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NavigationGeometryGatheringMode, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x0546);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLayersContent, 0x0547);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, WeightmapUsageMap, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0598);
		}

		// class ALandscape : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0598);
		}

		// class ALandscapeBlueprintBrushBase : public AActor
		TEST_METHOD(Class__Landscape__LandscapeBlueprintBrushBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeBlueprintBrushBase, 0x0220);
		}

		// class ULandscapeLODStreamingProxy : public UStreamableRenderAsset
		TEST_METHOD(Class__Landscape__LandscapeLODStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLODStreamingProxy, UnknownData_DKP8, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLODStreamingProxy, 0x0068);
		}

		// class ULandscapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseX, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_IMT6, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterials, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstancesDynamic, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODIndexToMaterialIndex, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialIndexToDisabledTessellationMaterial, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_ZZUA, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODStreamingProxy, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_I0A8, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_65AY, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterfaces, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightmapTextures, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_4NN0, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x0660);
		}

		// class ALandscapeGizmoActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0220);
		}

		// class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_MB3W, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x0270);
		}

		// class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x0440);
		}

		// class ULandscapeGrassType : public UObject
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_HFXU, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_QB1A, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0060);
		}

		// class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_GU4D, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_3LOS, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_QQHZ, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x0520);
		}

		// class ULandscapeInfo : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_ZHHE, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_54ML, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0210);
		}

		// class ULandscapeInfoMap : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_6L7V, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0080);
		}

		// class ULandscapeLayerInfoObject : public UObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_OWOT, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0050);
		}

		// class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, TextureStreamingInfo, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_5DUJ, 0x0379);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x0380);
		}

		// class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_6ML9, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x0540);
		}

		// class ALandscapeMeshProxyActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeMeshProxyActor, 0x0228);
		}

		// class ULandscapeMeshProxyComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_MIR5, 0x04F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x0500);
		}

		// class ULandscapeSettings : public UDeveloperSettings
		TEST_METHOD(Class__Landscape__LandscapeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, MaxNumberOfLayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, UnknownData_JXC1, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSettings, 0x0040);
		}

		// class ULandscapeSplinesComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x0470);
		}

		// class ULandscapeSplineControlPoint : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LayerWidthRatio, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideFalloffFactor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideFalloffFactor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideLayerFalloffFactor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideLayerFalloffFactor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_KN1H, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x00A8);
		}

		// class ULandscapeSplineSegment : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_0SBU, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B0);
		}

		// class ALandscapeStreamingProxy : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, LandscapeActor, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, UnknownData_20RY, 0x05B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeStreamingProxy, 0x05B8);
		}

		// class ULandscapeSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Landscape__LandscapeSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSubsystem, UnknownData_76S0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSubsystem, 0x0048);
		}

		// class ULandscapeWeightmapUsage : public UObject
		TEST_METHOD(Class__Landscape__LandscapeWeightmapUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, ChannelUsage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, LayerGuid, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeWeightmapUsage, 0x0058);
		}

		// class UMaterialExpressionLandscapeGrassOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_7A2Y, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_J4AU, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0058);
		}

		// class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_EB12, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_CHV1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_7II3, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_5CIG, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_7W78, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x0088);
		}

		// class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_L2L9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_0UFD, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x0090);
		}

		// class UMaterialExpressionLandscapePhysicalMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapePhysicalMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapePhysicalMaterialOutput, Inputs, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapePhysicalMaterialOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0050);
		}

		// class UBP_HUDFunctionLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BP_HUDFunctionLibrary__BP_HUDFunctionLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HUDFunctionLibrary_C, 0x0028);
		}

		// class UUI_Options_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Options__UI_Options_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, ComboBoxString_Language, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_5, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_6, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_7, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_8, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_9, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_10, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_11, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_12, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_13, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_14, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_15, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_16, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_17, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_18, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_19, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_20, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_21, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultActionMapping_22, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultAxisMapping, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultAxisMapping_2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultAxisMapping_3, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultAxisMapping_4, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultCheckBoxSetting_VolumetricFog, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultComboBoxSetting_Resolution, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, DefaultComboBoxSetting_ScreenMode, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, Image_182, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, TextBlock_EffectsVolume, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, TextBlock_FOV, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, TextBlock_MasterVolume, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, TextBlock_MouseSensitivity, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, TextBlock_MusicVolume, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, TextBlock_ResolutionScale, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Button_Apply, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Button_Audio, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Button_Back, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Button_Controls, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Button_Custom, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Button_High, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Button_Low, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Button_Medium, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Button_Reset, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Button_Ultra, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Button_Video, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_AntialiasingQuality, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_EffectsQuality, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_EffectsVolume, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_FOV, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_2, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_3, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_4, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_5, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_6, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_7, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_8, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_9, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_10, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_11, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_12, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_13, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_14, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_15, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_16, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_17, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_18, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_19, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_20, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_21, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_22, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_23, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_24, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_25, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_InputRow_26, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_MasterVolume, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_MusicVolume, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_PostProcessQuality, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_ResolutionScale, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_ShadersQuality, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_ShadowQuality, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_Slider_MouseSensitivity, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_TerrainQuality, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_TextureQuality, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_VerticalSync, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UI_Options_ViewDistance, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, WidgetSwitcher_Main, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, GeneralGraphicsQuality, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, UnknownData_AU7K, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, PlayerController, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_C, ClickBackDelegate, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Options_C, 0x0558);
		}

		// class UEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__EyeTracker__EyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeTrackerFunctionLibrary, 0x0028);
		}

		// class UJsonUtilitiesDummyObject : public UObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0028);
		}

		// class UUI_ExitGame_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ExitGame__UI_ExitGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ExitGame_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ExitGame_C, Button_No, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ExitGame_C, Button_Yes, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ExitGame_C, 0x0278);
		}

		// class UUI_LoginScreen_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_LoginScreen__UI_LoginScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LoginScreen_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LoginScreen_C, PlayerController, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_LoginScreen_C, PlayerState, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_LoginScreen_C, 0x0278);
		}

		// class UUI_GameLoading_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_GameLoading__UI_GameLoading_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameLoading_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameLoading_C, Image_183, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameLoading_C, Lines_Map, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameLoading_C, LinesRainbow_Map, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_GameLoading_C, 0x0280);
		}

		// class UUI_Button_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Button__UI_Button_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, Hovered, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, Border, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, Button, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, TextBlock_Name, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, Name, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, OnClick, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, FontSize, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, IsSelected, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, DisplayBorder, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, AlwaysDisplayBackground, 0x02B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, UnknownData_VDRI, 0x02B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, GeneralColorID, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, SelectColorID, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, DisableColorID, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, HoveredColorID, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, SelectColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, DisableColor, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_C, TextPadding, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Button_C, 0x0308);
		}

		// class UBP_FunctionLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BP_FunctionLibrary__BP_FunctionLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FunctionLibrary_C, 0x0028);
		}

		// class UUI_PremiumItem_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_PremiumItem__UI_PremiumItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, Border, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, Button, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, Image_155, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, Image_Icon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, MultiLineEditableText_ItemName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, TextBlock_Count, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, TextBlock_ItemPrice, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, ItemIcon, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, DisplayName, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, DisplayCount, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, DisplayPrice, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, ItemId, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, Catalog, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumItem_C, Price, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_PremiumItem_C, 0x0314);
		}

		// class UUI_ConfirmPurchases_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ConfirmPurchases__UI_ConfirmPurchases_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmPurchases_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmPurchases_C, Button_No, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmPurchases_C, Button_Yes, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmPurchases_C, TextBlock_ItemName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmPurchases_C, DisplayName, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmPurchases_C, Catalog, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmPurchases_C, ItemId, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ConfirmPurchases_C, Price, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ConfirmPurchases_C, 0x02BC);
		}

		// class UUI_Premium_CrownsItem_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Premium_CrownsItem__UI_Premium_CrownsItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, Border, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, Border_Sale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, Button, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, Image_Icon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, Overlay_OldPrice, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, TextBlock_Count, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, TextBlock_ItemName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, TextBlock_ItemPrice, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, TextBlock_ItemPrice_OldPrice, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, ItemIcon, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, DisplayName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, DisplayCount, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, DisplayPrice, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, ItemId, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, Catalog, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, Quantity, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, Price, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, OrdersID, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, IsSale, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, UnknownData_Y7FB, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, OldPrice, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_CrownsItem_C, CustomTransform, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Premium_CrownsItem_C, 0x036C);
		}

		// class ABP_SupportBox_Ammo_C : public ASupportBox_Ammo
		TEST_METHOD(BlueprintGeneratedClass__BP_SupportBox_Ammo__BP_SupportBox_Ammo_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SupportBox_Ammo_C, 0x0248);
		}

		// class ABP_SupportBox_Health_C : public ASupportBox_Health
		TEST_METHOD(BlueprintGeneratedClass__BP_SupportBox_Health__BP_SupportBox_Health_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SupportBox_Health_C, 0x0248);
		}

		// class ABP_PG_Character_Red_C : public ABP_PG_Character_General_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PG_Character_Red__BP_PG_Character_Red_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_Red_C, UberGraphFrame, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PG_Character_Red_C, 0x0638);
		}

		// class UWheeledVehicleMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_A0GR, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_DHOD, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_NI7P, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Mass, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_33ZY, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WheelSetups, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragCoefficient, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisWidth, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisHeight, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragArea, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, EstimatedMaxEngineSpeed, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxEngineRPM, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DebugDragMagnitude, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, InertiaTensorScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoad, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoadFiltered, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoad, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoadFiltered, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThresholdLongitudinalSpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, LowForwardSpeedSubStepCount, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HighForwardSpeedSubStepCount, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_8I38, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Wheels, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_JKLM, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceRadius, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceConsiderationRadius, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOSteeringStep, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOThrottleStep, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceUID, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceGroup, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToAvoid, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToIgnore, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceWeight, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, PendingLaunchVelocity, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ReplicatedState, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_5GKL, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawSteeringInput, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawThrottleInput, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawBrakeInput, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInput, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInput, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInput, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInput, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, IdleBrakeInput, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, StopThreshold, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WrongDirectionThreshold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInputRate, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInputRate, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInputRate, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInputRate, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_CK4L, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, OverrideController, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent, 0x0290);
		}

		// class USimpleWheeledVehicleMovementComponent : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__SimpleWheeledVehicleMovementComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleWheeledVehicleMovementComponent, 0x0290);
		}

		// class UTireConfig : public UDataAsset
		TEST_METHOD(Class__PhysXVehicles__TireConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_DEHW, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, TireFrictionScales, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_CRT5, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireConfig, 0x0050);
		}

		// class UVehicleAnimInstance : public UAnimInstance
		TEST_METHOD(Class__PhysXVehicles__VehicleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_JT4E, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_OXYD, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, WheeledVehicleMovementComponent, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_3I0O, 0x0A48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleAnimInstance, 0x0A50);
		}

		// class UVehicleWheel : public UObject
		TEST_METHOD(Class__PhysXVehicles__VehicleWheel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, CollisionMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bDontCreateShape, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAutoAdjustCollisionSize, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_ILPB, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeWidth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Mass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DampingRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SteerAngle, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAffectedByHandbrake, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_BF1Q, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireConfig, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffMaxLoad, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffValue, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LongStiffValue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionForceOffset, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxRaise, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxDrop, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionNaturalFrequency, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionDampingRatio, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SweepType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_J9FZ, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxBrakeTorque, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxHandBrakeTorque, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_ZJZH, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, VehicleSim, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, WheelIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongSlip, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatSlip, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugNormalizedTireLoad, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_WAY4, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugWheelTorque, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongForce, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatForce, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Location, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, OldLocation, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Velocity, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_FL4K, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleWheel, 0x00F0);
		}

		// class AWheeledVehicle : public APawn
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, VehicleMovement, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle, 0x0290);
		}

		// class UWheeledVehicleMovementComponent4W : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent4W)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, EngineSetup, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, DifferentialSetup, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, AckermannAccuracy, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, TransmissionSetup, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, SteeringCurve, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent4W, 0x0408);
		}

		// class UOverlays : public UObject
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0028);
		}

		// class UBasicOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0038);
		}

		// class ULocalizedOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0080);
		}

		// class UClothConfigNv : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothConfigNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ClothingWindMethod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_8IFA, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraint, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraint, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraint, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraint, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionRadius, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionStiffness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionCullScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Damping, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Friction, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindDragCoefficient, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindLiftCoefficient, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearDrag, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularDrag, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearInertiaScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularInertiaScale, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CentrifugalInertiaScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SolverFrequency, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, StiffnessFrequency, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityScale, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityOverride, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, bUseGravityOverride, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_H83D, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherStiffness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherLimit, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CollisionThickness, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveSpringStiffness, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveDamperStiffness, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindMethod, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_3H6K, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraintConfig, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraintConfig, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraintConfig, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraintConfig, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigNv, 0x0140);
		}

		// class UClothingSimulationFactoryNv : public UClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationFactoryNv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0028);
		}

		// class UClothingSimulationInteractorNv : public UClothingSimulationInteractor
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationInteractorNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractorNv, UnknownData_SMSR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractorNv, 0x0040);
		}

		// class UClothPhysicalMeshDataNv_Legacy : public UClothPhysicalMeshDataBase_Legacy
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothPhysicalMeshDataNv_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, MaxDistances, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopDistances, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopRadiuses, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, AnimDriveMultipliers, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataNv_Legacy, 0x0120);
		}

		// class UDatasmithObjectTemplate : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithObjectTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithObjectTemplate, UnknownData_PDVN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithObjectTemplate, 0x0030);
		}

		// class UDatasmithActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Layers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Tags, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithActorTemplate, 0x00D0);
		}

		// class UDatasmithAdditionalData : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithAdditionalData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAdditionalData, 0x0028);
		}

		// class ADatasmithAreaLightActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightShape, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_8GWZ, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Dimensions, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Intensity, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IntensityUnits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_DJND, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Color, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Temperature, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESTexture, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, bUseIESBrightness, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_VVXE, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESBrightnessScale, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Rotation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceRadius, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceLength, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, AttenuationRadius, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightInnerAngle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightOuterAngle, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithAreaLightActor, 0x0278);
		}

		// class UDatasmithAreaLightActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightShape, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_UB29, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Dimensions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Color, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Intensity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IntensityUnits, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_26IU, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Temperature, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, bUseIESBrightness, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_WPHM, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESBrightnessScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Rotation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceRadius, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceLength, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, AttenuationRadius, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAreaLightActorTemplate, 0x00A0);
		}

		// class UDatasmithAssetImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetImportData, 0x0028);
		}

		// class UDatasmithStaticMeshImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshImportData, 0x0028);
		}

		// class UDatasmithStaticMeshCADImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshCADImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshCADImportData, 0x0028);
		}

		// class UDatasmithSceneImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneImportData, 0x0028);
		}

		// class UDatasmithTranslatedSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithTranslatedSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithTranslatedSceneImportData, 0x0028);
		}

		// class UDatasmithCADImportSceneData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithCADImportSceneData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCADImportSceneData, 0x0028);
		}

		// class UDatasmithMDLSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithMDLSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMDLSceneImportData, 0x0028);
		}

		// class UDatasmithGLTFSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithGLTFSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Version, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, UnknownData_ROKZ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Author, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, License, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Source, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithGLTFSceneImportData, 0x0070);
		}

		// class UDatasmithStaticMeshGLTFImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshGLTFImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshGLTFImportData, SourceMeshName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshGLTFImportData, 0x0038);
		}

		// class UDatasmithFBXSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithFBXSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bGenerateLightmapUVs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_NDSX, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, TexturesDir, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, IntermediateSerialization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bColorizeMaterials, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_EVUF, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithFBXSceneImportData, 0x0048);
		}

		// class UDatasmithDeltaGenAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenAssetImportData, 0x0028);
		}

		// class UDatasmithDeltaGenSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bRemoveInvisibleNodes, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bSimplifyNodeHierarchy, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportVar, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_A9ZB, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, VarPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportPos, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_H4Y0, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, PosPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportTml, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_LNGD, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, TmlPath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenSceneImportData, 0x0090);
		}

		// class UDatasmithVREDAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDAssetImportData, 0x0028);
		}

		// class UDatasmithVREDSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportMats, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_8RCJ, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, MatsPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportVar, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bCleanVar, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_HU0Y, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, VarPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportLightInfo, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_DAIO, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, LightInfoPath, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportClipInfo, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_DG1M, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, ClipInfoPath, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDSceneImportData, 0x00A8);
		}

		// class UDatasmithIFCSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithIFCSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithIFCSceneImportData, 0x0028);
		}

		// class UDatasmithStaticMeshIFCImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshIFCImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshIFCImportData, SourceGlobalId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshIFCImportData, 0x0038);
		}

		// class UDatasmithAssetUserData : public UAssetUserData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAssetUserData, MetaData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetUserData, 0x0078);
		}

		// class UDatasmithCineCameraActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraActorTemplate, LookatTrackingSettings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraActorTemplate, 0x0060);
		}

		// class UDatasmithCineCameraComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FilmbackSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, LensSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FocusSettings, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentFocalLength, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentAperture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, UnknownData_G4UB, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, PostProcessSettings, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraComponentTemplate, 0x0090);
		}

		// class UDatasmithContentBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DatasmithContent__DatasmithContentBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithContentBlueprintLibrary, 0x0028);
		}

		// class UDatasmithCustomActionBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithCustomActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCustomActionBase, UnknownData_IS2Y, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCustomActionBase, 0x0030);
		}

		// class UDatasmithDecalComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithDecalComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, SortOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, DecalSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, Material, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDecalComponentTemplate, 0x0048);
		}

		// class ADatasmithImportedSequencesActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithImportedSequencesActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithImportedSequencesActor, ImportedSequences, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithImportedSequencesActor, 0x0230);
		}

		// class UDatasmithOptionsBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithOptionsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithOptionsBase, 0x0028);
		}

		// class UDatasmithCommonTessellationOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithCommonTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCommonTessellationOptions, Options, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCommonTessellationOptions, 0x0038);
		}

		// class UDatasmithImportOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, SearchPackagePolicy, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialConflictPolicy, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TextureConflictPolicy, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, StaticMeshActorImportPolicy, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, LightImportPolicy, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, CameraImportPolicy, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, OtherActorImportPolicy, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialQuality, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_0JIJ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, BaseOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, ReimportOptions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_9CBO, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, Filename, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, FilePath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_YOVD, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithImportOptions, 0x0078);
		}

		// class UDatasmithLandscapeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLandscapeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, LandscapeMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, StaticLightingLOD, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, UnknownData_VQOD, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLandscapeTemplate, 0x0040);
		}

		// class UDatasmithLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_NTE7, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_9HZ5, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Intensity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Temperature, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESBrightnessScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_VVI1, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightFunctionMaterial, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESTexture, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLightComponentTemplate, 0x0068);
		}

		// class UDatasmithMaterialInstanceTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithMaterialInstanceTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ParentMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ScalarParameterValues, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, VectorParameterValues, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, TextureParameterValues, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, StaticParameters, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMaterialInstanceTemplate, 0x0198);
		}

		// class UDatasmithPointLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPointLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, IntensityUnits, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, UnknownData_2Y97, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceLength, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, AttenuationRadius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPointLightComponentTemplate, 0x0040);
		}

		// class UDatasmithPostProcessVolumeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPostProcessVolumeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, UnknownData_3IV7, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPostProcessVolumeTemplate, 0x0080);
		}

		// class UDatasmithScene : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithScene, UnknownData_CFF1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithScene, 0x0030);
		}

		// class ADatasmithSceneActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, Scene, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, RelatedActors, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithSceneActor, 0x0278);
		}

		// class UDatasmithSceneComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, RelativeTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Mobility, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_SPZH, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, AttachParent, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, bVisible, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_NEVO, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Tags, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_P7TQ, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneComponentTemplate, 0x00F0);
		}

		// class UDatasmithSkyLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSkyLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, UnknownData_SWCN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, CubemapResolution, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, Cubemap, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSkyLightComponentTemplate, 0x0040);
		}

		// class UDatasmithSpotLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSpotLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, InnerConeAngle, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, OuterConeAngle, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSpotLightComponentTemplate, 0x0038);
		}

		// class UDatasmithStaticMeshComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, StaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, OverrideMaterials, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshComponentTemplate, 0x0048);
		}

		// class UDatasmithStaticMeshTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, SectionInfoMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapCoordinateIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapResolution, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, BuildSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, StaticMaterials, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshTemplate, 0x00A8);
		}

		// class ULevelVariantSets : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, DirectorClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, VariantSets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, UnknownData_HS4T, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSets, 0x0090);
		}

		// class ALevelVariantSetsActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelVariantSetsActor, LevelVariantSets, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelVariantSetsActor, 0x0238);
		}

		// class ULevelVariantSetsFunctionDirector : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsFunctionDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSetsFunctionDirector, UnknownData_XLD4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSetsFunctionDirector, 0x0040);
		}

		// class UPropertyValue : public UObject
		TEST_METHOD(Class__VariantManagerContent__PropertyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_MD9K, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertyIndices, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, CapturedPropSegments, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, FullDisplayString, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterParameterDefaults, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, bHasRecordedData, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_JJJH, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, LeafPropertyClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_NNUI, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, ValueBytes, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropCategory, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_03S0, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValue, 0x01B8);
		}

		// class UPropertyValueTransform : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueTransform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueTransform, 0x01B8);
		}

		// class UPropertyValueVisibility : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueVisibility)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueVisibility, 0x01B8);
		}

		// class UPropertyValueColor : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueColor, 0x01B8);
		}

		// class UPropertyValueMaterial : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueMaterial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueMaterial, 0x01B8);
		}

		// class UPropertyValueOption : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueOption)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueOption, 0x01B8);
		}

		// class UPropertyValueSoftObject : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueSoftObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueSoftObject, 0x01B8);
		}

		// class ASwitchActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__SwitchActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_F7WJ, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, SceneComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, LastSelectedOption, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_PVIS, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASwitchActor, 0x0248);
		}

		// class UVariant : public UObject
		TEST_METHOD(Class__VariantManagerContent__Variant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, Dependencies, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, DisplayText, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, UnknownData_1GTI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, ObjectBindings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, Thumbnail, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariant, 0x0080);
		}

		// class UVariantObjectBinding : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantObjectBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CachedActorLabel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, ObjectPtr, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, LazyObjectPtr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, UnknownData_OWM6, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CapturedProperties, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, FunctionCallers, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantObjectBinding, 0x0090);
		}

		// class UVariantSet : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_P4S3, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, bExpanded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_CB3N, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Variants, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Thumbnail, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantSet, 0x0078);
		}

		// class UIpConnectionUWorks : public UIpConnection
		TEST_METHOD(Class__OnlineSubsystemUWorks__IpConnectionUWorks)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnectionUWorks, 0x1B90);
		}

		// class UIpNetDriverUWorks : public UIpNetDriver
		TEST_METHOD(Class__OnlineSubsystemUWorks__IpNetDriverUWorks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriverUWorks, UnknownData_ZZWK, 0x07B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriverUWorks, 0x07F0);
		}

		// class ULightPropagationVolumeBlendable : public UObject
		TEST_METHOD(Class__LightPropagationVolumeRuntime__LightPropagationVolumeBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_WKLQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, BlendWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_MW6F, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightPropagationVolumeBlendable, 0x0078);
		}

		// class UNiagaraDataInterfaceChaosDestruction : public UNiagaraDataInterface
		TEST_METHOD(Class__ChaosNiagara__NiagaraDataInterfaceChaosDestruction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosSolverActorSet, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSourceType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_GS89, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataProcessFrequency, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxNumberOfDataEntriesToSpawn, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpawn, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_5ZW2, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnMultiplierMinMax, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnChance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ImpulseToSpawnMinMax, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpeedToSpawnMinMax, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MassToSpawnMinMax, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMinToSpawnMinMax, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMaxToSpawnMinMax, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VolumeToSpawnMinMax, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTimeToSpawnMinMax, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SurfaceTypeToSpawn, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationFilteringMode, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawn, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_TM17, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawnMinMax, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawn, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_DA0Q, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawnMinMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawn, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_GX46, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawnMinMax, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSortingType, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalCollisionData, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpatialHash, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_DM2J, 0x0107);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMax, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeCellSize, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxDataPerCell, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bApplyMaterialsFilter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_12R5, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosBreakingMaterialSet, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalBreakingData, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalTrailingData, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_WGCD, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomPositionMagnitudeMinMax, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, InheritedVelocityMultiplier, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityGenerationType, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_AJKB, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityMagnitudeMinMax, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpreadAngleMax, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMin, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMax, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, FinalVelocityMagnitudeMinMax, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxLatency, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DebugType, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_F4SN, 0x01CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnedPointID, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnTime, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_S5R6, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTime, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, TimeStampOfLastProcessedData, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_695K, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceChaosDestruction, 0x0238);
		}

		// class UNiagaraDataInterfaceFieldSystem : public UNiagaraDataInterface
		TEST_METHOD(Class__ChaosNiagara__NiagaraDataInterfaceFieldSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, BlueprintSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, SourceActor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, FieldDimensions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, MinBounds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, MaxBounds, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, UnknownData_SSTO, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceFieldSystem, 0x0090);
		}

		// class UImgMediaSettings : public UObject
		TEST_METHOD(Class__ImgMediaFactory__ImgMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultFrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheBehindPercentage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheSizeGB, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreads, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreadStackSizeKB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, GlobalCacheSizeGB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseGlobalCache, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_9136, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, ExrDecoderThreads, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_MSHI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseDefaultProxy, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_9VBV, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSettings, 0x0068);
		}

		// class ABP_Item_Optic_StandartSight_C : public AItem_Module_Optic
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Optic_StandartSight__BP_Item_Optic_StandartSight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Optic_StandartSight_C, 0x0298);
		}

		// class ABP_Item_Barrel_StandartBarrel_C : public AItem_Module_General
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Barrel_StandartBarrel__BP_Item_Barrel_StandartBarrel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Barrel_StandartBarrel_C, DefaultSceneRoot, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Barrel_StandartBarrel_C, 0x0288);
		}

		// class ABP_Item_Accessory_StandartAccessory_C : public AItem_Module_General
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Accessory_StandartAccessory__BP_Item_Accessory_StandartAccessory_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Accessory_StandartAccessory_C, DefaultSceneRoot, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Accessory_StandartAccessory_C, 0x0288);
		}

		// class ABP_Item_Skin_M14_06_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_M14_06__BP_Item_Skin_M14_06_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_M14_06_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_M14_06_C, 0x0290);
		}

		// class ABP_Item_Skin_G36C_04_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_G36C_04__BP_Item_Skin_G36C_04_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_G36C_04_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_G36C_04_C, 0x0290);
		}

		// class ABP_Item_Skin_G36C_02_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_G36C_02__BP_Item_Skin_G36C_02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_G36C_02_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_G36C_02_C, 0x0290);
		}

		// class ABP_Item_Optic_PSO_01_C : public AItem_Module_Optic
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Optic_PSO_01__BP_Item_Optic_PSO_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Optic_PSO_01_C, 0x0298);
		}

		// class UUI_GamePointsWindow_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_GamePointsWindow__UI_GamePointsWindow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GamePointsWindow_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GamePointsWindow_C, GridPanel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GamePointsWindow_C, Overlay_AllGamePoints, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GamePointsWindow_C, TextBlock_AllGamePoints, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GamePointsWindow_C, AllGamePoint, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_GamePointsWindow_C, 0x0284);
		}

		// class UUI_GameMenu_Map_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_GameMenu_Map__UI_GameMenu_Map_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, Image_Map, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, Lines_Map, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, LinesRainbow_Map, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, MapOverlay, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, UI_ControlPointMarker_A, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, UI_ControlPointMarker_B, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, UI_ControlPointMarker_C, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, UI_ControlPointMarker_D, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, UI_ControlPointMarker_E, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, UI_ControlPointMarker_F, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, UI_SpawnSelect, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, UI_TeamBaseMarker_Blue, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, UI_TeamBaseMarker_Red, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, SelectedSpawnPoint, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, UnknownData_PXGO, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_C, MapInfo, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_GameMenu_Map_C, 0x0340);
		}

		// class UUI_GameScreen_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_GameScreen__UI_GameScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameScreen_C, UI_Compass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameScreen_C, UI_CountdownTimer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameScreen_C, UI_Crosshair, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameScreen_C, UI_Indicators, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameScreen_C, UI_Minimap, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameScreen_C, UI_Weapons, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_GameScreen_C, 0x0290);
		}

		// class UBP_PG_AnimBluerpint_Body_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BP_PG_AnimBluerpint_Body__BP_PG_AnimBluerpint_Body_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, UnknownData_D4LT, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_Root_3, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_18, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_17, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_16, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_15, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_BlendSpacePlayer_6, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LayeredBoneBlend_11, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequenceEvaluator_11, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_16, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LayeredBoneBlend_10, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequenceEvaluator_10, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequencePlayer_4, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_15, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateMachine_8, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_14, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_14, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_13, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_12, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_11, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_10, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequenceEvaluator_9, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequenceEvaluator_8, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LayeredBoneBlend_9, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_BlendSpacePlayer_5, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_13, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_BlendSpacePlayer_4, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LayeredBoneBlend_8, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequenceEvaluator_7, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_12, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LayeredBoneBlend_7, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequencePlayer_3, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequenceEvaluator_6, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_11, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateMachine_7, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_10, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateMachine_6, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_9, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateMachine_5, 0x1148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_Slot_3, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LocalToComponentSpace_13, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ComponentToLocalSpace_13, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ModifyBone_11, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SaveCachedPose_5, 0x1388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ModifyBone_10, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LocalToComponentSpace_12, 0x15E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ComponentToLocalSpace_12, 0x1608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ModifyBone_9, 0x1628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LocalToComponentSpace_11, 0x1730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ComponentToLocalSpace_11, 0x1750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_BlendListByBool_6, 0x1770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TwoBoneIK_6, 0x1810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TwoBoneIK_5, 0x19F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ComponentToLocalSpace_10, 0x1BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LocalToComponentSpace_10, 0x1BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SaveCachedPose_4, 0x1C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_UseCachedPose_11, 0x1D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_UseCachedPose_10, 0x1D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_UseCachedPose_9, 0x1DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_BlendListByBool_5, 0x1DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_UseCachedPose_8, 0x1E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LocalToComponentSpace_9, 0x1EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ComponentToLocalSpace_9, 0x1EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, UnknownData_U6SH, 0x1EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TwoBoneIK_4, 0x1EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TwoBoneIK_3, 0x20D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_HandIKRetargeting_3, 0x22B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LocalToComponentSpace_8, 0x23D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ComponentToLocalSpace_8, 0x23F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ModifyBone_8, 0x2410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ModifyBone_7, 0x2518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_Root_2, 0x2620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_9, 0x2650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_8, 0x2678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_7, 0x26A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_6, 0x26C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_BlendSpacePlayer_3, 0x26F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LayeredBoneBlend_6, 0x27D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequenceEvaluator_5, 0x2898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_8, 0x28E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LayeredBoneBlend_5, 0x2918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequenceEvaluator_4, 0x29D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequencePlayer_2, 0x2A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_7, 0x2AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateMachine_4, 0x2AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_6, 0x2B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_5, 0x2BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_4, 0x2BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_3, 0x2C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult_2, 0x2C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TransitionResult, 0x2C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LayeredBoneBlend_4, 0x2C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequenceEvaluator_3, 0x2D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_BlendSpacePlayer_2, 0x2D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_5, 0x2E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_BlendSpacePlayer, 0x2EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LayeredBoneBlend_3, 0x2F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequenceEvaluator_2, 0x3050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_4, 0x30A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LayeredBoneBlend_2, 0x30D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequencePlayer, 0x3190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SequenceEvaluator, 0x3210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_3, 0x3260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateMachine_3, 0x3290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult_2, 0x3340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateMachine_2, 0x3370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateResult, 0x3420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_StateMachine, 0x3450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_BlendListByBool_4, 0x3500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LocalToComponentSpace_7, 0x35A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ComponentToLocalSpace_7, 0x35C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_BlendListByBool_3, 0x35E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_Slot_2, 0x3680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LocalToComponentSpace_6, 0x36C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ModifyBone_6, 0x36E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ComponentToLocalSpace_6, 0x37F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_BlendListByBool_2, 0x3810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SaveCachedPose_3, 0x38B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_UseCachedPose_7, 0x3A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LocalToComponentSpace_5, 0x3A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ComponentToLocalSpace_5, 0x3A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_UseCachedPose_6, 0x3A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ModifyBone_5, 0x3A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LocalToComponentSpace_4, 0x3BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ComponentToLocalSpace_4, 0x3BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ModifyBone_4, 0x3BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SaveCachedPose_2, 0x3CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_UseCachedPose_5, 0x3E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_UseCachedPose_4, 0x3E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_UseCachedPose_3, 0x3E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ModifyBone_3, 0x3EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TwoBoneIK_2, 0x3FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_TwoBoneIK, 0x41A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LocalToComponentSpace_3, 0x4380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ComponentToLocalSpace_3, 0x43A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LocalToComponentSpace_2, 0x43C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ComponentToLocalSpace_2, 0x43E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_HandIKRetargeting_2, 0x4400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_HandIKRetargeting, 0x4520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LocalToComponentSpace, 0x4640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ComponentToLocalSpace, 0x4660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ModifyBone_2, 0x4680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_ModifyBone, 0x4788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_Root, 0x4890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LinkedAnimLayer_2, 0x48C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_BlendListByEnum, 0x4970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LinkedAnimLayer, 0x4A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_LayeredBoneBlend, 0x4AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_Slot, 0x4B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_SaveCachedPose, 0x4BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_UseCachedPose_2, 0x4D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_UseCachedPose, 0x4D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimGraphNode_BlendListByBool, 0x4D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, Character, 0x4E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, Current_Weapon_Class, 0x4E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, MoveSpeed, 0x4E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, MoveDirection, 0x4E34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, AnimDeltaTime, 0x4E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, CameraPitch, 0x4E3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, IsAir, 0x4E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, IsCrouched, 0x4E41);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, IsAiming, 0x4E42);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, UnknownData_QV6R, 0x4E43);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, WeaponRecoilAlpha_Backward, 0x4E44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, WeaponRecoilAlpha_YawRoll, 0x4E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, WeaponAimPosition, 0x4E4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, TiltBody, 0x4E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, WeaponIsDown, 0x4E5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, IsDead, 0x4E5D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Body_C, IsSprinting, 0x4E5E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PG_AnimBluerpint_Body_C, 0x4E5F);
		}

		// class UUI_Shop_Weapon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Shop_Weapon__UI_Shop_Weapon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_Weapon_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_Weapon_C, HorizontalBox_Header, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_Weapon_C, UI_Button_Primary, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_Weapon_C, UI_Button_Secondary, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_Weapon_C, UI_Shop_WeaponInfo, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_Weapon_C, WidgetSwitcher_WeaponClass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_Weapon_C, WrapBox_PrimaryWeapons, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_Weapon_C, WrapBox_SecondaryWeapons, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_Weapon_C, PrimaryWeaponsInfo, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Shop_Weapon_C, 0x02A1);
		}

		// class UAnimNotify_PlayNiagaraEffect : public UAnimNotify
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotify_PlayNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Template, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, bAbsoluteScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_L73B, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_0X8N, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_X93S, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayNiagaraEffect, 0x0090);
		}

		// class UAnimNotifyState_TimedNiagaraEffect : public UAnimNotifyState
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotifyState_TimedNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, Template, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, UnknownData_BB73, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedNiagaraEffect, 0x0060);
		}

		// class UFoliageInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, GenerationGuid, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, UnknownData_60QY, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x06A0);
		}

		// class UFoliageStatistics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0028);
		}

		// class UFoliageType : public UObject
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSingleInstanceModeOverrideRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_SBO5, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SingleInstanceModeRadius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_KTHC, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_4ILE, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_RC3N, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_AZWH, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_RXWR, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_YDHJ, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_T5EB, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ExclusionLandscapeLayers, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumExclusionLayerWeight, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_17A5, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_0QL0, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_TBZ2, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightmapType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_PGOW, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_60O1, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightingChannels, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_ACVV, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_82VV, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilWriteMask, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_RPWU, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, TranslucencySortPriority, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_O5VH, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_TN8A, 0x038F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RuntimeVirtualTextures, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureCullMips, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureRenderPassType, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_YXCA, 0x03A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x03A8);
		}

		// class UFoliageType_Actor : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, ActorClass, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, bShouldAttachToBaseComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, UnknownData_DN1D, 0x03B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_Actor, 0x03B8);
		}

		// class UFoliageType_InstancedStaticMesh : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x03C8);
		}

		// class AInstancedFoliageActor : public AActor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_UGIK, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x0270);
		}

		// class AInteractiveFoliageActor : public AStaticMeshActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_HQ5D, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x0290);
		}

		// class UInteractiveFoliageComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_LWX2, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x04E0);
		}

		// class AProceduralFoliageBlockingVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageBlockingVolume, 0x0260);
		}

		// class UProceduralFoliageComponent : public UActorComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_X45O, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x00D8);
		}

		// class UProceduralFoliageSpawner : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, RandomSeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_NZMB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_Z27E, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0068);
		}

		// class UProceduralFoliageTile : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_UIKK, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_LVCW, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0158);
		}

		// class AProceduralFoliageVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageVolume, ProceduralComponent, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageVolume, 0x0260);
		}

		// class ACameraRig_Crane : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitch, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYaw, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneArmLength, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountPitch, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountYaw, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, UnknownData_4UJC, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, TransformComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYawControl, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitchControl, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneCameraMount, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Crane, 0x0250);
		}

		// class ACameraRig_Rail : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, CurrentPositionOnRail, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, bLockOrientationToRail, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, UnknownData_8I1W, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailSplineComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailCameraMount, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Rail, 0x0240);
		}

		// class ACineCameraActor : public ACameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, LookatTrackingSettings, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, UnknownData_E5O0, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCameraActor, 0x0800);
		}

		// class UCineCameraComponent : public UCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, Filmback, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_SO75, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPreset, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_6ADR, 0x08B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x08C0);
		}

		// class UNetAnalyticsAggregatorConfig : public UObject
		TEST_METHOD(Class__NetCore__NetAnalyticsAggregatorConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetAnalyticsAggregatorConfig, NetAnalyticsData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetAnalyticsAggregatorConfig, 0x0038);
		}

		// class UUI_Indicators_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Indicators__UI_Indicators_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Indicators_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Indicators_C, Lines, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Indicators_C, LinesRainbow, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Indicators_C, ProgressBar_Health, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Indicators_C, ProgressBar_Stamina, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Indicators_C, TextBlock_CurrentNumberAmmo, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Indicators_C, TextBlock_Health, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Indicators_C, TextBlock_NumberGrenades, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Indicators_C, TextBlock_StockAmmo, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Indicators_C, Character, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Indicators_C, PlayerState, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Indicators_C, 0x02B8);
		}

		// class UUI_ServerInfo_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ServerInfo__UI_ServerInfo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, Border_Background, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, Button_Connect, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, Button_SelectServer, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, Image_MapImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, SizeBox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, Text_CurrentPlayersNumber, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, Text_Ping, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, Text_ServerMap, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, Text_ServerMode, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, Text_ServerName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, Text_TotalPlayersNumber, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, TextBlock_Slash, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, ServerRegion, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, UnknownData_BMRS, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, Ping, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, ServerInfo, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, ServerSettings, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, IsSelected, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, UnknownData_12RN, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, ServerSelected, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ServerInfo_C, UI_ExperimentalModeTooltip, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ServerInfo_C, 0x0300);
		}

		// class UBP_PG_AnimBluerpint_Menu_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BP_PG_AnimBluerpint_Menu__BP_PG_AnimBluerpint_Menu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Menu_C, UnknownData_BV3G, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Menu_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Menu_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Menu_C, AnimGraphNode_SequencePlayer, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Menu_C, AnimGraphNode_Slot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Menu_C, AnimGraphNode_HandIKRetargeting, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Menu_C, AnimGraphNode_LocalToComponentSpace, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Menu_C, AnimGraphNode_ComponentToLocalSpace, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Menu_C, AnimGraphNode_ModifyBone, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Menu_C, UnknownData_T2AW, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Menu_C, AnimGraphNode_TwoBoneIK, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PG_AnimBluerpint_Menu_C, 0x0810);
		}

		// class ABP_PG_PlayerState_Menu_C : public APG_PlayerState_Menu
		TEST_METHOD(BlueprintGeneratedClass__BP_PG_PlayerState_Menu__BP_PG_PlayerState_Menu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_PlayerState_Menu_C, DefaultSceneRoot, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PG_PlayerState_Menu_C, 0x0340);
		}

		// class UUI_ItemParameter_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ItemParameter__UI_ItemParameter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ItemParameter_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ItemParameter_C, ProgressBar_Parameter, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ItemParameter_C, TextBlock_Parameter, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ItemParameter_C, TextBlock_ParameterName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ItemParameter_C, ParameterName, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ItemParameter_C, MaxParameter, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ItemParameter_C, IsRound, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ItemParameter_C, 0x029D);
		}

		// class UUI_SupportBox_Ammo_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_SupportBox_Ammo__UI_SupportBox_Ammo_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SupportBox_Ammo_C, 0x0260);
		}

		// class UNiagaraScriptBase : public UObject
		TEST_METHOD(Class__NiagaraShader__NiagaraScriptBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptBase, 0x0028);
		}

		// class UMovieSceneMediaPlayerPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, MediaSource, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, bLoop, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, UnknownData_JSW8, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertySection, 0x00F8);
		}

		// class UMovieSceneMediaPlayerPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertyTrack, UnknownData_LZAT, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertyTrack, 0x00B0);
		}

		// class UMovieSceneMediaSection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSource, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bLooping, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_RD8F, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, StartFrameOffset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaTexture, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSoundComponent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bUseExternalMediaPlayer, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_6MZQ, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, ExternalMediaPlayer, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaSection, 0x0118);
		}

		// class UMovieSceneMediaTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, UnknownData_4KV9, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, MediaSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaTrack, 0x0090);
		}

		// class ABP_Item_Rifle_AK74M_C : public AItem_Weapon_Rifle
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Rifle_AK74M__BP_Item_Rifle_AK74M_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Rifle_AK74M_C, UberGraphFrame, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Rifle_AK74M_C, 0x03E8);
		}

		// class ABP_Item_Pistol_Colt1911_C : public AItem_Weapon_Pistol
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Pistol_Colt1911__BP_Item_Pistol_Colt1911_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Pistol_Colt1911_C, 0x03E8);
		}

		// class UImageWriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ImageWriteQueue__ImageWriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageWriteBlueprintLibrary, 0x0028);
		}

		// class UUI_ControlPointMarker_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ControlPointMarker__UI_ControlPointMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ControlPointMarker_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ControlPointMarker_C, ControlPointImage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ControlPointMarker_C, SizeBox, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ControlPointMarker_C, PointName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ControlPointMarker_C, UnknownData_HO7Q, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ControlPointMarker_C, Size, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ControlPointMarker_C, ControlPointReference, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ControlPointMarker_C, TargetOpacity, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ControlPointMarker_C, AllowPlayerSpawn, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ControlPointMarker_C, UnknownData_D0VH, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ControlPointMarker_C, SelectAsSpawnPointDelegate, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ControlPointMarker_C, 0x02A0);
		}

		// class UUI_Weapons_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Weapons__UI_Weapons_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Weapons_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Weapons_C, Image_Primary, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Weapons_C, Image_Secondary, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Weapons_C, Character, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Weapons_C, 0x0280);
		}

		// class UMaterialShaderQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0078);
		}

		// class UShaderPlatformQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_VJUI, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0060);
		}

		// class UBP_ClientTransfer_C : public UClientTransfer
		TEST_METHOD(BlueprintGeneratedClass__BP_ClientTransfer__BP_ClientTransfer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ClientTransfer_C, 0x0068);
		}

		// class UDefaultKeySeparator_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DefaultKeySeparator__DefaultKeySeparator_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultKeySeparator_C, 0x0260);
		}

		// class ABP_Item_Sniper_M24_C : public AItem_Weapon_Sniper
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Sniper_M24__BP_Item_Sniper_M24_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Sniper_M24_C, 0x03E0);
		}

		// class ABP_Item_Sniper_M14_C : public AItem_Weapon_Sniper
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Sniper_M14__BP_Item_Sniper_M14_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Sniper_M14_C, UberGraphFrame, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Sniper_M14_C, 0x03E8);
		}

		// class ABP_Item_Pistol_Anaconda_C : public AItem_Weapon_Pistol
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Pistol_Anaconda__BP_Item_Pistol_Anaconda_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Pistol_Anaconda_C, 0x03E8);
		}

		// class UUI_GameMenu_Map_PlayerIcon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_GameMenu_Map_PlayerIcon__UI_GameMenu_Map_PlayerIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_PlayerIcon_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_PlayerIcon_C, PlayerIcon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_PlayerIcon_C, PlayerCharacter, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_PlayerIcon_C, MapDimension, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_PlayerIcon_C, UnknownData_NG0Y, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_PlayerIcon_C, Timer, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_PlayerIcon_C, MapSizeX, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_PlayerIcon_C, UnknownData_RVZY, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_PlayerIcon_C, Map, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_GameMenu_Map_PlayerIcon_C, 0x0298);
		}

		// class ABP_PG_Character_General_C : public APG_Character
		TEST_METHOD(BlueprintGeneratedClass__BP_PG_Character_General__BP_PG_Character_General_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, UberGraphFrame, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Clips_02, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Clips_01, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Clips_04, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Clips_03, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Tool, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Glowstick_02, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Pistol, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Glowstick_01, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Grenade_02, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Grenade_01, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Pouch_03, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Pouch_02, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Pouch_01, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Radio, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Band_01, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Timeline_CameraRadialBlur_Alpha_528A8686463CE6A4D0B015899DABE58A, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Timeline_CameraRadialBlur__Direction_528A8686463CE6A4D0B015899DABE58A, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, UnknownData_5XTC, 0x0615);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, Timeline_CameraRadialBlur, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, CurrentWeaponRecoilPitch, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, CurrentWeaponRecoilYaw, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, NeutralizationFire, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_General_C, SaveNeutralizationFire, 0x062C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PG_Character_General_C, 0x0630);
		}

		// class UUI_InteractionTime_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_InteractionTime__UI_InteractionTime_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_InteractionTime_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_InteractionTime_C, Image_InteractionProgress, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_InteractionTime_C, interactionTime, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_InteractionTime_C, CurrentTime, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_InteractionTime_C, 0x0278);
		}

		// class UUI_Scoreboard_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Scoreboard__UI_Scoreboard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, LinesBackground, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, Overlay_Main, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, TextBlock_BlueScore, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, TextBlock_RedScore, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, VerticalBox_BlueTeam, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, VerticalBox_RedTeam, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_C, Timer_UpdatePlayersTab, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Scoreboard_C, 0x02A0);
		}

		// class UInputLabel : public UUserWidget
		TEST_METHOD(Class__AutoSettings__InputLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputLabel, MappingGroup, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputLabel, KeyGroup, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputLabel, bUsePlayerKeyGroup, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputLabel, UnknownData_O503, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputLabel, IconTags, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputLabel, 0x0290);
		}

		// class UActionLabel : public UInputLabel
		TEST_METHOD(Class__AutoSettings__ActionLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionLabel, ActionName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionLabel, KeyLabelWidgetClass, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionLabel, KeySeparatorWidgetClass, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionLabel, KeyContainer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionLabel, PrimaryKeyLabel, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionLabel, ShiftLabel, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionLabel, CtrlLabel, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionLabel, AltLabel, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionLabel, CmdLabel, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionLabel, ShiftSeparator, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionLabel, CtrlSeparator, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionLabel, AltSeparator, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionLabel, CmdSeparator, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActionLabel, 0x02F8);
		}

		// class UInputMapping : public UUserWidget
		TEST_METHOD(Class__AutoSettings__InputMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputMapping, MappingGroup, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputMapping, KeyGroup, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputMapping, UnknownData_AYJX, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputMapping, IconTags, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputMapping, BindCaptureButton, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputMapping, 0x0298);
		}

		// class UActionMapping : public UInputMapping
		TEST_METHOD(Class__AutoSettings__ActionMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionMapping, ActionName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionMapping, ActionLabel, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActionMapping, 0x02A8);
		}

		// class UAutoSettingsConfig : public UDeveloperSettings
		TEST_METHOD(Class__AutoSettings__AutoSettingsConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, SettingsIniName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, SettingsSectionName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, bAutoInitializePlayerInputOverrides, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, AllowModifierKeys, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, UnknownData_X76I, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, ShiftModifierOverrideText, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, CtrlModifierOverrideText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, AltModifierOverrideText, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, CmdModifierOverrideText, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, InputPresets, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, AllowMultipleBindingsPerKey, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, UnknownData_6ODC, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, MappingGroupLinks, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, PreservedActions, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, PreservedAxes, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, KeyIconSets, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, KeyFriendlyNames, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, KeyGroups, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, AllowedKeys, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, DisallowedKeys, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, BindingEscapeKeys, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, MouseMoveCaptureDistance, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, UnknownData_QMRR, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, AxisAssociations, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, BlacklistedActions, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsConfig, BlacklistedAxes, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoSettingsConfig, 0x01A0);
		}

		// class UAutoSettingsInputSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__AutoSettings__AutoSettingsInputSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingsInputSubsystem, UnknownData_W6ND, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoSettingsInputSubsystem, 0x0038);
		}

		// class UAutoSettingsPlayer : public UInterface
		TEST_METHOD(Class__AutoSettings__AutoSettingsPlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoSettingsPlayer, 0x0028);
		}

		// class UAutoSettingsValidationSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__AutoSettings__AutoSettingsValidationSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoSettingsValidationSubsystem, 0x0030);
		}

		// class UAutoSettingWidget : public UUserWidget
		TEST_METHOD(Class__AutoSettings__AutoSettingWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingWidget, CVarName, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingWidget, ValueMask, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingWidget, bAutoSave, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingWidget, bAutoApply, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingWidget, UnknownData_WHG9, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingWidget, SettingTags, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingWidget, CurrentValue, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingWidget, bHasUnappliedChange, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingWidget, bHasUnsavedChange, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingWidget, bUpdatingSettingSelection, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoSettingWidget, UnknownData_77XL, 0x02AB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoSettingWidget, 0x02B0);
		}

		// class UAxisLabel : public UInputLabel
		TEST_METHOD(Class__AutoSettings__AxisLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisLabel, AxisName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisLabel, Scale, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisLabel, UnknownData_1WSP, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisLabel, KeyLabel, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisLabel, 0x02A8);
		}

		// class UAxisMapping : public UInputMapping
		TEST_METHOD(Class__AutoSettings__AxisMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisMapping, AxisName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisMapping, Scale, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisMapping, UnknownData_O7QA, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisMapping, AxisLabel, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisMapping, 0x02B0);
		}

		// class UBindCaptureButton : public UUserWidget
		TEST_METHOD(Class__AutoSettings__BindCaptureButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCaptureButton, KeyGroup, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCaptureButton, BindCapturePromptClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCaptureButton, CapturePromptZOrder, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCaptureButton, UnknownData_IHBU, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCaptureButton, Prompt, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBindCaptureButton, 0x0290);
		}

		// class UBindCapturePrompt : public UUserWidget
		TEST_METHOD(Class__AutoSettings__BindCapturePrompt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCapturePrompt, bIgnoreGameViewportInputWhileCapturing, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCapturePrompt, bRestrictKeyGroup, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCapturePrompt, CaptureMode, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCapturePrompt, UnknownData_97PT, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCapturePrompt, KeyGroup, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCapturePrompt, UnknownData_EO0J, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCapturePrompt, OnChordCaptured, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCapturePrompt, OnChordRejected, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCapturePrompt, OnCapturePromptClosed, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCapturePrompt, KeysDown, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCapturePrompt, PreviousIgnoreInput, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCapturePrompt, UnknownData_NCE0, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCapturePrompt, AccumulatedMouseDelta, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBindCapturePrompt, UnknownData_UTV6, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBindCapturePrompt, 0x02C0);
		}

		// class UToggleSetting : public UAutoSettingWidget
		TEST_METHOD(Class__AutoSettings__ToggleSetting)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToggleSetting, 0x02B0);
		}

		// class UCheckBoxSetting : public UToggleSetting
		TEST_METHOD(Class__AutoSettings__CheckBoxSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxSetting, CheckBox, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxSetting, 0x02B8);
		}

		// class USelectSetting : public UAutoSettingWidget
		TEST_METHOD(Class__AutoSettings__SelectSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSetting, Options, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSetting, OptionFactory, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSetting, bUpdatingSettingOptions, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSetting, UnknownData_5FXN, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectSetting, 0x02D0);
		}

		// class UComboBoxSetting : public USelectSetting
		TEST_METHOD(Class__AutoSettings__ComboBoxSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxSetting, ComboBox, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxSetting, 0x02D8);
		}

		// class UConsoleUtils : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AutoSettings__ConsoleUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleUtils, 0x0028);
		}

		// class UCVarChangeListener : public UObject
		TEST_METHOD(Class__AutoSettings__CVarChangeListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCVarChangeListener, UnknownData_8ZIT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCVarChangeListener, 0x0080);
		}

		// class UCVarChangeListenerManager : public UObject
		TEST_METHOD(Class__AutoSettings__CVarChangeListenerManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCVarChangeListenerManager, Listeners, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCVarChangeListenerManager, 0x0078);
		}

		// class UGlobalKeyIconTagManager : public UObject
		TEST_METHOD(Class__AutoSettings__GlobalKeyIconTagManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalKeyIconTagManager, OnGlobalKeyIconTagsModified, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalKeyIconTagManager, GlobalKeyIconTags, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGlobalKeyIconTagManager, 0x0058);
		}

		// class UInputMappingManager : public UObject
		TEST_METHOD(Class__AutoSettings__InputMappingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputMappingManager, UnknownData_SFW0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputMappingManager, PlayerInputOverrides, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputMappingManager, RegisteredPlayerControllers, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputMappingManager, 0x0058);
		}

		// class UKeyLabel : public UUserWidget
		TEST_METHOD(Class__AutoSettings__KeyLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyLabel, KeyInvalidText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyLabel, LabelOverride, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyLabel, Key, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyLabel, IconTags, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyLabel, 0x02C8);
		}

		// class USliderSetting : public UAutoSettingWidget
		TEST_METHOD(Class__AutoSettings__SliderSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USliderSetting, LeftValue, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USliderSetting, RightValue, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USliderSetting, 0x02B8);
		}

		// class UNativeSliderSetting : public USliderSetting
		TEST_METHOD(Class__AutoSettings__NativeSliderSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeSliderSetting, Slider, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeSliderSetting, bMouseCaptureInProgress, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeSliderSetting, UnknownData_39XG, 0x02C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeSliderSetting, 0x02C8);
		}

		// class URadioButton : public UUserWidget
		TEST_METHOD(Class__AutoSettings__RadioButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioButton, OnSelected, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioButton, Label, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioButton, Value, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioButton, Selected, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioButton, UnknownData_QNCZ, 0x0299);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadioButton, 0x02A0);
		}

		// class URadioSelect : public UUserWidget
		TEST_METHOD(Class__AutoSettings__RadioSelect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioSelect, Options, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioSelect, RadioButtonClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioSelect, SelectionChangedEvent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioSelect, ButtonContainer, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioSelect, RadioButtons, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadioSelect, 0x02A0);
		}

		// class URadioSelectSetting : public USelectSetting
		TEST_METHOD(Class__AutoSettings__RadioSelectSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioSelectSetting, RadioButtonClass, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadioSelectSetting, RadioSelect, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadioSelectSetting, 0x02E0);
		}

		// class USettingOptionFactory : public UObject
		TEST_METHOD(Class__AutoSettings__SettingOptionFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USettingOptionFactory, 0x0028);
		}

		// class UResolutionOptionFactory : public USettingOptionFactory
		TEST_METHOD(Class__AutoSettings__ResolutionOptionFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResolutionOptionFactory, 0x0028);
		}

		// class UResolutionStringUtils : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AutoSettings__ResolutionStringUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResolutionStringUtils, 0x0028);
		}

		// class USettingValueMask : public UObject
		TEST_METHOD(Class__AutoSettings__SettingValueMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USettingValueMask, 0x0028);
		}

		// class UResolutionValueMask : public USettingValueMask
		TEST_METHOD(Class__AutoSettings__ResolutionValueMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResolutionValueMask, 0x0028);
		}

		// class USettingContainerUtils : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AutoSettings__SettingContainerUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USettingContainerUtils, 0x0028);
		}

		// class USettingsManager : public UObject
		TEST_METHOD(Class__AutoSettings__SettingsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsManager, OnSettingSaved, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsManager, IniFilename, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USettingsManager, 0x0048);
		}

		// class USpinner : public UUserWidget
		TEST_METHOD(Class__AutoSettings__Spinner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinner, Options, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinner, bAllowWrapping, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinner, UnknownData_6ZBH, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinner, SelectionChangedEvent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinner, UnknownData_2Q6K, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinner, 0x0290);
		}

		// class USpinnerSetting : public USelectSetting
		TEST_METHOD(Class__AutoSettings__SpinnerSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinnerSetting, Spinner, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinnerSetting, 0x02D8);
		}

		// class UWindowModeValueMask : public USettingValueMask
		TEST_METHOD(Class__AutoSettings__WindowModeValueMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowModeValueMask, 0x0028);
		}

		// class UUI_Map_OtherPlayerIcon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Map_OtherPlayerIcon__UI_Map_OtherPlayerIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_OtherPlayerIcon_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_OtherPlayerIcon_C, MainOverlay, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_OtherPlayerIcon_C, PlayerIcon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_OtherPlayerIcon_C, TargetOpacity, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_OtherPlayerIcon_C, MapSize, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Map_OtherPlayerIcon_C, PlayerCharacter, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Map_OtherPlayerIcon_C, 0x0288);
		}

		// class UUI_KillLog_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_KillLog__UI_KillLog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_KillLog_C, VerticalBox_Log, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_KillLog_C, 0x0268);
		}

		// class UUI_GeneralGameScreen_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_GeneralGameScreen__UI_GeneralGameScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralGameScreen_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralGameScreen_C, UI_Chat, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralGameScreen_C, UI_EscapeMenu, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralGameScreen_C, UI_GameMenuScreen, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralGameScreen_C, UI_GamePointsWindow, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralGameScreen_C, UI_GameScreen, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralGameScreen_C, UI_KillLog, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralGameScreen_C, UI_MatchResult, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralGameScreen_C, UI_Scoreboard, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralGameScreen_C, WidgetSwitcher_Main, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralGameScreen_C, ActiveScreenIndex, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_GeneralGameScreen_C, 0x02B4);
		}

		// class USynthComponent : public USceneComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_3NKE, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySet, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, BusSends, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, PreEffectBusSends, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_SWP8, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerAttackTime, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerReleaseTime, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_RYD8, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, OnAudioEnvelopeValue, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_C27S, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_TLRM, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x06C0);
		}

		// class UAudioGenerator : public UObject
		TEST_METHOD(Class__AudioMixer__AudioGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioGenerator, UnknownData_SDSU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioGenerator, 0x00A8);
		}

		// class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0028);
		}

		// class UQuartzClockHandle : public UObject
		TEST_METHOD(Class__AudioMixer__QuartzClockHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuartzClockHandle, UnknownData_ZHRX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuartzClockHandle, 0x0190);
		}

		// class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_6705, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, Settings, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x0130);
		}

		// class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_8SHB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x00B0);
		}

		// class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_XG7I, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, Settings, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x0110);
		}

		// class UQuartzSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__AudioMixer__QuartzSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuartzSubsystem, UnknownData_RI5P, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuartzSubsystem, 0x0080);
		}

		// class USynthSound : public USoundWaveProcedural
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, OwningSynthComponent, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_LZDW, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x03E0);
		}

		// class UVaRestJsonObject : public UObject
		TEST_METHOD(Class__VaRest__VaRestJsonObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestJsonObject, UnknownData_Z49B, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestJsonObject, 0x0038);
		}

		// class UVaRestJsonValue : public UObject
		TEST_METHOD(Class__VaRest__VaRestJsonValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestJsonValue, UnknownData_0V15, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestJsonValue, 0x0038);
		}

		// class UVaRestLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__VaRest__VaRestLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestLibrary, 0x0028);
		}

		// class UVaRestRequestJSON : public UObject
		TEST_METHOD(Class__VaRest__VaRestRequestJSON)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, OnRequestComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, OnRequestFail, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, UnknownData_U003, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, ResponseSize, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, UnknownData_L6FN, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, ResponseContent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, bIsValidJsonResponse, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, UnknownData_M0RK, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, RequestJsonObj, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, UnknownData_DCNW, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, ResponseJsonObj, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, ResponseJsonValue, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, UnknownData_HLI1, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestRequestJSON, 0x01C8);
		}

		// class UVaRestSettings : public UObject
		TEST_METHOD(Class__VaRest__VaRestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestSettings, bExtendedLog, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestSettings, bUseChunkedParser, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestSettings, UnknownData_42ZA, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestSettings, 0x0030);
		}

		// class UVaRestSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__VaRest__VaRestSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestSubsystem, RequestMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestSubsystem, 0x0080);
		}

		// class UUI_Premium_SkinItem_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Premium_SkinItem__UI_Premium_SkinItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, Border, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, Border_Purchased, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, Border_Sale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, Button, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, Image_Crowns, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, Image_Icon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, Overlay_Loading, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, Overlay_OldPrice, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, TextBlock_ItemName, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, TextBlock_ItemPrice, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, TextBlock_ItemPrice_OldPrice, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, TextBlock_Purchased, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, WidgetSwitcher_Price, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, ModuleData, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, IsPurchased, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, UnknownData_VXIZ, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Premium_SkinItem_C, PlayerController, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Premium_SkinItem_C, 0x02E8);
		}

		// class UMovieSceneSignedObject : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_MXWJ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x0050);
		}

		// class UMovieSceneTrack : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_J02Z, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, bIsEvalDisabled, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_T5XR, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvaluationFieldGuid, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvaluationField, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0078);
		}

		// class UMovieSceneNameableTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x0078);
		}

		// class UMovieSceneCompiledDataManager : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneCompiledDataManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, UnknownData_DPFU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, Hierarchies, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, TrackTemplates, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, TrackTemplateFields, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, EntityComponentFields, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, UnknownData_2CSN, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCompiledDataManager, 0x0230);
		}

		// class UMovieSceneFloatDecomposer : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneFloatDecomposer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatDecomposer, 0x0028);
		}

		// class UMovieSceneBuiltInEasingFunction : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_HE2Z, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_WZ61, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0038);
		}

		// class UMovieSceneEasingExternalCurve : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_D67O, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, Curve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0038);
		}

		// class UMovieSceneEasingFunction : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0028);
		}

		// class UMovieSceneEntitySystemLinker : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEntitySystemLinker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, UnknownData_SOBN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, SystemGraph, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, UnknownData_JZM0, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntitySystemLinker, 0x0458);
		}

		// class UMovieSceneEntitySystem : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEntitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystem, Linker, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystem, UnknownData_TS2Q, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntitySystem, 0x0040);
		}

		// class UMovieSceneEvalTimeSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneEvalTimeSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEvalTimeSystem, UnknownData_Z7SJ, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEvalTimeSystem, 0x0050);
		}

		// class UMovieSceneFolder : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_8THO, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0070);
		}

		// class UMovieSceneKeyProxy : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneKeyProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneKeyProxy, 0x0028);
		}

		// class UMovieSceneEntityInstantiatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneEntityInstantiatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntityInstantiatorSystem, 0x0040);
		}

		// class UMovieSceneMasterInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneMasterInstantiatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMasterInstantiatorSystem, 0x0040);
		}

		// class UMovieScenePreAnimatedStateSystemInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePreAnimatedStateSystemInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreAnimatedStateSystemInterface, 0x0028);
		}

		// class UMovieSceneCachePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneCachePreAnimatedStateSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCachePreAnimatedStateSystem, 0x0040);
		}

		// class UMovieSceneRestorePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneRestorePreAnimatedStateSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneRestorePreAnimatedStateSystem, 0x0040);
		}

		// class UMovieSceneSequenceTickManager : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequenceTickManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, SequenceActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, Linker, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, UnknownData_T369, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequenceTickManager, 0x00D0);
		}

		// class UMovieSceneSpawnablesSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnablesSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnablesSystem, 0x0040);
		}

		// class UMovieSceneSection : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_XM6W, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, SectionRange, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollFrames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollFrames, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_3MSX, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, StartTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PrerollTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostrollTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_0932, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, bSupportsInfiniteRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_BLR6, 0x00CB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x00E8);
		}

		// class UMovieSceneBoolSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneBoolSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_KFE2, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0180);
		}

		// class UMovieSceneSpawnSection : public UMovieSceneBoolSection
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnSection, UnknownData_E545, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0188);
		}

		// class UMovieSceneSpawnTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x0098);
		}

		// class UTestMovieSceneTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_AFTW, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, bHighPassFilter, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_1YWE, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, SectionArray, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneTrack, 0x0098);
		}

		// class UTestMovieSceneSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSection, 0x00E8);
		}

		// class UMovieSceneSequence : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, CompiledData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, DefaultCompletionMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bPlayableDirectly, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, SequenceFlags, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_9AE6, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0060);
		}

		// class UTestMovieSceneSequence : public UMovieSceneSequence
		TEST_METHOD(Class__MovieScene__TestMovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSequence, MovieScene, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSequence, 0x0068);
		}

		// class UMovieSceneSubTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x0088);
		}

		// class UTestMovieSceneSubTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSubTrack, SectionArray, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubTrack, 0x0098);
		}

		// class UMovieSceneSubSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSubSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, Parameters, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PrerollTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_LNXL, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0160);
		}

		// class UTestMovieSceneSubSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubSection, 0x0160);
		}

		// class UMovieSceneTrackInstance : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, AnimatedObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, bIsMasterTrackInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, UnknownData_H1Z5, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, Linker, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, Inputs, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstance, 0x0050);
		}

		// class UMovieSceneTrackInstanceInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstanceInstantiator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstanceInstantiator, UnknownData_2G7P, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstanceInstantiator, 0x00F0);
		}

		// class UMovieSceneTrackInstanceSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstanceSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstanceSystem, Instantiator, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstanceSystem, 0x0048);
		}

		// class UMovieSceneSequencePlayer : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_Q5JV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_SMXT, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_W2UJ, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Sequence, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, StartTime, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationFrames, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationSubFrames, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_57U2, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, RootTemplateInstance, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_ZE0M, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, NetSyncProps, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackClient, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, TickManager, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_ZJEF, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x0680);
		}

		// class UMovieSceneCustomClockSource : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneCustomClockSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCustomClockSource, 0x0028);
		}

		// class UMovieSceneEntityProvider : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEntityProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntityProvider, 0x0028);
		}

		// class UMovieScenePlaybackClient : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePlaybackClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePlaybackClient, 0x0028);
		}

		// class UMovieSceneTrackTemplateProducer : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneTrackTemplateProducer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackTemplateProducer, 0x0028);
		}

		// class UNodeAndChannelMappings : public UInterface
		TEST_METHOD(Class__MovieScene__NodeAndChannelMappings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeAndChannelMappings, 0x0028);
		}

		// class UMovieSceneNodeGroup : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneNodeGroup)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNodeGroup, 0x0028);
		}

		// class UMovieSceneNodeGroupCollection : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneNodeGroupCollection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNodeGroupCollection, 0x0028);
		}

		// class UMovieScene : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, BindingGroups, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, TickResolution, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, DisplayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EvaluationType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ClockSource, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_Q1UR, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CustomClockSourcePath, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MarkedFrames, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x0148);
		}

		// class UMovieSceneBindingOverrides : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_WBIK, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0090);
		}

		// class UMovieSceneBindingOwnerInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0028);
		}

		// class UMovieSceneBlenderSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneBlenderSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBlenderSystem, UnknownData_K8RV, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBlenderSystem, 0x0060);
		}

		// class UMovieSceneGenericBoundObjectInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneGenericBoundObjectInstantiator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGenericBoundObjectInstantiator, 0x0040);
		}

		// class UMovieSceneBoundSceneComponentInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneBoundSceneComponentInstantiator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoundSceneComponentInstantiator, 0x0040);
		}

		// class UMovieSceneSceneComponentImpersonator : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneSceneComponentImpersonator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSceneComponentImpersonator, 0x0028);
		}

		// class UMovieSceneCompiledData : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, EvaluationTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, Hierarchy, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, EntityComponentField, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, TrackTemplateField, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, DeterminismFences, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, CompiledSignature, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, CompilerVersion, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AccumulatedMask, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AllocatedMask, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AccumulatedFlags, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, UnknownData_JPYT, 0x03F3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCompiledData, 0x03F8);
		}

		// class UUI_CreateServer_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_CreateServer__UI_CreateServer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, StartHovered, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, Border_116, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, Button_NextMap, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, Button_PreviousMap, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, Button_StartServer, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, ComboBoxString_GameMode, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, EditableTextBox_ServerName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, Image_ServerMap, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, SizeBox_StartBotton, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, TextBlock_MapName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, SelectedMapIndex, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, SelectedMaxPlayers, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, PlayerController, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, ServerIsCreated, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, UnknownData_9RS4, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, SelectedMapName, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, UnknownData_UQCJ, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_CreateServer_C, UI_ExperimentalModeTooltip, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_CreateServer_C, 0x02E0);
		}

		// class USoundVisualizationStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SoundVisualizations__SoundVisualizationStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundVisualizationStatics, 0x0028);
		}

		// class USoundCueTemplate : public USoundCue
		TEST_METHOD(Class__SoundCueTemplates__SoundCueTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCueTemplate, 0x0590);
		}

		// class USoundCueContainer : public USoundCueTemplate
		TEST_METHOD(Class__SoundCueTemplates__SoundCueContainer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCueContainer, 0x0590);
		}

		// class USoundCueDistanceCrossfade : public USoundCueTemplate
		TEST_METHOD(Class__SoundCueTemplates__SoundCueDistanceCrossfade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCueDistanceCrossfade, 0x0590);
		}

		// class USoundCueTemplateSettings : public UDeveloperSettings
		TEST_METHOD(Class__SoundCueTemplates__SoundCueTemplateSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCueTemplateSettings, 0x0038);
		}

		// class UMediaSource : public UObject
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_X68W, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0080);
		}

		// class UBaseMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, PlayerName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0088);
		}

		// class UFileMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_CATL, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x00B0);
		}

		// class UMediaBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0028);
		}

		// class UMediaComponent : public UActorComponent
		TEST_METHOD(Class__MediaAssets__MediaComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaTexture, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaPlayer, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaComponent, 0x00C0);
		}

		// class UMediaTimeStampInfo : public UObject
		TEST_METHOD(Class__MediaAssets__MediaTimeStampInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTimeStampInfo, Time, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTimeStampInfo, SequenceIndex, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTimeStampInfo, 0x0038);
		}

		// class UMediaPlayer : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_HFYT, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_SGBR, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_52O7, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, TimeDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, ViewRotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_6ALZ, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_BHUH, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0138);
		}

		// class UMediaPlaylist : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, Items, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0038);
		}

		// class UMediaSoundComponent : public USynthComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_CUGZ, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, DynamicRateAdjustment, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_19KS, 0x06C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentFactor, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentRange, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_PDVA, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_X8AM, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x08E0);
		}

		// class UMediaTexture : public UTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_PQTZ, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, EnableGenMips, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NumMips, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NewStyleOutput, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, OutputFormat, 0x00EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, CurrentAspectRatio, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, CurrentOrientation, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_RZGK, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_5KQP, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x01B0);
		}

		// class UPlatformMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0088);
		}

		// class UStreamMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x0098);
		}

		// class UTimeSynchronizableMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__TimeSynchronizableMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, bUseTimeSynchronization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, UnknownData_0OZ2, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, FrameDelay, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, TimeDelay, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizableMediaSource, 0x0098);
		}

		// class UUI_MatchResult_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_MatchResult__UI_MatchResult_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_C, Emergence, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_C, Button_Exit, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_C, Lines, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_C, TextBlock_CapturePointsBlueTeam, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_C, TextBlock_CapturePointsRedTeam, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_C, UI_MatchResult_ReceivedGamePoints, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_C, WidgetSwitcher_MatchResult, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_MatchResult_C, 0x02A0);
		}

		// class UImgMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__ImgMedia__ImgMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, FrameRateOverride, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, ProxyOverride, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, SequencePath, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSource, 0x00B0);
		}

		// class UAmbisonicsEncodingSettings : public USoundfieldEncodingSettingsBase
		TEST_METHOD(Class__SoundFields__AmbisonicsEncodingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, AmbisonicsOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, UnknownData_UWZG, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbisonicsEncodingSettings, 0x0030);
		}

		// class UModularSynthPresetBank : public UObject
		TEST_METHOD(Class__Synthesis__ModularSynthPresetBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthPresetBank, Presets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthPresetBank, 0x0038);
		}

		// class UModularSynthLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__ModularSynthLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthLibrary, 0x0028);
		}

		// class UModularSynthComponent : public USynthComponent
		TEST_METHOD(Class__Synthesis__ModularSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, VoiceCount, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, UnknownData_JY19, 0x06C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthComponent, 0x0D80);
		}

		// class USourceEffectBitCrusherPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectBitCrusherPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, UnknownData_BINW, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, Settings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectBitCrusherPreset, 0x00F0);
		}

		// class USourceEffectChorusPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectChorusPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, UnknownData_0EU8, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, Settings, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectChorusPreset, 0x0180);
		}

		// class USourceEffectDynamicsProcessorPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, UnknownData_LXT9, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, Settings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectDynamicsProcessorPreset, 0x00E0);
		}

		// class UEnvelopeFollowerListener : public UActorComponent
		TEST_METHOD(Class__Synthesis__EnvelopeFollowerListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, OnEnvelopeFollowerUpdate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, UnknownData_A1IP, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvelopeFollowerListener, 0x00D0);
		}

		// class USourceEffectEnvelopeFollowerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEnvelopeFollowerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, UnknownData_VCA5, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEnvelopeFollowerPreset, 0x00A8);
		}

		// class USourceEffectEQPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, UnknownData_XCEJ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEQPreset, 0x00B0);
		}

		// class USourceEffectFilterPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, UnknownData_1RLI, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFilterPreset, 0x00D0);
		}

		// class USourceEffectFoldbackDistortionPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFoldbackDistortionPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, UnknownData_BXFB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFoldbackDistortionPreset, 0x00A8);
		}

		// class USourceEffectMidSideSpreaderPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectMidSideSpreaderPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, UnknownData_AE8U, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectMidSideSpreaderPreset, 0x00A0);
		}

		// class USourceEffectPannerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPannerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, UnknownData_5RC6, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPannerPreset, 0x00A0);
		}

		// class USourceEffectPhaserPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPhaserPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, UnknownData_EJ20, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPhaserPreset, 0x00B0);
		}

		// class USourceEffectRingModulationPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectRingModulationPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, UnknownData_QSEC, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectRingModulationPreset, 0x00D0);
		}

		// class USourceEffectSimpleDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectSimpleDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, UnknownData_NMPJ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, Settings, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectSimpleDelayPreset, 0x00C0);
		}

		// class USourceEffectStereoDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectStereoDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, UnknownData_8328, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, Settings, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectStereoDelayPreset, 0x00D8);
		}

		// class USourceEffectWaveShaperPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectWaveShaperPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, UnknownData_BC7L, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectWaveShaperPreset, 0x00A0);
		}

		// class UAudioImpulseResponse : public UObject
		TEST_METHOD(Class__Synthesis__AudioImpulseResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, ImpulseResponse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NumChannels, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, SampleRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NormalizationVolumeDb, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, bTrueStereo, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, UnknownData_WIR3, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, IRData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioImpulseResponse, 0x0058);
		}

		// class USubmixEffectConvolutionReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectConvolutionReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, ImpulseResponse, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, Settings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, BlockSize, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, bEnableHardwareAcceleration, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, UnknownData_C9RT, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectConvolutionReverbPreset, 0x00F0);
		}

		// class USubmixEffectDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_8PM7, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, Settings, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, DynamicSettings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_Q7FW, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDelayPreset, 0x00B8);
		}

		// class USubmixEffectFilterPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, UnknownData_85UM, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFilterPreset, 0x00A8);
		}

		// class USubmixEffectFlexiverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFlexiverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, UnknownData_06S8, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFlexiverbPreset, 0x00B0);
		}

		// class USubmixEffectMultibandCompressorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectMultibandCompressorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectMultibandCompressorPreset, UnknownData_59VA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectMultibandCompressorPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectMultibandCompressorPreset, 0x00D0);
		}

		// class USubmixEffectStereoDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectStereoDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectStereoDelayPreset, UnknownData_W7IG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectStereoDelayPreset, Settings, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectStereoDelayPreset, 0x00D8);
		}

		// class USubmixEffectTapDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectTapDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_2QTQ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, Settings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_A4YD, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectTapDelayPreset, 0x00D8);
		}

		// class USynth2DSlider : public UWidget
		TEST_METHOD(Class__Synthesis__Synth2DSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueX, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueY, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueXDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueYDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, SliderHandleColor, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IndentHandle, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, Locked, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_0R7E, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, StepSize, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IsFocusable, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_ONMR, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureBegin, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureEnd, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureBegin, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureEnd, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedX, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedY, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_EJVN, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynth2DSlider, 0x0478);
		}

		// class UGranularSynth : public USynthComponent
		TEST_METHOD(Class__Synthesis__GranularSynth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, GranulatedSoundWave, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, UnknownData_JMDL, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGranularSynth, 0x0A80);
		}

		// class UMonoWaveTableSynthPreset : public UObject
		TEST_METHOD(Class__Synthesis__MonoWaveTableSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, PresetName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_FLOT, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, LockKeyframesToGrid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTableResolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_ZHY8, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_4WKG, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonoWaveTableSynthPreset, 0x0170);
		}

		// class USynthComponentMonoWaveTable : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthComponentMonoWaveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnTableAltered, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnNumTablesChanged, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, CurrentPreset, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, UnknownData_SQAE, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMonoWaveTable, 0x0E00);
		}

		// class USynthComponentToneGenerator : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthComponentToneGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, Frequency, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, Volume, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, UnknownData_BICY, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentToneGenerator, 0x06E0);
		}

		// class USynthSamplePlayer : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthSamplePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, SoundWave, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSampleLoaded, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSamplePlaybackProgress, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, UnknownData_3QT1, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSamplePlayer, 0x07F0);
		}

		// class USynthesisUtilitiesBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__SynthesisUtilitiesBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthesisUtilitiesBlueprintFunctionLibrary, 0x0028);
		}

		// class USynthKnob : public UWidget
		TEST_METHOD(Class__Synthesis__SynthKnob)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, StepSize, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseSpeed, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseFineTuneSpeed, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_MG6M, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterUnits, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ValueDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, WidgetStyle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Locked, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, IsFocusable, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_F191, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureBegin, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureEnd, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureBegin, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureEnd, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnValueChanged, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_VI30, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthKnob, 0x0400);
		}

		// class UUI_WeaponModules_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_WeaponModules__UI_WeaponModules_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_WeaponModules_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_WeaponModules_C, HorizontalBox_Header, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_WeaponModules_C, UI_Button_Accessory, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_WeaponModules_C, UI_Button_Barrel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_WeaponModules_C, UI_Button_Optic, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_WeaponModules_C, UI_Button_Skin, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_WeaponModules_C, UI_Button_Underbarrel, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_WeaponModules_C, WidgetSwitcher_ModuleClass, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_WeaponModules_C, WrapBox_Optic, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_WeaponModules_C, WrapBox_Skin, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_WeaponModules_C, 0x02B0);
		}

		// class UButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x02A8);
		}

		// class UCheckBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x05B0);
		}

		// class UComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x0420);
		}

		// class UComboButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x03E8);
		}

		// class UEditableTextBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0828);
		}

		// class UEditableTextWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0250);
		}

		// class UProgressWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01D0);
		}

		// class UScrollBarWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0500);
		}

		// class UScrollBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0258);
		}

		// class USlateSettings : public UObject
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_N4C2, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0030);
		}

		// class USpinBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x0318);
		}

		// class UTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x02A0);
		}

		// class UToolMenuBase : public UObject
		TEST_METHOD(Class__Slate__ToolMenuBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolMenuBase, 0x0028);
		}

		// class UVisual : public UObject
		TEST_METHOD(Class__UMG__Visual)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0028);
		}

		// class UWidget : public UVisual
		TEST_METHOD(Class__UMG__Widget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_H2DM, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, AccessibleWidgetData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visibility, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderOpacity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, FlowDirectionPreference, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_P3LQ, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0108);
		}

		// class UUserWidget : public UWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_1I1D, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, OnVisibilityChanged, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_7JV4, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationTickManager, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Priority, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_Z32I, 0x01E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, TickFrequency, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_FAK3, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationCallbacks, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_G5D5, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0260);
		}

		// class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, onSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0050);
		}

		// class UPanelWidget : public UWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_E2RH, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0120);
		}

		// class UContentWidget : public UPanelWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0120);
		}

		// class UBackgroundBlur : public UContentWidget
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_QD83, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_107Z, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_CC13, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x01D8);
		}

		// class UPanelSlot : public UVisual
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0038);
		}

		// class UBackgroundBlurSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_0MZD, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0060);
		}

		// class UPropertyBinding : public UObject
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0068);
		}

		// class UBoolBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0068);
		}

		// class UBorder : public UContentWidget
		TEST_METHOD(Class__UMG__Border)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_0LVF, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_ENWT, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, bFlipForRightToLeftFlowDirection, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_531E, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_FPM3, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x0270);
		}

		// class UBorderSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_JYI1, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0060);
		}

		// class UBrushBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_Y0JU, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0070);
		}

		// class UButton : public UContentWidget
		TEST_METHOD(Class__UMG__Button)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, PressMethod, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, IsFocusable, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_T8ZL, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnPressed, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnReleased, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnHovered, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnUnhovered, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_1ZM9, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x0428);
		}

		// class UButtonSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_H53N, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0060);
		}

		// class UCanvasPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_HCY6, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0130);
		}

		// class UCanvasPanelSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_M22I, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_G7IX, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0070);
		}

		// class UCheckBox : public UContentWidget
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_M6B1, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_N660, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_DKS8, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_M4QD, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, ClickMethod, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, TouchMethod, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, PressMethod, 0x074A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, IsFocusable, 0x074B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_B4EA, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_CKMY, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x0770);
		}

		// class UCheckedStateBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_Q1M7, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0070);
		}

		// class UCircularThrobber : public UWidget
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_YKEV, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_QP0X, 0x01A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01C0);
		}

		// class UColorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_XGL3, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0070);
		}

		// class UComboBox : public UWidget
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, Items, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_QH45, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0140);
		}

		// class UComboBoxString : public UWidget
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0CF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_HU1V, 0x0CF6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_5OYX, 0x0D79);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_DZ90, 0x0D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_33SS, 0x0DB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0E00);
		}

		// class UDragDropOperation : public UObject
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_MA3I, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_636G, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0088);
		}

		// class UDynamicEntryBoxBase : public UWidget
		TEST_METHOD(Class__UMG__DynamicEntryBoxBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryBoxType, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_EPP0, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySpacing, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_KPOI, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, SpacingPattern, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySizeRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryHorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryVerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_MEVN, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, MaxElementSize, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, RadialBoxSettings, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_CO5X, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryWidgetPool, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBoxBase, 0x01D8);
		}

		// class UDynamicEntryBox : public UDynamicEntryBoxBase
		TEST_METHOD(Class__UMG__DynamicEntryBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryWidgetClass, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBox, 0x01E0);
		}

		// class UEditableText : public UWidget
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_XTFL, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x0423);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardOptions, 0x0427);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardTrigger, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardDismissAction, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Justification, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_OQGG, 0x042E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_ICGB, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x0460);
		}

		// class UEditableTextBox : public UWidget
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x09E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_FEHL, 0x09E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x09FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x09FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x09FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x09FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardOptions, 0x09FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardTrigger, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardDismissAction, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Justification, 0x0A02);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x0A03);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_2CJJ, 0x0A06);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_PDDU, 0x0A28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0A38);
		}

		// class UExpandableArea : public UWidget
		TEST_METHOD(Class__UMG__ExpandableArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_E2V3, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, Style, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderBrush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, bIsExpanded, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_188R, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, MaxHeight, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderPadding, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, AreaPadding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, OnExpansionChanged, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderContent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BodyContent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_PIO2, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExpandableArea, 0x0338);
		}

		// class UFloatBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0068);
		}

		// class UGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_MR2F, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0150);
		}

		// class UGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_QICM, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Row, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_C9BD, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0070);
		}

		// class UHorizontalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_E9QF, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0130);
		}

		// class UHorizontalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_LECO, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_LNO6, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0060);
		}

		// class UImage : public UWidget
		TEST_METHOD(Class__UMG__Image)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, bFlipForRightToLeftFlowDirection, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_V8OU, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_8CCD, 0x01D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x0210);
		}

		// class UInputKeySelector : public UWidget
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_7Z2B, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_C8B0, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x0700);
		}

		// class UInt32Binding : public UPropertyBinding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0068);
		}

		// class UInvalidationBox : public UContentWidget
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_VN1T, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0138);
		}

		// class UUserListEntry : public UInterface
		TEST_METHOD(Class__UMG__UserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntry, 0x0028);
		}

		// class UUserListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntryLibrary, 0x0028);
		}

		// class UUserObjectListEntry : public UUserListEntry
		TEST_METHOD(Class__UMG__UserObjectListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntry, 0x0028);
		}

		// class UUserObjectListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserObjectListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntryLibrary, 0x0028);
		}

		// class UListViewBase : public UWidget
		TEST_METHOD(Class__UMG__ListViewBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, WheelScrollMultiplier, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableScrollAnimation, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableFixedLineOffset, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_1SV0, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, FixedLineScrollOffset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_JOWT, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryGenerated, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryReleased, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetPool, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_0YKL, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewBase, 0x0218);
		}

		// class UListView : public UListViewBase
		TEST_METHOD(Class__UMG__ListView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_D1U8, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, Orientation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ConsumeMouseWheel, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bClearSelectionOnClick, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bIsFocusable, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_E8WX, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, EntrySpacing, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bReturnFocusToSelection, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_CF2K, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ListItems, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_P8SG, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnEntryInitialized, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemClicked, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemDoubleClicked, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemIsHoveredChanged, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemSelectionChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemScrolledIntoView, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0368);
		}

		// class UListViewDesignerPreviewItem : public UObject
		TEST_METHOD(Class__UMG__ListViewDesignerPreviewItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewDesignerPreviewItem, 0x0028);
		}

		// class UMenuAnchor : public UContentWidget
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetUserMenuContentEvent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, bFitInWindow, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x014B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_E90R, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_GLWU, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0170);
		}

		// class UMouseCursorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0068);
		}

		// class UMovieScene2DTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__UMG__MovieScene2DTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformPropertySystem, 0x0050);
		}

		// class UMovieScene2DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_FUYU, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, TransformMask, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_5CVJ, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0558);
		}

		// class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x00A8);
		}

		// class UMovieSceneMarginSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x0368);
		}

		// class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginTrack, UnknownData_9AB6, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x00B0);
		}

		// class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, UnknownData_JWTR, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x00A8);
		}

		// class UTextLayoutWidget : public UWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_E1WR, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0128);
		}

		// class UMultiLineEditableText : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_62RN, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, SelectAllTextWhenFocused, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearTextSelectionOnFocusLoss, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, RevertTextOnEscape, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearKeyboardFocusOnCommit, 0x043B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardOptions, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardDismissAction, 0x043E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_V2MO, 0x043F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_37RV, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x0470);
		}

		// class UMultiLineEditableTextBox : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0BD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardOptions, 0x0BD2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardDismissAction, 0x0BD3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_KSFY, 0x0BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_GOIL, 0x0C88);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0C98);
		}

		// class UNamedSlot : public UContentWidget
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_AGA9, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0130);
		}

		// class UNamedSlotInterface : public UInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0028);
		}

		// class UNativeWidgetHost : public UWidget
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_8SSL, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0118);
		}

		// class UOverlay : public UPanelWidget
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_T5W7, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0130);
		}

		// class UOverlaySlot : public UPanelSlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_E84Z, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_9DTF, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0058);
		}

		// class UProgressBar : public UWidget
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Percent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_7MWG, 0x02CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_AITL, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0318);
		}

		// class URetainerBox : public UContentWidget
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, bRetainRender, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_KDWN, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_Q32N, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_A06V, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0150);
		}

		// class URichTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextStyleSet, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DecoratorClasses, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, bOverrideDefaultStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_0I5H, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyleOverride, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, MinDesiredWidth, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextTransformPolicy, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_IF8C, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyle, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, InstanceDecorators, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_Q8JH, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x0678);
		}

		// class URichTextBlockDecorator : public UObject
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0028);
		}

		// class URichTextBlockImageDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__UMG__RichTextBlockImageDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockImageDecorator, ImageSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockImageDecorator, 0x0030);
		}

		// class USafeZone : public UContentWidget
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_VJ4I, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0138);
		}

		// class USafeZoneSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_C68R, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_Y35I, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0060);
		}

		// class UScaleBox : public UContentWidget
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_YSLA, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_GE8N, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0140);
		}

		// class UScaleBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_91SW, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0060);
		}

		// class UScrollBar : public UWidget
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbarTrack, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_FR2A, 0x05E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Padding, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_YFMW, 0x05FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x0610);
		}

		// class UScrollBox : public UPanelWidget
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x082A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_DON6, 0x082B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarPadding, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbarTrack, 0x0845);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x0846);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAnimateWheelScrolling, 0x0847);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_1KNA, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollWhenFocusChanges, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_SM0I, 0x0852);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WheelScrollMultiplier, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_FZ1W, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0880);
		}

		// class UScrollBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_XMEB, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0058);
		}

		// class USizeBox : public UContentWidget
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_SWDM, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinAspectRatio, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_I1TC, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0158);
		}

		// class USizeBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_MMKV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_83V1, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0060);
		}

		// class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0028);
		}

		// class USlateVectorArtData : public UObject
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, Material, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0060);
		}

		// class USlateAccessibleWidgetData : public UObject
		TEST_METHOD(Class__UMG__SlateAccessibleWidgetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, bCanChildrenBeAccessible, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleBehavior, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryBehavior, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, UnknownData_HPTO, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleTextDelegate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryTextDelegate, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateAccessibleWidgetData, 0x0080);
		}

		// class USlider : public UWidget
		TEST_METHOD(Class__UMG__Slider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MinValue, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MaxValue, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_A1GW, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_874O, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MouseUsesStep, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, RequiresControllerLock, 0x048F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_FKFK, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_HCX9, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x04F8);
		}

		// class USpacer : public UWidget
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_1P5W, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0120);
		}

		// class USpinBox : public UWidget
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_MMTG, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinFractionalDigits, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxFractionalDigits, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, bAlwaysUsesDeltaSnap, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_POQF, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_1UY3, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_9H0C, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_C75S, 0x048A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_CHSR, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_1C20, 0x050C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0520);
		}

		// class UTextBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_PPUJ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0070);
		}

		// class UTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, StrikeBrush, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bAutoWrapText, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextTransformPolicy, 0x0296);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bSimpleTextMode, 0x0297);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_OS2M, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x02A8);
		}

		// class UThrobber : public UWidget
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_9ZDJ, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_0FMR, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x01B0);
		}

		// class UTileView : public UListView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryHeight, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryWidth, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, TileAlignment, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, bWrapHorizontalNavigation, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_ACNF, 0x0372);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x0388);
		}

		// class UTreeView : public UListView
		TEST_METHOD(Class__UMG__TreeView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_4CON, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnGetItemChildren, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnItemExpansionChanged, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_V0LS, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreeView, 0x03C0);
		}

		// class UUMGSequencePlayer : public UObject
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_8T9Y, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_6C5M, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, RootTemplateInstance, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_BPPM, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x0578);
		}

		// class UUMGSequenceTickManager : public UObject
		TEST_METHOD(Class__UMG__UMGSequenceTickManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, WeakUserWidgets, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, Linker, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, UnknownData_DP0J, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequenceTickManager, 0x0120);
		}

		// class UUniformGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_ONLG, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0148);
		}

		// class UUniformGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_LTWK, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_S2MR, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0050);
		}

		// class UVerticalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_TB3X, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0130);
		}

		// class UVerticalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_1J88, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_5L1P, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0060);
		}

		// class UViewport : public UContentWidget
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_6YGD, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0168);
		}

		// class UVisibilityBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0068);
		}

		// class UWidgetAnimation : public UMovieSceneSequence
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, bLegacyFinishOnStop, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_AOJH, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, DisplayLabel, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0090);
		}

		// class UWidgetAnimationDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__UMG__WidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationDelegateBinding, WidgetAnimationDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationDelegateBinding, 0x0038);
		}

		// class UWidgetAnimationPlayCallbackProxy : public UObject
		TEST_METHOD(Class__UMG__WidgetAnimationPlayCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, UnknownData_P90B, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationPlayCallbackProxy, 0x0048);
		}

		// class UWidgetBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0068);
		}

		// class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_49NL, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0368);
		}

		// class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0028);
		}

		// class UWidgetComponent : public UMeshComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_MQ39, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_Z28P, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_06J0, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_UQJY, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x04A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WindowVisibility, 0x04A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bApplyGammaCorrection, 0x04A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x04D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x04D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_E698, 0x04D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_ZAUU, 0x0522);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_2WW2, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickMode, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_3O66, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_LARJ, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x0590);
		}

		// class UWidgetInteractionComponent : public USceneComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_R14N, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_SBK3, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_6L08, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugSphereLineThickness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugLineThickness, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_LF8V, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_2ROF, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x03F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_9PB8, 0x03F7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x0400);
		}

		// class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0028);
		}

		// class UWidgetNavigation : public UObject
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Left, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Previous, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x0100);
		}

		// class UWidgetSwitcher : public UPanelWidget
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_B6RH, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0138);
		}

		// class UWidgetSwitcherSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_HLKC, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_Z68E, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0058);
		}

		// class UWidgetTree : public UObject
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0030);
		}

		// class UWindowTitleBarArea : public UContentWidget
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bWindowButtonsEnabled, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_AM3Q, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0140);
		}

		// class UWindowTitleBarAreaSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_JDH3, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0060);
		}

		// class UWrapBox : public UPanelWidget
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapSize, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapSize, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, Orientation, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_UTIJ, 0x0133);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0148);
		}

		// class UWrapBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_I8JF, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_N0RL, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0060);
		}

		// class UChaosDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDebugDrawComponent, UnknownData_EI4S, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDebugDrawComponent, 0x00B8);
		}

		// class UChaosEventListenerComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosEventListenerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosEventListenerComponent, UnknownData_1S5R, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosEventListenerComponent, 0x00B8);
		}

		// class UChaosGameplayEventDispatcher : public UChaosEventListenerComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosGameplayEventDispatcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_HZAA, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, CollisionEventRegistrations, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, BreakEventRegistrations, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_KI7K, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosGameplayEventDispatcher, 0x0270);
		}

		// class UChaosNotifyHandlerInterface : public UInterface
		TEST_METHOD(Class__ChaosSolverEngine__ChaosNotifyHandlerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosNotifyHandlerInterface, 0x0028);
		}

		// class UChaosSolverEngineBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverEngineBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverEngineBlueprintLibrary, 0x0028);
		}

		// class UChaosSolver : public UObject
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolver, 0x0028);
		}

		// class AChaosSolverActor : public AActor
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, Properties, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TimeStepMultiplier, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionIterations, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutIterations, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutPairIterations, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterConnectionFactor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterUnionConnectionType, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateCollisionData, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_9T8Z, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionFilterSettings, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateBreakingData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_MWYP, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, BreakingFilterSettings, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateTrailingData, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_TW9A, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TrailingFilterSettings, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, MassScale, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bGenerateContactGraph, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bHasFloor, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_37F2, 0x02DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, FloorHeight, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ChaosDebugSubstepControl, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_XYAV, 0x02E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, SpriteComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_H5EI, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, GameplayEventDispatcherComponent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_F8NV, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChaosSolverActor, 0x0318);
		}

		// class UChaosSolverSettings : public UDeveloperSettings
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, UnknownData_7NOR, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, DefaultChaosSolverActorClass, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverSettings, 0x0058);
		}

		// class UUI_PlayerMarker_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_PlayerMarker__UI_PlayerMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PlayerMarker_C, HiddenAnimation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PlayerMarker_C, Image, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_PlayerMarker_C, 0x0270);
		}

		// class UBP_PG_AnimBluerpint_Arms_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BP_PG_AnimBluerpint_Arms__BP_PG_AnimBluerpint_Arms_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, UnknownData_50V0, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_Root_3, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_18, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_17, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_16, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_15, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequencePlayer_6, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LayeredBoneBlend_11, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequenceEvaluator_11, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_16, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LayeredBoneBlend_10, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequenceEvaluator_10, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequencePlayer_5, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_15, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateMachine_8, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_14, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_14, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_13, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_12, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_11, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_10, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequenceEvaluator_9, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequenceEvaluator_8, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LayeredBoneBlend_9, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_BlendSpacePlayer_4, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_13, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_BlendSpacePlayer_3, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LayeredBoneBlend_8, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequenceEvaluator_7, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_12, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LayeredBoneBlend_7, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequencePlayer_4, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequenceEvaluator_6, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_11, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateMachine_7, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_10, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateMachine_6, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_9, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateMachine_5, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_Slot_3, 0x1190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LocalToComponentSpace_13, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ComponentToLocalSpace_13, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ModifyBone_7, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SaveCachedPose_5, 0x1320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ModifyBone_6, 0x1478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LocalToComponentSpace_12, 0x1580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ComponentToLocalSpace_12, 0x15A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ModifyBone_5, 0x15C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LocalToComponentSpace_11, 0x16C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ComponentToLocalSpace_11, 0x16E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_BlendListByBool_6, 0x1708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, UnknownData_2286, 0x17A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TwoBoneIK_6, 0x17B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TwoBoneIK_5, 0x1990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ComponentToLocalSpace_10, 0x1B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LocalToComponentSpace_10, 0x1B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SaveCachedPose_4, 0x1BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_UseCachedPose_11, 0x1D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_UseCachedPose_10, 0x1D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_UseCachedPose_9, 0x1D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_BlendListByBool_5, 0x1D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_UseCachedPose_8, 0x1E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LocalToComponentSpace_9, 0x1E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ComponentToLocalSpace_9, 0x1E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, UnknownData_CFZ1, 0x1E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TwoBoneIK_4, 0x1E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TwoBoneIK_3, 0x2070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_HandIKRetargeting_3, 0x2250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LocalToComponentSpace_8, 0x2370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ComponentToLocalSpace_8, 0x2390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_Root_2, 0x23B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_9, 0x23E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_8, 0x2408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_7, 0x2430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_6, 0x2458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequencePlayer_3, 0x2480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LayeredBoneBlend_6, 0x2500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequenceEvaluator_5, 0x25C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_8, 0x2610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LayeredBoneBlend_5, 0x2640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequenceEvaluator_4, 0x2700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequencePlayer_2, 0x2750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_7, 0x27D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateMachine_4, 0x2800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_6, 0x28B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_5, 0x28E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_4, 0x2908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_3, 0x2930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult_2, 0x2958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TransitionResult, 0x2980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LayeredBoneBlend_4, 0x29A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequenceEvaluator_3, 0x2A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_BlendSpacePlayer_2, 0x2AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_5, 0x2BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_BlendSpacePlayer, 0x2BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LayeredBoneBlend_3, 0x2CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequenceEvaluator_2, 0x2D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_4, 0x2DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LayeredBoneBlend_2, 0x2DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequencePlayer, 0x2EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SequenceEvaluator, 0x2F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_3, 0x2F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateMachine_3, 0x2FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult_2, 0x3068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateMachine_2, 0x3098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateResult, 0x3148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_StateMachine, 0x3178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_BlendListByBool_4, 0x3228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LocalToComponentSpace_7, 0x32C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ComponentToLocalSpace_7, 0x32E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_BlendListByBool_3, 0x3308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_Slot_2, 0x33A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LocalToComponentSpace_6, 0x33F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ModifyBone_4, 0x3410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ComponentToLocalSpace_6, 0x3518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_BlendListByBool_2, 0x3538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SaveCachedPose_3, 0x35D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_UseCachedPose_7, 0x3730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LocalToComponentSpace_5, 0x3758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ComponentToLocalSpace_5, 0x3778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_UseCachedPose_6, 0x3798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ModifyBone_3, 0x37C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LocalToComponentSpace_4, 0x38C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ComponentToLocalSpace_4, 0x38E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ModifyBone_2, 0x3908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SaveCachedPose_2, 0x3A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_UseCachedPose_5, 0x3B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_UseCachedPose_4, 0x3B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_UseCachedPose_3, 0x3BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ModifyBone, 0x3BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, UnknownData_4CWA, 0x3CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TwoBoneIK_2, 0x3CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_TwoBoneIK, 0x3ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LocalToComponentSpace_3, 0x40B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ComponentToLocalSpace_3, 0x40D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LocalToComponentSpace_2, 0x40F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ComponentToLocalSpace_2, 0x4110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_HandIKRetargeting_2, 0x4130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_HandIKRetargeting, 0x4250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LocalToComponentSpace, 0x4370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_ComponentToLocalSpace, 0x4390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_Root, 0x43B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LinkedAnimLayer_2, 0x43E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_BlendListByEnum, 0x4490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LinkedAnimLayer, 0x4540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_LayeredBoneBlend, 0x45F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_Slot, 0x46B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_SaveCachedPose, 0x46F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_UseCachedPose_2, 0x4850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_UseCachedPose, 0x4878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimGraphNode_BlendListByBool, 0x48A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, Character, 0x4940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, Current_Weapon_Class, 0x4948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, MoveDirection, 0x4950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, AnimDeltaTime, 0x4954);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, MoveSpeed, 0x4958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, MouseTurnRate, 0x495C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, IsAir, 0x4964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, IsCrouched, 0x4965);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, UnknownData_5RBU, 0x4966);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, WeaponRecoilAlpha_Backward, 0x4968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, WeaponRecoilAlpha_YawRoll, 0x496C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, WeaponAimPosition, 0x4970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, WeaponIsDown, 0x497C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, IsSprinting, 0x497D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, IsDead, 0x497E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, UnknownData_CD1I, 0x497F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, WeaponRotation, 0x4980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PG_AnimBluerpint_Arms_C, IsAiming, 0x498C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PG_AnimBluerpint_Arms_C, 0x498D);
		}

		// class ABP_PG_PlayerController_Menu_C : public APG_PlayerController_Menu
		TEST_METHOD(BlueprintGeneratedClass__BP_PG_PlayerController_Menu__BP_PG_PlayerController_Menu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_PlayerController_Menu_C, UberGraphFrame, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_PlayerController_Menu_C, UI_GeneralMenuScreen, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_PlayerController_Menu_C, MenuCharacter, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_PlayerController_Menu_C, UI_ErrorMessage, 0x05B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PG_PlayerController_Menu_C, 0x05C0);
		}

		// class UUI_ErrorMessage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ErrorMessage__UI_ErrorMessage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ErrorMessage_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ErrorMessage_C, Anim_HideError, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ErrorMessage_C, Anim_ShowError, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ErrorMessage_C, MultiLineEditableText_ErrorDetails, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ErrorMessage_C, MultiLineEditableText_ErrorMessage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ErrorMessage_C, ErrorMessage, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ErrorMessage_C, ErrorDetails, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ErrorMessage_C, 0x02B8);
		}

		// class UDefaultKeyLabel_C : public UKeyLabel
		TEST_METHOD(WidgetBlueprintGeneratedClass__DefaultKeyLabel__DefaultKeyLabel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultKeyLabel_C, UberGraphFrame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultKeyLabel_C, IconImage, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultKeyLabel_C, LabelText, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultKeyLabel_C, 0x02E0);
		}

		// class UUI_Options_Slider_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Options_Slider__UI_Options_Slider_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Slider_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Slider_C, Slider, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Slider_C, CVarName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Slider_C, MinValue, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Slider_C, MaxValue, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Slider_C, SelectValue, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Slider_C, UnknownData_QB5K, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Slider_C, OnValueChanged, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Slider_C, AutoApply, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Options_Slider_C, 0x0299);
		}

		// class UUI_ExperimentalMode_Tooltip_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ExperimentalMode_Tooltip__UI_ExperimentalMode_Tooltip_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ExperimentalMode_Tooltip_C, 0x0260);
		}

		// class UUI_Solder_Customization_Slot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Solder_Customization_Slot__UI_Solder_Customization_Slot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, Hover, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, Border, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, Button, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, Button_CustomizationSlot, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, HorizontalBox_Condition, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, Image_ItemIcon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, Overlay_Loading, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, ProgressBar_Condition, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, SizeBox, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, TextBlock_Condition, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, TextBlock_ItemName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, TextBlock_ItemType, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, ItemClass, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, ItemClass_Name, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, IsSelected, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, UnknownData_0SLJ, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, SelectDelegate, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, IsCustomizable, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, HasCondition, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, UnknownData_TWNM, 0x0302);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, ItemJson, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, HoveredDelegate, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_Slot_C, UI_Customization, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Solder_Customization_Slot_C, 0x0328);
		}

		// class ABP_PG_PlayerState_Game_C : public APG_PlayerState_Game
		TEST_METHOD(BlueprintGeneratedClass__BP_PG_PlayerState_Game__BP_PG_PlayerState_Game_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_PlayerState_Game_C, DefaultSceneRoot, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PG_PlayerState_Game_C, 0x0390);
		}

		// class ABP_TeamBase_C : public ATeamBase
		TEST_METHOD(BlueprintGeneratedClass__BP_TeamBase__BP_TeamBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TeamBase_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TeamBase_C, Widget, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TeamBase_C, Billboard, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TeamBase_C, 0x0240);
		}

		// class UUI_SupportBox_Health_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_SupportBox_Health__UI_SupportBox_Health_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_SupportBox_Health_C, 0x0260);
		}

		// class UUdpMessagingSettings : public UObject
		TEST_METHOD(Class__UdpMessaging__UdpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnabledByDefault, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTransport, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bAutoRepair, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bStopServiceWhenAppDeactivates, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_04O0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnicastEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastEndpoint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MessageFormat, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastTimeToLive, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_VJJA, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, StaticEndpoints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTunnel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_2Z8I, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelUnicastEndpoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelMulticastEndpoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, RemoteTunnelEndpoints, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUdpMessagingSettings, 0x00A0);
		}

		// class UEditableMeshAdapter : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshAdapter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshAdapter, 0x0028);
		}

		// class UEditableGeometryCollectionAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableGeometryCollectionAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, OriginalGeometryCollection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollectionLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, UnknownData_OFOU, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGeometryCollectionAdapter, 0x00D8);
		}

		// class UEditableMesh : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_COWA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, Adapters, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_MDPW, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, TextureCoordinateCount, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_FABE, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, PendingCompactCounter, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, SubdivisionCount, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_QWS4, 0x0524);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMesh, 0x0708);
		}

		// class UEditableMeshFactory : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshFactory, 0x0028);
		}

		// class UEditableStaticMeshAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableStaticMeshAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, OriginalStaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMeshLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, UnknownData_ESTM, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableStaticMeshAdapter, 0x00E0);
		}

		// class UAnimNotify_PlayMontageNotify : public UAnimNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, NotifyName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0040);
		}

		// class UAnimNotify_PlayMontageNotifyWindow : public UAnimNotifyState
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, NotifyName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0038);
		}

		// class UAnimSequencerInstance : public UAnimInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequencerInstance, UnknownData_BBW0, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x02C0);
		}

		// class UKismetAnimationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0028);
		}

		// class UPlayMontageCallbackProxy : public UObject
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_UXWQ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x00A8);
		}

		// class USequencerAnimationSupport : public UInterface
		TEST_METHOD(Class__AnimGraphRuntime__SequencerAnimationSupport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequencerAnimationSupport, 0x0028);
		}

		// class UMovieSceneCaptureProtocolBase : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_TDTF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, State, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_UQKC, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolBase, 0x0058);
		}

		// class UMovieSceneAudioCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneAudioCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioCaptureProtocolBase, 0x0058);
		}

		// class UNullAudioCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__NullAudioCaptureProtocol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullAudioCaptureProtocol, 0x0058);
		}

		// class UMasterAudioSubmixCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MasterAudioSubmixCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, Filename, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, UnknownData_D657, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterAudioSubmixCaptureProtocol, 0x0090);
		}

		// class UMovieSceneImageCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneImageCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneImageCaptureProtocolBase, 0x0058);
		}

		// class UCompositionGraphCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, IncludeRenderPasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bCaptureFramesInHDR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_0CBO, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, HDRCompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, CaptureGamut, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_KXKR, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bDisableScreenPercentage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_ACY1, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterialPtr, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_XHCQ, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureProtocol, 0x00C0);
		}

		// class UFrameGrabberProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocol, UnknownData_4UHE, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocol, 0x0068);
		}

		// class UImageSequenceProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol, UnknownData_IYIK, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol, 0x00D8);
		}

		// class UCompressedImageSequenceProtocol : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompressedImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, CompressionQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, UnknownData_DULA, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompressedImageSequenceProtocol, 0x00E0);
		}

		// class UImageSequenceProtocol_BMP : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_BMP)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_BMP, 0x00D8);
		}

		// class UImageSequenceProtocol_PNG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_PNG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_PNG, 0x00E0);
		}

		// class UImageSequenceProtocol_JPG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_JPG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_JPG, 0x00E0);
		}

		// class UImageSequenceProtocol_EXR : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_EXR)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, bCompressed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, CaptureGamut, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, UnknownData_0O9Z, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_EXR, 0x00E8);
		}

		// class UMovieSceneCaptureInterface : public UInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0028);
		}

		// class UMovieSceneCapture : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_GZ0O, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocolType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocolType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocol, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_60JS, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_0VUC, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x0220);
		}

		// class ULevelCapture : public UMovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, bAutoStartCapture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_4WNM, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_95QQ, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0240);
		}

		// class UMovieSceneCaptureEnvironment : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0028);
		}

		// class UUserDefinedCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, UnknownData_CKSM, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedCaptureProtocol, 0x00D8);
		}

		// class UUserDefinedImageCaptureProtocol : public UUserDefinedCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedImageCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, Format, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, bEnableCompression, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, UnknownData_12GG, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, CompressionQuality, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedImageCaptureProtocol, 0x00E0);
		}

		// class UVideoCaptureProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, bUseCompression, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_BZAR, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, CompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_54D1, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureProtocol, 0x0080);
		}

		// class UMoviePlayerSettings : public UObject
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_B9MZ, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0040);
		}

		// class UMeshReconstructorBase : public UObject
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0028);
		}

		// class UMockDataMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MRMesh__MockDataMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, OnMeshTrackerUpdated, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, ScanWorld, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestNormals, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestVertexConfidence, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorMode, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_4149, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, BlockVertexColors, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UpdateInterval, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_ROHK, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, MRMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_8DXC, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMockDataMeshTrackerComponent, 0x0270);
		}

		// class UMRMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_SAL7, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, Material, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, WireframeMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bCreateMeshProxySections, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bUpdateNavMeshOnMeshUpdate, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bNeverCreateCollisionMesh, 0x0462);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_DIGD, 0x0463);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, CachedBodySetup, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_XX9L, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x0500);
		}

		// class UCustomMeshComponent : public UMeshComponent
		TEST_METHOD(Class__CustomMeshComponent__CustomMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_T7QQ, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_2IRC, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshComponent, 0x0480);
		}

		// class ABP_Item_Sniper_SVD_C : public AItem_Weapon_Sniper
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Sniper_SVD__BP_Item_Sniper_SVD_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Sniper_SVD_C, 0x03E0);
		}

		// class ABP_Item_Rifle_P90_C : public AItem_Weapon_Rifle
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Rifle_P90__BP_Item_Rifle_P90_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Rifle_P90_C, 0x03E0);
		}

		// class ABP_Item_Rifle_M16_C : public AItem_Weapon_Rifle
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Rifle_M16__BP_Item_Rifle_M16_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Rifle_M16_C, UberGraphFrame, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Rifle_M16_C, Sight, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Rifle_M16_C, 0x03F0);
		}

		// class ABP_Item_Pistol_Glock17_C : public AItem_Weapon_Pistol
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Pistol_Glock17__BP_Item_Pistol_Glock17_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Pistol_Glock17_C, 0x03E8);
		}

		// class ABP_Item_Skin_ScarH_07_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_ScarH_07__BP_Item_Skin_ScarH_07_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_ScarH_07_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_ScarH_07_C, 0x0290);
		}

		// class ABP_Item_Skin_Glock17_01_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_Glock17_01__BP_Item_Skin_Glock17_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_Glock17_01_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_Glock17_01_C, 0x0290);
		}

		// class ABP_Item_Skin_AK47_04_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_AK47_04__BP_Item_Skin_AK47_04_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_AK47_04_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_AK47_04_C, 0x0290);
		}

		// class ABP_Item_Optic_Acog_01_C : public AItem_Module_Optic
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Optic_Acog_01__BP_Item_Optic_Acog_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Optic_Acog_01_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Optic_Acog_01_C, Timer_SetAimingMesh, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Optic_Acog_01_C, 0x02A8);
		}

		// class UCameraShake_RifleShot_C : public UMatineeCameraShake
		TEST_METHOD(BlueprintGeneratedClass__CameraShake_RifleShot__CameraShake_RifleShot_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake_RifleShot_C, 0x0180);
		}

		// class UDeveloperSettings : public UObject
		TEST_METHOD(Class__DeveloperSettings__DeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_2WXI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0038);
		}

		// class UUWorksLibrary : public UUWorks
		TEST_METHOD(Class__UWorksUtilities__UWorksLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksLibrary, 0x0028);
		}

		// class UUWorksLibraryConversions : public UUWorksLibrary
		TEST_METHOD(Class__UWorksUtilities__UWorksLibraryConversions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksLibraryConversions, 0x0028);
		}

		// class UUWorksLibraryGameID : public UUWorksLibrary
		TEST_METHOD(Class__UWorksUtilities__UWorksLibraryGameID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksLibraryGameID, 0x0028);
		}

		// class UUWorksLibraryLex : public UUWorksLibrary
		TEST_METHOD(Class__UWorksUtilities__UWorksLibraryLex)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksLibraryLex, 0x0028);
		}

		// class UUWorksLibrarySteamID : public UUWorksLibrary
		TEST_METHOD(Class__UWorksUtilities__UWorksLibrarySteamID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksLibrarySteamID, 0x0028);
		}

		// class UUWorksLibraryTickets : public UUWorksLibrary
		TEST_METHOD(Class__UWorksUtilities__UWorksLibraryTickets)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksLibraryTickets, 0x0028);
		}

		// class UUWorksManager : public UUWorks
		TEST_METHOD(Class__UWorksUtilities__UWorksManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksManager, 0x0028);
		}

		// class UUWorksManagerNetwork : public UUWorksManager
		TEST_METHOD(Class__UWorksUtilities__UWorksManagerNetwork)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksManagerNetwork, UnknownData_HB1I, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUWorksManagerNetwork, RefreshComplete, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUWorksManagerNetwork, 0x0090);
		}

		// class UAudioCurveSourceComponent : public UAudioComponent
		TEST_METHOD(Class__FacialAnimation__AudioCurveSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_375W, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSourceBindingName, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSyncOffset, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_WGIW, 0x0874);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCurveSourceComponent, 0x08A0);
		}

		// class UUI_PremiumShop_Skin_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_PremiumShop_Skin__UI_PremiumShop_Skin_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Skin_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Skin_C, WrapBox, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_PremiumShop_Skin_C, 0x0270);
		}

		// class UUI_Squad_PlayerSlot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Squad_PlayerSlot__UI_Squad_PlayerSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_PlayerSlot_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_PlayerSlot_C, Button, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_PlayerSlot_C, Image_Ready_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_PlayerSlot_C, Image_Ready_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_PlayerSlot_C, TextBlock_NumberSlot, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_PlayerSlot_C, TextBlock_PlayerName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_PlayerSlot_C, NumberSlot, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_PlayerSlot_C, UnknownData_4RKB, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_PlayerSlot_C, OnClickDelegate, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_PlayerSlot_C, IsFree, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Squad_PlayerSlot_C, 0x02A9);
		}

		// class UUI_Counter_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Counter__UI_Counter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Counter_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Counter_C, Hovered, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Counter_C, Button, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Counter_C, Image_Icon, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Counter_C, TextBlock_Counter, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Counter_C, Icon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Counter_C, IsPremium, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Counter_C, UnknownData_KTBX, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Counter_C, OnClickDelegate, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Counter_C, 0x02A8);
		}

		// class ABP_RedLine_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_RedLine__BP_RedLine_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RedLine_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RedLine_C, Spline, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RedLine_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RedLine_C, Close_, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RedLine_C, Team, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_RedLine_C, 0x023A);
		}

		// class UMovieSceneGeometryCacheSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheSection, Params, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheSection, 0x0128);
		}

		// class UMovieSceneGeometryCacheTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, UnknownData_E1T1, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, AnimationSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheTrack, 0x0090);
		}

		// class UAutomationUtilsBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AutomationUtils__AutomationUtilsBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationUtilsBlueprintLibrary, 0x0028);
		}

		// class UTcpMessagingSettings : public UObject
		TEST_METHOD(Class__TcpMessaging__TcpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_MZ0H, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ListenEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectToEndpoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectionRetryDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, bStopServiceWhenAppDeactivates, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_T70D, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTcpMessagingSettings, 0x0058);
		}

		// class UHandlerComponentFactory : public UObject
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0028);
		}

		// class UPacketHandlerProfileConfig : public UObject
		TEST_METHOD(Class__PacketHandler__PacketHandlerProfileConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPacketHandlerProfileConfig, Components, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPacketHandlerProfileConfig, 0x0038);
		}

		// class ABP_PG_Character_Blue_C : public ABP_PG_Character_General_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PG_Character_Blue__BP_PG_Character_Blue_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PG_Character_Blue_C, UberGraphFrame, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PG_Character_Blue_C, 0x0638);
		}

		// class UUI_Chat_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Chat__UI_Chat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, HiddenChat, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, Border, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, Button_CloseChat, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, Button_MessageType, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, EditableText_Message, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, ScrollBox_Chat, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, ScrollBox_Message, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, TextBlock_MessageType, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, WidgetSwitcher_Main, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, PlayerState, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, ChatIsOpened, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, UnknownData_T7WX, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, Timer_PlayAnimation, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, Timer_HiddenChat, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, MessageType, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Chat_C, IsShowedMouseCursor, 0x02D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Chat_C, 0x02D2);
		}

		// class UUI_UpgradeLevelOfPlayer_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_UpgradeLevelOfPlayer__UI_UpgradeLevelOfPlayer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_UpgradeLevelOfPlayer_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_UpgradeLevelOfPlayer_C, DisplayNewLevel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_UpgradeLevelOfPlayer_C, Image_NewLevelIcon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_UpgradeLevelOfPlayer_C, Lines, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_UpgradeLevelOfPlayer_C, LinesRainbow, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_UpgradeLevelOfPlayer_C, TextBlock_NewLevel, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_UpgradeLevelOfPlayer_C, 0x0290);
		}

		// class UGameInstance : public UObject
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_5XRK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnlineSession, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, ReferencedObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_I6S8, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnPawnControllerChangedDelegates, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_E3V2, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x01A8);
		}

		// class USubsystem : public UObject
		TEST_METHOD(Class__Engine__Subsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsystem, UnknownData_VYT7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystem, 0x0030);
		}

		// class UGameInstanceSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__GameInstanceSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstanceSubsystem, 0x0030);
		}

		// class UBlueprintFunctionLibrary : public UObject
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0028);
		}

		// class UActorComponent : public UObject
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_79M8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_TL8O, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSSerializationIndex, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_KNRB, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CreationMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentActivated, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentDeactivated, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_MLES, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSModifiedProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_NDZ3, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x00B0);
		}

		// class UBlueprintAsyncActionBase : public UObject
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintAsyncActionBase, UnknownData_6HA8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0030);
		}

		// class UPlayer : public UObject
		TEST_METHOD(Class__Engine__Player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_VVXR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_UA8T, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0048);
		}

		// class UNetConnection : public UPlayer
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_S7U8, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PlayerId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_1F9O, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_FMZH, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_1E58, 0x1528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x1AF0);
		}

		// class UNetDriver : public UObject
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_7MZ1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClassName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_YGAG, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxNetTickRate, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNeverApplyNetworkEmulationSettings, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_4YVV, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_XKMP, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RecentlyDisconnectedTrackingTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_ICEJ, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, WorldPackage, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_6QR7, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_M1JA, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitions, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitionMap, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ActorChannelPool, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_BPLW, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_HY58, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriver, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_NUOY, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0748);
		}

		// class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0030);
		}

		// class AActor : public UObject
		TEST_METHOD(Class__Engine__Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UpdateOverlapsMethodDuringLevelStreaming, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, DefaultUpdateOverlapsMethodDuringLevelStreaming, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_E73V, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SpawnCollisionHandlingMethod, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputPriority, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, MinNetUpdateFrequency, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_AHUA, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Instigator, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_HXME, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponent, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_QRGS, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeRadialDamage, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x0186);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x0187);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x018B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x018E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x018F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_KRLI, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InstanceComponents, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, BlueprintCreatedComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_3WEM, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0220);
		}

		// class UOnlineEngineInterface : public UObject
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0028);
		}

		// class UOnlineSession : public UObject
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0028);
		}

		// class USceneComponent : public UActorComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_08UA, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_8DEO, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_VN7X, 0x014E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x014F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_LA1L, 0x0152);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x01F8);
		}

		// class UDynamicSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__DynamicSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicSubsystem, 0x0030);
		}

		// class UEngineSubsystem : public UDynamicSubsystem
		TEST_METHOD(Class__Engine__EngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineSubsystem, 0x0030);
		}

		// class AController : public AActor
		TEST_METHOD(Class__Engine__Controller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_Q9RI, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_3FYD, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_LETI, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, TransformComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_V6DN, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_0KKG, 0x0295);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x0298);
		}

		// class APlayerController : public AController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_93TL, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_CW28, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SmoothTargetViewRotationSpeed, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_EAQ3, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenPrimitiveComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_OK76, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncLocation, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncRotation, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_CULS, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_HSN8, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_H9S2, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_AF7W, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_V6TX, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_MGXX, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ForceFeedbackScale, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClickEventKeys, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x0453);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HitResultTraceDistance, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_M471, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_2YVQ, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_PURD, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_PK0F, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bIsLocalPlayerController, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_RY2I, 0x0555);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_MKKF, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x0570);
		}

		// class UPrimitiveComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_RC42, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightmapType, 0x020F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCustomNavigableGeometry, 0x0217);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_0JUW, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightingChannels, 0x021A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilWriteMask, 0x021B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveDataInternal, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_0MTT, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, RuntimeVirtualTextures, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureLodBias, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureCullMips, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureMinCoverage, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureRenderPassType, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_RR7K, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_YPVI, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_8KKR, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreActors, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreComponents, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_U81A, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentWake, 0x0413);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentSleep, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_UUP1, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x0416);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x0417);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x041B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_V7VS, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LODParentPrimitive, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x0440);
		}

		// class UMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_97N1, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_8R68, 0x0461);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x0468);
		}

		// class USkinnedMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_G15A, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkinCacheUsage, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VertexOffsetUsage, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_AY92, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_58SD, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_21PV, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_9KNM, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VisibilityBasedAnimTickOption, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_WR0V, 0x05F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_X5E2, 0x05FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_YBWX, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldSpaceBounds, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_AXW1, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldToLocalTransform, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_PH0Z, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x0690);
		}

		// class UStreamableRenderAsset : public UObject
		TEST_METHOD(Class__Engine__StreamableRenderAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_X7MK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, ForceMipLevelsToBeResidentTimestamp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, NumCinematicMipLevels, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, StreamingIndex, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, CachedCombinedLODBias, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_TI15, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamableRenderAsset, 0x0060);
		}

		// class USkeletalMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_W231, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_1NJJ, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MinLOD, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, DisableBelowMinLodStripping, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_D42H, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SamplingInfo, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_PSIT, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkinWeightProfiles, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x0398);
		}

		// class UCommandlet : public UObject
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_CROS, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0080);
		}

		// class UShapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_0K0P, 0x0455);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0458);
		}

		// class UBoxComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, LineThickness, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, UnknownData_AVGB, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x0470);
		}

		// class ABrush : public AActor
		TEST_METHOD(Class__Engine__Brush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_1AZX, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_8WR6, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_WKFC, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x0258);
		}

		// class AVolume : public ABrush
		TEST_METHOD(Class__Engine__Volume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x0258);
		}

		// class APhysicsVolume : public AVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_1G5X, 0x0265);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x0268);
		}

		// class USplineComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineCurves, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineRotInfo, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineScaleInfo, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_JCDA, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bSplineHasBeenEdited, 0x051D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bModifiedByConstructionScript, 0x051E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bInputSplinePointsToConstructionScript, 0x051F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bDrawDebug, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bClosedLoop, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bLoopPositionOverride, 0x0522);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_CAFZ, 0x0523);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, LoopPosition, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, DefaultUpVector, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_N9VL, 0x0534);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x0538);
		}

		// class USplineMetadata : public UObject
		TEST_METHOD(Class__Engine__SplineMetadata)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMetadata, 0x0028);
		}

		// class UWorldSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__WorldSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldSubsystem, 0x0030);
		}

		// class UFXSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__FXSystemComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemComponent, 0x0440);
		}

		// class UFXSystemAsset : public UObject
		TEST_METHOD(Class__Engine__FXSystemAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, MaxPoolSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, PoolPrimeSize, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemAsset, 0x0030);
		}

		// class UAnimNotify : public UObject
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_3LHJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0038);
		}

		// class UAnimNotifyState : public UObject
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_N0CM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0030);
		}

		// class USoundBase : public UObject
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_TTLR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, VirtualizationMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_3ODS, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencySet, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxDistance, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, TotalSamples, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Priority, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ModulationSettings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, PreEffectBusSends, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AssetUserData, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x01B8);
		}

		// class USoundCue : public USoundBase
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_8K16, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_BVP2, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_88L3, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, CookedQualityIndex, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_VYJU, 0x0581);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0590);
		}

		// class USkeletalMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimClass, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PostProcessAnimInstance, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_UZFG, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_H41Q, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LinkedInstances, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedBoneSpaceTransforms, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedComponentSpaceTransforms, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_K6RD, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PhysicsTransformUpdateMode, 0x08A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_8SYU, 0x08A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x08A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_24DC, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_ITZ8, 0x08AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_AMU1, 0x08B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedAnimCurveUidVersion, 0x08B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MassMode, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_CQMO, 0x08B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UniformMass, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TotalMass, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, Density, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MinPerParticleMass, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, EdgeStiffness, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BendingStiffness, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AreaStiffness, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, VolumeStiffness, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, StrainLimitingStiffness, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ShapeTargetStiffness, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, bWaitForParallelClothTask, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_G92H, 0x08E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DisallowedAnimCurves, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_HT55, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingSimulationFactory, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_LCAI, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_MMNI, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickFrame, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_IBD5, 0x0A0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingInteractor, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_8851, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnAnimInitialized, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_11CT, 0x0B40);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0ED0);
		}

		// class UAnimInstance : public UObject
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, RootMotionMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_VKQW, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageStarted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnAllMontageInstancesEnded, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_QP2X, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, NotifyQueue, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, ActiveAnimNotifyState, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_AJI7, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x02B8);
		}

		// class UAudioComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_D7TR, 0x021B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerAttackTime, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerReleaseTime, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Priority, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_T2M2, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SourceEffectChain, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_EM44, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySet, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_MLIX, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachLocationRule, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachRotationRule, 0x0675);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachScaleRule, 0x0676);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_FR6H, 0x0677);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ModulationRouting, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlayStateChanged, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_NPKJ, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioVirtualizationChanged, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_MB4B, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_YVV0, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_A8KS, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioSingleEnvelopeValue, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_FINI, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioMultiEnvelopeValue, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_NDZT, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachParent, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachSocketName, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_SW2H, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x0860);
		}

		// class UAssetImportData : public UObject
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0028);
		}

		// class UAssetUserData : public UObject
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0028);
		}

		// class UCameraShakeBase : public UObject
		TEST_METHOD(Class__Engine__CameraShakeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, bSingleInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, UnknownData_Z010, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, ShakeScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, CameraManager, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, UnknownData_DUL0, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeBase, 0x0098);
		}

		// class APawn : public AActor
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_2QX0, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_NH2O, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessPlayer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessAI, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_2OFC, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_6EQL, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_Q5O1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_L0Y7, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x0280);
		}

		// class ACharacter : public APawn
		TEST_METHOD(Class__Engine__Character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, AnimRootMotionTranslationScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_E3P8, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseRotationOffset, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplayLastTransformUpdateTimeStamp, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_1LB4, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_MQMX, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpForceTimeRemaining, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ProxyJumpForceStartedTime, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxCount, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCount, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCountPreJump, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_Z2X3, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnReachedJumpApex, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_BTVB, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, MovementModeChangedDelegate, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, SavedRootMotion, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x04B8);
		}

		// class UMovementComponent : public UActorComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_GLIL, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_BCNJ, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_V1KV, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x00F0);
		}

		// class UNavMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_T7HV, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, PathFollowingComp, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0130);
		}

		// class UPawnMovementComponent : public UNavMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0138);
		}

		// class UCharacterMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_BVXO, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_6GC5, 0x016B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_O7B5, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingSubStepTime, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_YWZV, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_1APA, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientGoodMoveAckTime, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientAdjustmentTime, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_H3TX, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxJumpApexAttemptsPerSimulation, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAckGoodMoves, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustments, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkLargeClientCorrectionDistance, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x038A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_UAW9, 0x038F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_UHBD, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_W3QM, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_P7F0, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_0ZGI, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerCorrectionRootMotion, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_UDJ6, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_PVIP, 0x0ADC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0B00);
		}

		// class UDataAsset : public UObject
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0030);
		}

		// class USoundEffectPreset : public UObject
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_MHHN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0068);
		}

		// class USoundEffectSourcePreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0068);
		}

		// class USoundEffectSubmixPreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0068);
		}

		// class AInfo : public AActor
		TEST_METHOD(Class__Engine__Info)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0220);
		}

		// class AGameModeBase : public AInfo
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, OptionsString, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSessionClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameStateClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerControllerClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerStateClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, HUDClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPawnClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, SpectatorClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ReplaySpectatorPlayerControllerClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicatorClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSession, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameState, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicator, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPlayerName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, UnknownData_FKWD, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameModeBase, 0x02C0);
		}

		// class AGameMode : public AGameModeBase
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_NEBM, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumPlayers, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MaxInactivePlayers, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, bHandleDedicatedServerReplays, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_YQEJ, 0x0301);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0308);
		}

		// class AGameStateBase : public AInfo
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, GameModeClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, AuthorityGameMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, SpectatorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, PlayerArray, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, bReplicatedHasBegunPlay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_U9E6, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ReplicatedWorldTimeSeconds, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsDelta, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_PRQT, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameStateBase, 0x0270);
		}

		// class AGameState : public AGameStateBase
		TEST_METHOD(Class__Engine__GameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_AMVP, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x0290);
		}

		// class APlayerState : public AInfo
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Score, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Ping, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_M6HU, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_5HML, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, StartTime, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_ITY2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, SavedNetworkAddress, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueId, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_QCWF, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PawnPrivate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_AALF, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerNamePrivate, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_KSUI, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x0320);
		}

		// class ASkyLight : public AInfo
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_KCTP, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0230);
		}

		// class UTexture : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__Texture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_02JN, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LightingGuid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, MipLoadOptions, 0x007E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x007F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Downscale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, DownscaleOptions, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_F3P4, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, AssetUserData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_5T3G, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00D8);
		}

		// class UTextureCube : public UTexture
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_V6LI, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0130);
		}

		// class UStaticMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_S3F6, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLOD, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_OX1I, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x04D0);
		}

		// class UInstancedStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumCustomDataFloats, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_35UI, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMCustomData, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_U9WP, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_TL0U, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_ARGO, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_JNTJ, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x0580);
		}

		// class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_R5ET, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_CE1U, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_0B49, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_IAGC, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, InstanceCountToRender, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_0ODZ, 0x0618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0668);
		}

		// class AStaticMeshActor : public AActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, NavigationGeometryGatheringMode, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_DFFM, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0230);
		}

		// class UMaterialInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_40JO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_1NN8, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, TextureStreamingData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_VKCF, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0088);
		}

		// class UMaterialInstance : public UMaterialInterface
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysicalMaterialMap, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_K6D4, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, RuntimeVirtualTextureParameterValues, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_O296, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, StaticParameters, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedLayerParameters, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedReferencedTextures, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_KQG7, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x0360);
		}

		// class UMaterialInstanceConstant : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceConstant, PhysMaterialMask, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x0368);
		}

		// class UMaterialExpression : public UObject
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_P7QV, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0040);
		}

		// class UMaterialExpressionCustomOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0040);
		}

		// class UEngineCustomTimeStep : public UObject
		TEST_METHOD(Class__Engine__EngineCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineCustomTimeStep, 0x0028);
		}

		// class UTimecodeProvider : public UObject
		TEST_METHOD(Class__Engine__TimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, FrameDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, UnknownData_NEKI, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimecodeProvider, 0x0030);
		}

		// class UDynamicBlueprintBinding : public UObject
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0028);
		}

		// class UBlueprintGeneratedClass : public UClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_6W5I, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentClassOverrides, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFramePointerProperty, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_JKZY, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_BM7E, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x0328);
		}

		// class ACameraActor : public AActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_AOUL, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, SceneComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_Z91U, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_4Q39, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x07A0);
		}

		// class UCameraComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_HVRP, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_EZIE, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_UG01, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x07C0);
		}

		// class USoundWave : public USoundBase
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRateQuality, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_ILOR, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x01C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LoadingBehavior, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_XTSZ, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, FrequenciesToAnalyze, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedSpectralTimeData, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedEnvelopeTimeData, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InitialChunkSize, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_I5ZZ, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_K9MG, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_8VGG, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0370);
		}

		// class USoundWaveProcedural : public USoundWave
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_16FP, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x03C0);
		}

		// class AVolumetricLightmapDensityVolume : public AVolume
		TEST_METHOD(Class__Engine__VolumetricLightmapDensityVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricLightmapDensityVolume, AllowedMipLevelRange, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricLightmapDensityVolume, 0x0260);
		}

		// class AWindDirectionalSource : public AInfo
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0228);
		}

		// class UWindDirectionalSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_C4TJ, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Radius, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_7BZC, 0x020D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x0220);
		}

		// class UWorldComposition : public UObject
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_X3AJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_MLB4, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0068);
		}

		// class UHierarchicalLODSetup : public UObject
		TEST_METHOD(Class__Engine__HierarchicalLODSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, HierarchicalLODSetup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, OverrideBaseMaterial, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalLODSetup, 0x0060);
		}

		// class AWorldSettings : public AInfo
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_XDD6, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_6Y3S, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfigOverride, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultPhysicsVolumeClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_H5VL, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MonoCullingDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TimeDilation, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DemoPlayTimeDilation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinGlobalTimeDilation, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGlobalTimeDilation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinUndilatedFrameTime, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxUndilatedFrameTime, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BroadphaseSettings, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_MQG3, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ReplicationViewers, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PauserPlayerState, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxNumberOfBookmarks, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_PJGT, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBookmarkClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookmarkArray, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LastBookmarkClass, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x03A0);
		}

		// class UBlueprintCore : public UObject
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_0MU7, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_S5GR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0050);
		}

		// class UBlueprint : public UBlueprintCore
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_QO86, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentClassOverrides, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00A0);
		}

		// class UModel : public UObject
		TEST_METHOD(Class__Engine__Model)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_L2GO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x0258);
		}

		// class UChannel : public UObject
		TEST_METHOD(Class__Engine__Channel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_35VZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0070);
		}

		// class UActorChannel : public UChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_QPEW, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, CreateSubObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_9RN0, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0298);
		}

		// class UAnimationAsset : public UObject
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_G7JI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_0E1H, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0080);
		}

		// class UBlendSpaceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_QKV1, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_4JIM, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_3VCV, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_FJ3B, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0148);
		}

		// class UBlendSpace : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_3Z0Q, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0150);
		}

		// class UAimOffsetBlendSpace : public UBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0150);
		}

		// class UBlendSpace1D : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_OJ98, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0150);
		}

		// class UAimOffsetBlendSpace1D : public UBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0150);
		}

		// class UAISystemBase : public UObject
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_MMSW, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_OBK8, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0058);
		}

		// class AAmbientSound : public AActor
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0228);
		}

		// class UAnimationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_HA02, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTickAnimationOnSkeletalMeshInit, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_G73I, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, BoneCustomAttributesNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, BoneNamesWithCustomAttributes, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, AttributeBlendModes, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, DefaultAttributeBlendMode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_WQ3F, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x00D0);
		}

		// class UAnimBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_X9MU, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_ACHP, 0x00C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x00C8);
		}

		// class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_VODF, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndicesMap, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_DU5X, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, EvaluateGraphExposedInputs, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphAssetPlayerInformation, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphBlendOptions, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, PropertyAccessLibrary, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x05B0);
		}

		// class UAnimBoneCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionCodec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionCodec, Description, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionCodec, 0x0038);
		}

		// class UAnimBoneCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionSettings, Codecs, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionSettings, 0x0038);
		}

		// class UAnimClassData : public UObject
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_H5TO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndicesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctions, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctionData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_2GGW, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimGraphNodeProperties, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_KY1O, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimLayerNodeProperties, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_IL3W, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PreUpdateNodeProperties, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_CXU4, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, DynamicResetNodeProperties, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_8L18, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, StateMachineNodeProperties, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_MZQD, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, InitializationNodeProperties, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_VSAV, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphNameAssetPlayers, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, EvaluateGraphExposedInputs, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphBlendOptions, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PropertyAccessLibrary, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x0330);
		}

		// class UAnimClassInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0028);
		}

		// class UAnimSequenceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00A8);
		}

		// class UAnimCompositeBase : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00A8);
		}

		// class UAnimComposite : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00B8);
		}

		// class UAnimCompress : public UAnimBoneCompressionCodec
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_E8LT, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_MDNJ, 0x003F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0040);
		}

		// class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0040);
		}

		// class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0040);
		}

		// class UAnimCompress_RemoveLinearKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_UC6I, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0060);
		}

		// class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_IBB2, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_SK0Z, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_QIZN, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_X7P0, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00D8);
		}

		// class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_CLJI, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0048);
		}

		// class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_B0WQ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0050);
		}

		// class UAnimCurveCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec, 0x0028);
		}

		// class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_CompressedRichCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_CompressedRichCurve, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformIndexable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformIndexable, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformlySampled)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformlySampled, 0x0028);
		}

		// class UAnimCurveCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCurveCompressionSettings, Codec, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionSettings, 0x0030);
		}

		// class UAnimLayerInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimLayerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimLayerInterface, 0x0028);
		}

		// class UAnimMetaData : public UObject
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0028);
		}

		// class UParticleModule : public UObject
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_3I46, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0030);
		}

		// class UParticleModuleBeamBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0030);
		}

		// class UParticleModuleBeamModifier : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_G6Q3, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_Q361, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_NIJO, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0108);
		}

		// class UParticleModuleBeamNoise : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_1A4U, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_3Y2C, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_SW7H, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_C3GL, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_9PDI, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_UO9S, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_DN6Y, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_N5EN, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x0190);
		}

		// class UParticleModuleBeamSource : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_WJ3M, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_JY03, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_QWU3, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_UCFQ, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_RW80, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_KLMR, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0118);
		}

		// class UParticleModuleBeamTarget : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_9GOM, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_3PER, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_DBUD, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_URIX, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_J0QM, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_NPZS, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_MUOL, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0120);
		}

		// class UParticleModuleCameraBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0030);
		}

		// class UParticleModuleCameraOffset : public UParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_0KPY, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_CJRR, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0068);
		}

		// class UParticleModuleCollisionBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0030);
		}

		// class UParticleModuleCollision : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_ULWE, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_UWQN, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_FC39, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_GLTQ, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_M128, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_PE89, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x0190);
		}

		// class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, response, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_IE3R, 0x00A6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00A8);
		}

		// class UParticleModuleColorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0030);
		}

		// class UParticleModuleColor : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_YBO0, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00B0);
		}

		// class UParticleModuleColor_Seeded : public UParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00D0);
		}

		// class UParticleModuleColorOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_TPUA, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00B0);
		}

		// class UAnimMontage : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_WE9V, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_F01I, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableAutoBlendOut, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x017B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_I2UP, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01D0);
		}

		// class UAnimNotify_PauseClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PauseClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PauseClothingSimulation, 0x0038);
		}

		// class UAnimNotify_PlayParticleEffect : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_9R73, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_GJBG, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_RK1S, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// class UAnimNotify_PlaySound : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_2W1S, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_2I01, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0058);
		}

		// class UAnimNotify_ResetClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0038);
		}

		// class UAnimNotify_ResetDynamics : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetDynamics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetDynamics, 0x0038);
		}

		// class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResumeClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResumeClothingSimulation, 0x0038);
		}

		// class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0030);
		}

		// class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_0YIM, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0060);
		}

		// class UAnimNotifyState_Trail : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_0PA8, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_TJQ2, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0058);
		}

		// class UAnimSequence : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_F2XQ, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_I7L1, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BoneCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, CurveCompressionSettings, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_Z1FE, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_W9XC, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x016E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x016F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bUseNormalizedRootMotionScale, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_10YV, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_6Z62, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BakedPerBoneCustomAttributeData, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x01B0);
		}

		// class UAnimSet : public UObject
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_PZ5Y, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_A0X9, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F0);
		}

		// class UAnimSingleNodeInstance : public UAnimInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x02D0);
		}

		// class UAnimStateMachineTypes : public UObject
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0028);
		}

		// class UAnimStreamable : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, Interpolation, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_HELS, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RetargetSource, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_S3GZ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, BoneCompressionSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, CurveCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bEnableRootMotion, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RootMotionRootLock, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bForceRootLock, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bUseNormalizedRootMotionScale, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_DW90, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStreamable, 0x00E0);
		}

		// class UApplicationLifecycleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationShouldUnloadResourcesDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationReceivedStartupArgumentsDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnTemperatureChangeDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnLowPowerModeDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0140);
		}

		// class UArrowComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowLength, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_64BT, 0x0451);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x0460);
		}

		// class UAssetExportTask : public UObject
		TEST_METHOD(Class__Engine__AssetExportTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Exporter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bSelected, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bReplaceIdentical, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bPrompt, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bAutomated, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bUseFileArchive, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bWriteEmptyFiles, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, UnknownData_CX08, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, IgnoreObjectList, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Options, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Errors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetExportTask, 0x0078);
		}

		// class UAssetManager : public UObject
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_EG3E, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x02D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x02D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsPrimaryAssetDirectoryCurrent, 0x02D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bHasCompletedInitialScan, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_OOKW, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x0458);
		}

		// class UAssetManagerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, CustomPrimaryAssetRules, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldManagerDetermineTypeAndName, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_CRRU, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, MetaDataTagsForAssetRegistry, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x0100);
		}

		// class UAssetMappingTable : public UObject
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0038);
		}

		// class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionHandleSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, Completed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, UnknownData_BGJA, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, SaveGameObject, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionHandleSaveGame, 0x0068);
		}

		// class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_7J7S, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0078);
		}

		// class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0088);
		}

		// class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0088);
		}

		// class AAtmosphericFog : public AInfo
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0228);
		}

		// class UAtmosphericFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_X4AD, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_3P50, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_KNU9, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x0300);
		}

		// class UAudioBus : public UObject
		TEST_METHOD(Class__Engine__AudioBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, AudioBusChannels, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, bIsAutomatic, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, UnknownData_S9RW, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioBus, 0x0030);
		}

		// class UAudioSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultMediaSoundClassName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MasterSubmix, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, ReverbSubmix, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, EQSubmix, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSampleRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_JNEH, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMinPitchScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMaxPitchScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_MK63, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_MMXW, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, NumStoppingSources, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, PanningMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MonoChannelUpmixMethod, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_W1KY, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_VJS8, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x0148);
		}

		// class AAudioVolume : public AVolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Priority, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_CXJP, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, AmbientZoneSettings, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_3G9D, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, SubmixSendSettings, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, SubmixOverrideSettings, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioVolume, 0x02C8);
		}

		// class UAutoDestroySubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__AutoDestroySubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, UnknownData_MR7H, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, ActorsToPoll, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoDestroySubsystem, 0x0048);
		}

		// class UAutomationTestSettings : public UObject
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MapsToPIETest, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, PIETestDuration, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, UnknownData_CN2J, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0340);
		}

		// class UAvoidanceManager : public UObject
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_TB70, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_JMOI, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00E0);
		}

		// class ABandwidthTestActor : public AActor
		TEST_METHOD(Class__Engine__BandwidthTestActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABandwidthTestActor, BandwidthGenerator, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABandwidthTestActor, 0x0240);
		}

		// class UBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_BKCU, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x045C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x0460);
		}

		// class UBlendableInterface : public UInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0028);
		}

		// class USkeleton : public UObject
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_YULB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_5HEZ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_4A62, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_JJ39, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_DYVN, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x0368);
		}

		// class UBlendProfile : public UObject
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_6D5L, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0048);
		}

		// class ABlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x0258);
		}

		// class UBlueprintExtension : public UObject
		TEST_METHOD(Class__Engine__BlueprintExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintExtension, 0x0028);
		}

		// class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0028);
		}

		// class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPathsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPathsLibrary, 0x0028);
		}

		// class UPlatformGameInstance : public UGameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationShouldUnloadResourcesDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedStartupArgumentsDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x0278);
		}

		// class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0028);
		}

		// class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0028);
		}

		// class UBodySetup : public UBodySetupCore
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_Y968, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_YHTV, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_58XJ, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_HE80, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x02A0);
		}

		// class UBoneMaskFilter : public UObject
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0038);
		}

		// class UBookmarkBase : public UObject
		TEST_METHOD(Class__Engine__BookmarkBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookmarkBase, 0x0028);
		}

		// class UBookMark : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0050);
		}

		// class UBookMark2D : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_LGH1, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0038);
		}

		// class UBoundsCopyComponent : public UActorComponent
		TEST_METHOD(Class__Engine__BoundsCopyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, BoundsSourceActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bUseCollidingComponentsForSourceBounds, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bKeepOwnBoundsScale, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bUseCollidingComponentsForOwnBounds, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, UnknownData_4475, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, PostTransform, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyXBounds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyYBounds, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyZBounds, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, UnknownData_W4W9, 0x0113);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoundsCopyComponent, 0x0120);
		}

		// class AReflectionCapture : public AActor
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0228);
		}

		// class ABoxReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0228);
		}

		// class UReflectionCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MobileReflectionCompression, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_3Y7U, 0x0202);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Brightness, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, bModifyMaxValueRGBM, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_8QBC, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MaxValueRGBM, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MapBuildDataId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_QO08, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CachedEncodedHDRCubemap, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_VXFP, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x0270);
		}

		// class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, BoxTransitionDistance, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_WBQG, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_IZE3, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x0290);
		}

		// class UBreakpoint : public UObject
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_LJ04, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_CBM3, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0040);
		}

		// class UBrushBuilder : public UObject
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, ToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_UU2H, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_ACK1, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0080);
		}

		// class UBrushComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0450);
		}

		// class ABrushShape : public ABrush
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x0258);
		}

		// class UButtonStyleAsset : public UObject
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x02A0);
		}

		// class UCameraAnim : public UObject
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_D6J7, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_QIFH, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_YRIV, 0x05B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x05C0);
		}

		// class UCameraAnimInst : public UObject
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_OP0D, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_UEJZ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_0G9P, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0110);
		}

		// class ACameraBlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x0258);
		}

		// class UCameraModifier : public UObject
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_B7OB, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_58PT, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_0ZDM, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0048);
		}

		// class UCameraModifier_CameraShake : public UCameraModifier
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ExpiredPooledShakesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_QGNC, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x00B0);
		}

		// class UMatineeCameraShake : public UCameraShakeBase
		TEST_METHOD(Class__Engine__MatineeCameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_7J5B, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillationBlendInTime, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillationBlendOutTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, RotOscillation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, LocOscillation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, FOVOscillation, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimPlayRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimScale, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimBlendInTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimBlendOutTime, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, RandomAnimSegmentDuration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_21OE, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, Anim, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_3YX6, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillatorTimeRemaining, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimInst, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_3VA6, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeCameraShake, 0x0180);
		}

		// class ACameraShakeSourceActor : public AActor
		TEST_METHOD(Class__Engine__CameraShakeSourceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraShakeSourceActor, CameraShakeSourceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraShakeSourceActor, 0x0228);
		}

		// class UCameraShakeSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraShakeSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_4S90, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, InnerAttenuationRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, OuterAttenuationRadius, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_646S, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, CameraShake, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, bAutoStart, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_4ELZ, 0x0211);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeSourceComponent, 0x0220);
		}

		// class UCanvas : public UObject
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_CY4Z, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_LOXN, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_0GVG, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02D0);
		}

		// class UTextureRenderTarget : public UTexture
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_AOWJ, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00E0);
		}

		// class UTextureRenderTarget2D : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsSamplerFilter, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressU, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressV, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_SJHG, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x0108);
		}

		// class UCanvasRenderTarget2D : public UTextureRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, World, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_LSZF, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0128);
		}

		// class UCapsuleComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_Q59Q, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x045C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x0460);
		}

		// class UCheatManager : public UObject
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_YHPW, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0078);
		}

		// class UCheckBoxStyleAsset : public UObject
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x05A8);
		}

		// class UChildActorComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_K4I9, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0230);
		}

		// class UChildConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x1AF8);
		}

		// class USlateBrushAsset : public UObject
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00B0);
		}

		// class USlateTextureAtlasInterface : public UInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0028);
		}

		// class USmokeTestCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0080);
		}

		// class USoundAttenuation : public UObject
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x03C8);
		}

		// class USoundClass : public UObject
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x00D0);
		}

		// class UPlatformInterfaceBase : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0038);
		}

		// class UCloudStorageBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_HQSE, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0050);
		}

		// class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionThinTranslucentMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, TransmittanceColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, UnknownData_4954, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionThinTranslucentMaterialOutput, 0x0058);
		}

		// class UMaterialExpressionTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_5WR8, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0048);
		}

		// class UMaterialExpressionTransform : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_ZCTE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_0XHD, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x0058);
		}

		// class UMaterialExpressionTransformPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_SK39, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_XUU4, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x0058);
		}

		// class UMaterialExpressionTruncate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, UnknownData_ZF7P, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0058);
		}

		// class UMaterialExpressionTwoSidedSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0040);
		}

		// class UMaterialExpressionVectorNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_SN4A, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_UJJK, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Quality, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_DLSI, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_UPM0, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x0068);
		}

		// class UMaterialExpressionVertexColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0040);
		}

		// class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_A5ZN, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x0060);
		}

		// class UMaterialExpressionVertexNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0040);
		}

		// class UMaterialExpressionVertexTangentWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexTangentWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexTangentWS, 0x0040);
		}

		// class UMaterialExpressionViewProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_HL9Z, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0048);
		}

		// class UMaterialExpressionViewSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0040);
		}

		// class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVirtualTextureFeatureSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, No, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_SYOU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, Yes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_01VJ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVirtualTextureFeatureSwitch, 0x0068);
		}

		// class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVolumetricAdvancedMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVolumetricAdvancedMaterialInput, 0x0040);
		}

		// class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVolumetricAdvancedMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_QQ4W, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_W7CH, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_2UPH, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringContribution, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_H344, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringOcclusion, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_QTIG, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringEccentricity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_OF8T, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConservativeDensity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_YE1O, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseG, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseG2, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseBlend, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PerSamplePhaseEvaluation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_67S2, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringApproximationOctaveCount, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringContribution, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringOcclusion, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringEccentricity, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bGroundContribution, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bGrayScaleMaterial, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bRayMarchVolumeShadow, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_3DKT, 0x00EF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, 0x00F0);
		}

		// class UMaterialExpressionWorldPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_4UEG, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0048);
		}

		// class UMaterialFunctionInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialFunctionInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, MaterialFunctionUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, UnknownData_SK7R, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInterface, 0x0040);
		}

		// class UMaterialFunction : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_FYK4, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0058);
		}

		// class UMaterialFunctionInstance : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunctionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Parent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, ScalarParameterValues, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, VectorParameterValues, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, TextureParameterValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, FontParameterValues, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticSwitchParameterValues, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticComponentMaskParameterValues, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, RuntimeVirtualTextureParameterValues, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayer : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayer, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlend, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlendInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlendInstance, 0x00C0);
		}

		// class AMaterialInstanceActor : public AActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0230);
		}

		// class UMaterialInstanceDynamic : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_387W, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x03B0);
		}

		// class UMaterialParameterCollection : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_D59P, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0070);
		}

		// class UMaterialParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_O8ZW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_B4WK, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x0108);
		}

		// class AMatineeActor : public AActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_6WFL, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_LMRN, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_23SH, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_B37C, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_A8ID, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_8NEB, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_BA8C, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPlay, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnStop, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPause, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_87C4, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x02C8);
		}

		// class AMatineeActorCameraAnim : public AMatineeActor
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x02D0);
		}

		// class UMatineeAnimInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0028);
		}

		// class UMatineeInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0028);
		}

		// class AMeshMergeCullingVolume : public AVolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMeshMergeCullingVolume, 0x0258);
		}

		// class UMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__MeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, MeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSimplificationSettings, 0x0040);
		}

		// class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0028);
		}

		// class UMicroTransactionBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0068);
		}

		// class UModelComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_VQMM, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_4LZI, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x0480);
		}

		// class UMorphTarget : public UObject
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_XNOX, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0040);
		}

		// class UNavAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0028);
		}

		// class UNavAreaBase : public UObject
		TEST_METHOD(Class__Engine__NavAreaBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaBase, UnknownData_BY9V, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaBase, 0x0030);
		}

		// class UNavCollisionBase : public UObject
		TEST_METHOD(Class__Engine__NavCollisionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollisionBase, UnknownData_LQ31, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollisionBase, 0x0070);
		}

		// class UNavEdgeProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0028);
		}

		// class UNavigationDataChunk : public UObject
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0030);
		}

		// class UNavigationDataInterface : public UInterface
		TEST_METHOD(Class__Engine__NavigationDataInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataInterface, 0x0028);
		}

		// class ANavigationObjectBase : public AActor
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_3WR7, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_S04Z, 0x0241);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0248);
		}

		// class UNavigationSystemBase : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemBase, 0x0028);
		}

		// class UNavigationSystemConfig : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, NavigationSystemClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, SupportedAgentsMask, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, DefaultAgentName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, UnknownData_1100, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemConfig, 0x0050);
		}

		// class UNullNavSysConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__Engine__NullNavSysConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullNavSysConfig, 0x0050);
		}

		// class UNavLinkDefinition : public UObject
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_SDLC, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0050);
		}

		// class UNavPathObserverInterface : public UInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0028);
		}

		// class UNavRelevantInterface : public UInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0028);
		}

		// class USimulatedClientNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__SimulatedClientNetConnection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimulatedClientNetConnection, 0x1AF0);
		}

		// class UNetPushModelHelpers : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__NetPushModelHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetPushModelHelpers, 0x0028);
		}

		// class UNetworkPredictionInterface : public UInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0028);
		}

		// class UNetworkSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_9VSM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_QAK9, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, NetworkEmulationProfiles, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0058);
		}

		// class UNodeMappingContainer : public UObject
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceItems, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetItems, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceToTarget, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetAsset, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x0168);
		}

		// class UNodeMappingProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0028);
		}

		// class ANote : public AActor
		TEST_METHOD(Class__Engine__Note)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0220);
		}

		// class UObjectLibrary : public UObject
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_JVWK, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_ZRP5, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x00A8);
		}

		// class UObjectReferencer : public UObject
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0038);
		}

		// class UObjectTraceWorldSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__ObjectTraceWorldSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectTraceWorldSubsystem, UnknownData_OYN3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectTraceWorldSubsystem, 0x0038);
		}

		// class UPackageMapClient : public UPackageMap
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_GAOD, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x03F8);
		}

		// class APainCausingVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_3C0C, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_UWR8, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_BC8D, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x0290);
		}

		// class UParticleEmitter : public UObject
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_PA9Z, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_V5W7, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailModeBitmask, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_Y2FU, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x01B8);
		}

		// class AParticleEventManager : public AActor
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0220);
		}

		// class UParticleLODLevel : public UObject
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_E6RM, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, modules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_KU1Q, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00B8);
		}

		// class UParticleModuleAccelerationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_FUT5, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0038);
		}

		// class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_QG70, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0088);
		}

		// class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_ZYTT, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0048);
		}

		// class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0070);
		}

		// class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0070);
		}

		// class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0080);
		}

		// class UParticleModuleAttractorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0030);
		}

		// class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00A8);
		}

		// class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_5ZAD, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_7281, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_RQ03, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_4FZD, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00B0);
		}

		// class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_LLTI, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00E0);
		}

		// class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0078);
		}

		// class UCollisionProfile : public UDeveloperSettings
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_HWAV, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0170);
		}

		// class UComponentDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0038);
		}

		// class UActorComponentInstanceDataTransientOuter : public UObject
		TEST_METHOD(Class__Engine__ActorComponentInstanceDataTransientOuter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponentInstanceDataTransientOuter, 0x0028);
		}

		// class UCurveTable : public UObject
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_6FOT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x00A0);
		}

		// class UCompositeCurveTable : public UCurveTable
		TEST_METHOD(Class__Engine__CompositeCurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, ParentTables, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, OldParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, UnknownData_8ZBE, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeCurveTable, 0x00C8);
		}

		// class UDataTable : public UObject
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_9BD6, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_7V9U, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, ImportKeyField, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_6SM3, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x00B0);
		}

		// class UCompositeDataTable : public UDataTable
		TEST_METHOD(Class__Engine__CompositeDataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, ParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, OldParentTables, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, UnknownData_M7PX, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeDataTable, 0x00D8);
		}

		// class UEngine : public UObject
		TEST_METHOD(Class__Engine__Engine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_4KVY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClassName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClass, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AIControllerClassName, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManagerClassName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManager, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTexture, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTextureName, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterial, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterialName, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugEditorMaterialName, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialXAxis, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialYAxis, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZAxis, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialPrismatic, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialYellow, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, QuadComplexityColors, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LODColorationColors, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HLODColorationColors, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingAccuracyColors, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES3PixelShaderAdditiveComplexityCount, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_JHEE, 0x063D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTexture, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTextureName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_9NG6, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_TG1B, 0x079D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_S6T7, 0x07A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, FixedFrameRate, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_MEE2, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStep, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_LF5D, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStepClassName, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProvider, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_M19C, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProviderClassName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bGenerateDefaultTimecode, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_M0NX, 0x0841);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameRate, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameDelay, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_T8DX, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_2JYR, 0x0859);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_6PN0, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameScreenshotSaveDirectory, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_HP57, 0x08A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_0YLF, 0x08D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_CL23, 0x08E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x090C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubduedSelectionOutlineColor, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_SDU1, 0x095D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_HZY5, 0x0961);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_BO1T, 0x096D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_36FD, 0x098C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RuntimeServerActors, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetErrorLogInterval, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_QX56, 0x0C2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_2E56, 0x0C4C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0DE0);
		}

		// class UScriptViewportClient : public UObject
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_5BLY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0038);
		}

		// class UGameViewportClient : public UScriptViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_GJFY, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_Z6KG, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, MaxSplitscreenPlayers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_0RY3, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_SIYO, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x0360);
		}

		// class UConsole : public UObject
		TEST_METHOD(Class__Engine__Console)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_HY6F, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_OAQ3, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_3TMT, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0130);
		}

		// class UControlChannel : public UChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_0QOT, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0088);
		}

		// class UStreamingSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_NZGK, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_QCHT, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityLevelStreamingActorsUpdateExtraTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_7QFG, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0070);
		}

		// class UGarbageCollectionSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_UG0K, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MinGCClusterSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0058);
		}

		// class ACullDistanceVolume : public AVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_A59E, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x0270);
		}

		// class UCurveBase : public UObject
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_9UDC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0030);
		}

		// class UCurveEdPresetCurve : public UObject
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0028);
		}

		// class UCurveFloat : public UCurveBase
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_4FB1, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00B8);
		}

		// class UCurveLinearColor : public UCurveBase
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustHue, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustSaturation, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightness, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightnessCurve, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustVibrance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMinAlpha, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMaxAlpha, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, UnknownData_Z06F, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x0250);
		}

		// class UTexture2D : public UTexture
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_QMI7, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_4KIW, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x0100);
		}

		// class UCurveLinearColorAtlas : public UTexture2D
		TEST_METHOD(Class__Engine__CurveLinearColorAtlas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, TextureSize, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, UnknownData_3BL8, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientCurves, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColorAtlas, 0x0118);
		}

		// class UCurveSourceInterface : public UInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0028);
		}

		// class UCurveVector : public UCurveBase
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x01B0);
		}

		// class UDamageType : public UObject
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_9MTI, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_6PJV, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0040);
		}

		// class UPrimaryDataAsset : public UDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0030);
		}

		// class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0028);
		}

		// class ADebugCameraController : public APlayerController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_DCTN, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedActor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedComponent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedHitPoint, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_MDMP, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalControllerRef, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalPlayer, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SpeedScale, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialMaxSpeed, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialAccel, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialDecel, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_F9VS, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x0678);
		}

		// class UDebugCameraControllerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__DebugCameraControllerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraControllerSettings, CycleViewModes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugCameraControllerSettings, 0x0048);
		}

		// class AHUD : public AActor
		TEST_METHOD(Class__Engine__HUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_QLCN, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, CurrentTargetIndex, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_35U1, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_73R3, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetDesiredClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetActor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_Q3CX, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0310);
		}

		// class ADebugCameraHUD : public AHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0310);
		}

		// class UDebugDrawService : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0028);
		}

		// class ADecalActor : public AActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, Decal, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0228);
		}

		// class UDecalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInDuration, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInStartDelay, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_0VEH, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalSize, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_A43M, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x0240);
		}

		// class ADefaultPawn : public APawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_FLBU, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x02A8);
		}

		// class ADefaultPhysicsVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x0268);
		}

		// class UDemoNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_JG3B, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x1B60);
		}

		// class UDemoNetDriver : public UNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_MLWH, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_1N1C, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_AFYF, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, MulticastRecordOptions, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_1RNV, 0x0A21);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, SpectatorControllers, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_CK1P, 0x0A38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x12C0);
		}

		// class UPendingNetGame : public UObject
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_0G5I, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_EYDU, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C0);
		}

		// class UDemoPendingNetGame : public UPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C0);
		}

		// class UDestructibleInterface : public UInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0028);
		}

		// class UTextureLODSettings : public UObject
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0038);
		}

		// class UDeviceProfile : public UTextureLODSettings
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_AKHF, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_PODC, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x00A8);
		}

		// class UDeviceProfileFragment : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileFragment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileFragment, UnknownData_KG76, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileFragment, 0x0038);
		}

		// class UDeviceProfileManager : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_JLTX, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x00B0);
		}

		// class UDialogueSoundWaveProxy : public USoundBase
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_JPBQ, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x01D0);
		}

		// class UDialogueVoice : public UObject
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_A5C9, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_OGO2, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0040);
		}

		// class UParticleModuleRotationRateBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0030);
		}

		// class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0078);
		}

		// class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x0098);
		}

		// class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0078);
		}

		// class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_AIRT, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0080);
		}

		// class UParticleModuleOrbitBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_5V3E, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0038);
		}

		// class UParticleModuleOrbit : public UParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_P6V4, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_82MO, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_TFUB, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_ZE87, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0130);
		}

		// class UParticleModuleOrientationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0030);
		}

		// class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_DMDO, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0038);
		}

		// class UParticleModuleParameterBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0030);
		}

		// class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_YT34, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0048);
		}

		// class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0068);
		}

		// class UParticleModuleLocationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0030);
		}

		// class UParticleModulePivotOffset : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0038);
		}

		// class UParticleModuleRequired : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_EEWR, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_ARTE, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_8DXN, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0140);
		}

		// class UParticleModuleRotationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0030);
		}

		// class UParticleModuleRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0060);
		}

		// class UParticleModuleRotation_Seeded : public UParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0080);
		}

		// class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_MPME, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0068);
		}

		// class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0060);
		}

		// class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0080);
		}

		// class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0060);
		}

		// class UParticleModuleSizeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0030);
		}

		// class UParticleModuleSize : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0078);
		}

		// class UParticleModuleSize_Seeded : public UParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x0098);
		}

		// class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_PTE5, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0080);
		}

		// class UParticleModuleSizeScale : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_SHGO, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0080);
		}

		// class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0040);
		}

		// class UParticleModuleSourceMovement : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0078);
		}

		// class UParticleModuleSpawnBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_5L2L, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0038);
		}

		// class UParticleModuleSpawn : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_8EWO, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_5672, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x00E8);
		}

		// class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_KQWQ, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0078);
		}

		// class UParticleModuleSubUVBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0030);
		}

		// class UParticleModuleSubUV : public UParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_X3XA, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0070);
		}

		// class UParticleModuleSubUVMovie : public UParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_1292, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_2HQ9, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00B0);
		}

		// class UParticleModuleTrailBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0030);
		}

		// class UParticleModuleTrailSource : public UParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_7EQX, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_BLSB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_OMEO, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_8N79, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_N86V, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0090);
		}

		// class UParticleModuleTypeDataBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0030);
		}

		// class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_5KT9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_U8S5, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0048);
		}

		// class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_3WSR, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_SDY3, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_25YV, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_8L6U, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_TPSL, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0150);
		}

		// class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_7QQQ, 0x0415);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0420);
		}

		// class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_RF3B, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, LODSizeScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_7B56, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_776A, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x0098);
		}

		// class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_FVS3, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_MZ2B, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_7A8I, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_KD7A, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0060);
		}

		// class UParticleModuleVectorFieldBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0030);
		}

		// class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_VPJ0, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_7QUG, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0040);
		}

		// class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_GXQA, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0068);
		}

		// class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0048);
		}

		// class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_HGUT, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0040);
		}

		// class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0068);
		}

		// class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0068);
		}

		// class UParticleModuleVelocityBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_OJQT, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0038);
		}

		// class UParticleModuleVelocity : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00B0);
		}

		// class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00D0);
		}

		// class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_LFQ3, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00A8);
		}

		// class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0080);
		}

		// class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_I0FM, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0088);
		}

		// class UParticleSpriteEmitter : public UParticleEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x01B8);
		}

		// class UParticleSystem : public UFXSystemAsset
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificantReaction, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_O6WF, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxSignificanceLevel, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MinTimeBetweenTicks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificanceDelay, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_UHAY, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0110);
		}

		// class UDialogueWave : public UObject
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_9RTB, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0070);
		}

		// class ALight : public AActor
		TEST_METHOD(Class__Engine__Light)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_QZML, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0230);
		}

		// class ADirectionalLight : public ALight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0230);
		}

		// class ULightComponentBase : public USceneComponent
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_6CSF, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, DeepShadowLayerDistribution, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, SamplesPerPixel, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_YSVU, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x022C);
		}

		// class ULightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_25PT, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_2BNW, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SpecularScale, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSlopeBias, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_DHFF, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightingChannels, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_HH0J, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_ALD2, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_X6QT, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_8I0G, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomMaxBrightness, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_6583, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_IKH4, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x032C);
		}

		// class UDirectionalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_UTAY, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_E67J, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceSoftAngle, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowSourceAngleFactor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_UHDY, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunLightIndex, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunDiskColorScale, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_MJFG, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowStrength, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowOnAtmosphereStrength, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowOnSurfaceStrength, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowDepthBias, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowExtent, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowMapResolutionScale, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowRaySampleCountScale, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudScatteredLuminanceScale, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_E3S6, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowAmount, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_O5UU, 0x03E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x03F0);
		}

		// class UDistribution : public UObject
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_KHZH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0030);
		}

		// class UDistributionFloat : public UDistribution
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_AHSF, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0038);
		}

		// class UDistributionFloatConstant : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_MEY0, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0040);
		}

		// class UDistributionFloatConstantCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0050);
		}

		// class UDistributionFloatParameterBase : public UDistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_8H91, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0060);
		}

		// class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0060);
		}

		// class UDistributionFloatUniform : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0040);
		}

		// class UDistributionFloatUniformCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0050);
		}

		// class UDistributionVector : public UDistribution
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_EB3X, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0038);
		}

		// class UDistributionVectorConstant : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_01YO, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_NLE5, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0050);
		}

		// class UDistributionVectorConstantCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_LOX7, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_H0AI, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0058);
		}

		// class UDistributionVectorParameterBase : public UDistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_K2YE, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0090);
		}

		// class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0090);
		}

		// class UDistributionVectorUniform : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_1A49, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_F27H, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0060);
		}

		// class UDistributionVectorUniformCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_62QI, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_NBRR, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_XR8Z, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0060);
		}

		// class ADocumentationActor : public AActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_CW47, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0228);
		}

		// class UDPICustomScalingRule : public UObject
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0028);
		}

		// class UDrawFrustumComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_R1TI, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x0460);
		}

		// class USphereComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, UnknownData_QCCK, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x0460);
		}

		// class UDrawSphereComponent : public USphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x0460);
		}

		// class UEdGraph : public UObject
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_G1QM, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0060);
		}

		// class UGraphNodeContextMenuContext : public UObject
		TEST_METHOD(Class__Engine__GraphNodeContextMenuContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Blueprint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Graph, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Node, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_NY6Z, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, bIsDebugging, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_7ZJV, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGraphNodeContextMenuContext, 0x0050);
		}

		// class UEdGraphNode : public UObject
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_N69S, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_8OUF, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_JZBE, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_LE5Y, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x0098);
		}

		// class UEdGraphNode_Documentation : public UEdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00B8);
		}

		// class UEdGraphPin_Deprecated : public UObject
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, Direction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_WL9C, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0118);
		}

		// class UEdGraphSchema : public UObject
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0028);
		}

		// class AEmitter : public AActor
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_GN9Y, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x0270);
		}

		// class AEmitterCameraLensEffectBase : public AEmitter
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_G4MY, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, RelativeTransform, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_54H3, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_T5AQ, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x02E0);
		}

		// class UViewModeUtils : public UObject
		TEST_METHOD(Class__Engine__ViewModeUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewModeUtils, 0x0028);
		}

		// class UEngineBaseTypes : public UObject
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0028);
		}

		// class UEngineHandlerComponentFactory : public UHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0028);
		}

		// class ULocalMessage : public UObject
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0028);
		}

		// class UEngineMessage : public ULocalMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00A8);
		}

		// class UEngineTypes : public UObject
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0028);
		}

		// class AExponentialHeightFog : public AInfo
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_8WVR, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0230);
		}

		// class UExponentialHeightFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_1TKW, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, SecondFogData, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_X5S4, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_6QH5, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_ZM8X, 0x0291);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x02A0);
		}

		// class UExporter : public UObject
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_WRBO, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportTask, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_HT1N, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0078);
		}

		// class UFloatingPawnMovement : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_AXK1, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0150);
		}

		// class UFont : public UObject
		TEST_METHOD(Class__Engine__Font)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_WOVV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_2KFT, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Characters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_QA0U, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_X25U, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01D0);
		}

		// class UFontFace : public UObject
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_8RR0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_KLY4, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0058);
		}

		// class UFontImportOptions : public UObject
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00D8);
		}

		// class UForceFeedbackAttenuation : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00D8);
		}

		// class UForceFeedbackComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_735R, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_7VJT, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x02E0);
		}

		// class UForceFeedbackEffect : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_P26K, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0040);
		}

		// class UGameEngine : public UEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_01BC, 0x0DF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0E30);
		}

		// class AGameNetworkManager : public AInfo
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPacketLossThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePacketLossThreshold, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePingThreshold, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_EXVC, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientForcedUpdateDuration, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchThreshold, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchCooldown, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxMoveDeltaTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientSmoothingDeltaTime, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeStationary, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_H9X4, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientErrorUpdateRateLimit, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdateDeltaTime, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdatePositionLimit, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_7OWM, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_I7JU, 0x02C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x02D0);
		}

		// class UGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0028);
		}

		// class AGameSession : public AInfo
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPartySize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_UNLE, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0238);
		}

		// class UGameUserSettings : public UObject
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDynamicResolution, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_7U0G, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, Version, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedAudioQualityLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_UGP3, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_E5WR, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenWidth, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenHeight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_IS5Q, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_UPGR, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_SL75, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0120);
		}

		// class ASpotLight : public ALight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0238);
		}

		// class AGeneratedMeshAreaLight : public ASpotLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0238);
		}

		// class UHapticFeedbackEffect_Base : public UObject
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0028);
		}

		// class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_PM0Z, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0068);
		}

		// class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0138);
		}

		// class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_A4S3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0060);
		}

		// class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__HealthSnapshotBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthSnapshotBlueprintLibrary, 0x0028);
		}

		// class UHLODEngineSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__Engine__HLODEngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODEngineSubsystem, 0x0030);
		}

		// class UHLODProxy : public UObject
		TEST_METHOD(Class__Engine__HLODProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, ProxyMeshes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, HLODActors, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxy, 0x0088);
		}

		// class UHLODProxyDesc : public UObject
		TEST_METHOD(Class__Engine__HLODProxyDesc)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxyDesc, 0x0028);
		}

		// class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0028);
		}

		// class UImportantToggleSettingInterface : public UInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0028);
		}

		// class UInGameAdManager : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_XQ1C, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0060);
		}

		// class UInheritableComponentHandler : public UObject
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0048);
		}

		// class UInputDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0028);
		}

		// class UInputActionDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0038);
		}

		// class UInputAxisDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0038);
		}

		// class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0038);
		}

		// class UMaterialExpressionCosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_7PPA, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x0058);
		}

		// class UMaterialExpressionCrossProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_96CE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_F0J9, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x0068);
		}

		// class UMaterialExpressionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0058);
		}

		// class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, bUseCustomPrimitiveData, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, PrimitiveDataIndex, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_ZBOQ, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0060);
		}

		// class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCurveAtlasRowParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Curve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Atlas, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, InputTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, UnknownData_D14S, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCurveAtlasRowParameter, 0x0088);
		}

		// class UMaterialExpressionCustom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, code, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_14SM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalOutputs, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalDefines, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, IncludeFilePaths, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x00A8);
		}

		// class UMaterialExpressionDDX : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, UnknownData_1LTO, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0058);
		}

		// class UMaterialExpressionDDY : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, UnknownData_Y1UM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0058);
		}

		// class UMaterialExpressionDecalDerivative : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0040);
		}

		// class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0040);
		}

		// class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_QVYI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_N77B, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x0060);
		}

		// class UMaterialExpressionDeltaTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeltaTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeltaTime, 0x0040);
		}

		// class UMaterialExpressionDepthFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_TY35, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_02HZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x0070);
		}

		// class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_B4XS, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_XNMK, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x0058);
		}

		// class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, UnknownData_H6HO, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0058);
		}

		// class UMaterialExpressionDesaturation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_SA2M, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_HRB8, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x0078);
		}

		// class UMaterialExpressionDistance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_TFIP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_THED, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x0068);
		}

		// class UMaterialExpressionDistanceCullFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0040);
		}

		// class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, UnknownData_AXW8, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0058);
		}

		// class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, UnknownData_D3M3, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0058);
		}

		// class UMaterialExpressionDivide : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_EBZC, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_JNAQ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x0070);
		}

		// class UMaterialExpressionDotProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_ZTST, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_6RXI, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x0068);
		}

		// class UMaterialExpressionDynamicParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParameterIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, UnknownData_1JF6, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0068);
		}

		// class UMaterialExpressionEyeAdaptation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0040);
		}

		// class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_VH9Q, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x0058);
		}

		// class UMaterialExpressionFloor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, UnknownData_JIJU, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0058);
		}

		// class UMaterialExpressionFmod : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_KIKY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_X8HG, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x0068);
		}

		// class UMaterialExpressionFontSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_28YF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0050);
		}

		// class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0070);
		}

		// class UMaterialExpressionFrac : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, UnknownData_E109, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0058);
		}

		// class UMaterialExpressionFresnel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_YUHS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_9NH4, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_YQI7, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0088);
		}

		// class UMaterialExpressionFunctionInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_BI3A, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_EQFQ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_J468, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_KRP2, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_UA23, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x00C0);
		}

		// class UMaterialExpressionFunctionOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_Q91Y, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_B1U7, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_BPAH, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x0088);
		}

		// class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, UnknownData_0JEU, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x0068);
		}

		// class UMaterialExpressionGIReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_EYBX, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_WK04, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_YJIS, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0080);
		}

		// class UMaterialExpressionHairAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionHairAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairAttributes, UnknownData_7PKY, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairAttributes, 0x0048);
		}

		// class UMaterialExpressionHairColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionHairColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, Melanin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_XORC, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, Redness, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_RE8M, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, DyeColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_6IP3, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairColor, 0x0080);
		}

		// class UMaterialExpressionIf : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_4ZIA, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_N5X5, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_8EHG, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_I7A2, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_SB9W, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x00B0);
		}

		// class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionInverseLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_FLTL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_2BC9, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, Value, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_0Y1N, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstValue, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, bClampResult, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_4798, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionInverseLinearInterpolate, 0x0090);
		}

		// class UMaterialExpressionLightmapUVs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0040);
		}

		// class UMaterialExpressionLightmassReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_BHFB, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_1PZS, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x0068);
		}

		// class UMaterialExpressionLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0040);
		}

		// class UMaterialExpressionLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_GK3T, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_EG34, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_I3YS, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0088);
		}

		// class UMaterialExpressionLogarithm10 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, UnknownData_F6IL, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0058);
		}

		// class UMaterialExpressionLogarithm2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, UnknownData_2XFJ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0058);
		}

		// class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_N3LL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_8B0L, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_684Z, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_WAFR, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Anisotropy, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_IT5T, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_57FB, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_IQ3F, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_94ID, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_KQFM, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Tangent, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_9RVD, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_QS8K, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_886E, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_00CJ, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_2VOP, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_YKCR, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_IVMB, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_Z1PF, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_52S0, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_72DM, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_94CJ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ShadingModel, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_UYOJ, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0270);
		}

		// class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMapARPassthroughCameraUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, UnknownData_29LY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMapARPassthroughCameraUV, 0x0058);
		}

		// class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialAttributeLayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ExpressionGUID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_B0YY, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, DefaultLayers, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, LayerCallers, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveLayerCallers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_OE44, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, BlendCallers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveBlendCallers, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, bIsLayerGraphBuilt, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_G6VH, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialAttributeLayers, 0x00E8);
		}

		// class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0058);
		}

		// class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialLayerOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialLayerOutput, 0x0088);
		}

		// class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_T0J8, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_HLM9, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x0068);
		}

		// class UMaterialExpressionMax : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_SBQ3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_H37T, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x0070);
		}

		// class UMaterialExpressionMin : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_GCJ0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_Q1DE, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x0070);
		}

		// class UMaterialExpressionMultiply : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_E4L3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_7IGC, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x0070);
		}

		// class UMaterialExpressionNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_J503, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_OQCQ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_WLFA, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_J5RV, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_GKXD, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x0090);
		}

		// class UMaterialExpressionNormalize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, UnknownData_W412, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0058);
		}

		// class UMaterialExpressionObjectBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0040);
		}

		// class UMaterialExpressionObjectOrientation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0040);
		}

		// class UMaterialExpressionObjectPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0040);
		}

		// class UMaterialExpressionObjectRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0040);
		}

		// class UMaterialExpressionOneMinus : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, UnknownData_WE4N, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0058);
		}

		// class UMaterialExpressionPanner : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_9SCJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_4NTL, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Speed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_CDF0, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_A3DF, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x0090);
		}

		// class UMaterialExpressionParticleColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0040);
		}

		// class UMaterialExpressionParticleDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0040);
		}

		// class UMaterialExpressionParticleMacroUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0040);
		}

		// class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0040);
		}

		// class UMaterialExpressionParticlePositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0040);
		}

		// class UMaterialExpressionParticleRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0040);
		}

		// class UMaterialExpressionParticleRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0040);
		}

		// class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0040);
		}

		// class UMaterialExpressionParticleSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0040);
		}

		// class UMaterialExpressionParticleSpeed : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0040);
		}

		// class UMaterialExpressionTextureBase : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0048);
		}

		// class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_A7L5, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x0060);
		}

		// class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_VD4I, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x0068);
		}

		// class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUVProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUVProperties, 0x0040);
		}

		// class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceCustomData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DefaultValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_M0WW, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, ConstDefaultValue, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DataIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_UDQO, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceCustomData, 0x0060);
		}

		// class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0040);
		}

		// class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0040);
		}

		// class UMaterialExpressionPixelDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0040);
		}

		// class UMaterialExpressionPixelNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0040);
		}

		// class UMaterialExpressionPower : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_E8GJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_WZQE, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_I5F6, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x0070);
		}

		// class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedLocalBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedLocalBounds, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0040);
		}

		// class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_LFTD, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_F6C3, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x0068);
		}

		// class UMaterialExpressionQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_1WGS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_JVAJ, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x00A8);
		}

		// class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRayTracingQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, Normal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_5PY1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, RayTraced, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_7EHD, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRayTracingQualitySwitch, 0x0068);
		}

		// class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionCapturePassSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, UnknownData_65EL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, Reflection, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, UnknownData_N96Z, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionCapturePassSwitch, 0x0068);
		}

		// class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_887H, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_GTRX, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x0058);
		}

		// class UMaterialExpressionReroute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, UnknownData_AWXS, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0058);
		}

		// class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_1YAA, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_YGI2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_HN9G, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Position, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_7PGJ, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_21Q2, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x0098);
		}

		// class UMaterialExpressionRotator : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_ZRUL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_X3CM, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x0078);
		}

		// class UMaterialExpressionRound : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, UnknownData_8A1K, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0058);
		}

		// class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_RZLI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Specular, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_5DXG, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Roughness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_0DSU, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Normal, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_80J0, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, WorldHeight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_MH5J, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Opacity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_G42K, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Mask, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_DYM5, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureOutput, 0x00D0);
		}

		// class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_D64G, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, VirtualTextureOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_WZZI, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureReplace, 0x0068);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_E8OY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, WorldPosition, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_DKCW, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_99M7, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, VirtualTexture, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MaterialType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bSinglePhysicalSpace, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bAdaptive, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValueMode, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, TextureAddressMode, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_TM91, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSample, 0x0090);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ParameterName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ExpressionGUID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, Group, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, 0x00B0);
		}

		// class UMaterialExpressionSaturate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, UnknownData_FRDW, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0058);
		}

		// class UMaterialExpressionSceneColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_7BFG, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_01C4, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_IM8J, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_BBWO, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x0078);
		}

		// class USoundConcurrency : public UObject
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0050);
		}

		// class USoundEffectSourcePresetChain : public UObject
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, Chain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_2VEX, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0040);
		}

		// class USoundNode : public UObject
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, UnknownData_675I, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0048);
		}

		// class USoundNodeDialoguePlayer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_4USH, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0070);
		}

		// class USoundNodeDistanceCrossFade : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0058);
		}

		// class USoundNodeDoppler : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, bUseSmoothing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_4RTB, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, SmoothingInterpSpeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_WSE2, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0058);
		}

		// class USoundNodeEnveloper : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_KXKE, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0190);
		}

		// class USoundNodeGroupControl : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0058);
		}

		// class USoundNodeLooping : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_HYU3, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0050);
		}

		// class USoundNodeMature : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0048);
		}

		// class USoundNodeMixer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0058);
		}

		// class USoundNodeModulator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0058);
		}

		// class USoundNodeModulatorContinuous : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0088);
		}

		// class USoundNodeOscillator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_YM1U, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_UWC1, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0070);
		}

		// class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0060);
		}

		// class USoundNodeQualityLevel : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeQualityLevel, CookedQualityLevelIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeQualityLevel, UnknownData_N1V2, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0050);
		}

		// class USoundNodeRandom : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_DCIX, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0078);
		}

		// class USoundNodeSoundClass : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, UnknownData_JLQ8, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0058);
		}

		// class USoundNodeSwitch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0050);
		}

		// class USoundNodeWaveParam : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0050);
		}

		// class USoundNodeAssetReferencer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0048);
		}

		// class USoundNodeWavePlayer : public USoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_SHII, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_X1BU, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0088);
		}

		// class USoundSourceBus : public USoundWave
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_K212, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, AudioBus, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_IVTR, 0x0381);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x0388);
		}

		// class USoundSubmixBase : public UObject
		TEST_METHOD(Class__Engine__SoundSubmixBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixBase, ChildSubmixes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixBase, 0x0038);
		}

		// class USoundSubmixWithParentBase : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundSubmixWithParentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixWithParentBase, ParentSubmix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixWithParentBase, 0x0040);
		}

		// class USoundSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_Z8Q9, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, AmbisonicsPluginSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerAttackTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerReleaseTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, GainMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_QMPT, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OutputVolume, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, WetLevel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, DryLevel, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OnSubmixRecordedFileDone, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_CRAF, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0090);
		}

		// class USoundfieldSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundfieldSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEncodingFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEffectChain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettingsClass, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldSubmix, 0x0068);
		}

		// class UEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__EndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndpointSubmix, 0x0050);
		}

		// class USoundfieldEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundfieldEndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettingsClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEffectChain, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSubmix, 0x0070);
		}

		// class ASpectatorPawn : public ADefaultPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x02A8);
		}

		// class USpectatorPawnMovement : public UFloatingPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_P7UQ, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0158);
		}

		// class ASphereReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0230);
		}

		// class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, InfluenceRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x0280);
		}

		// class ASplineMeshActor : public AActor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineMeshActor, SplineMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineMeshActor, 0x0228);
		}

		// class USplineMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_VNOQ, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x055D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_ET73, 0x055E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_URQU, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x0570);
		}

		// class ULocalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__LocalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, Radius, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, AttenuationRadius, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, LightmassSettings, 0x0334);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalLightComponent, 0x0340);
		}

		// class UPointLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_UG55, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_1MLX, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x035C);
		}

		// class USpotLightComponent : public UPointLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x0360);
		}

		// class USpringArmComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_MH3V, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_92US, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_S07K, 0x021E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_5QSF, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x0280);
		}

		// class UStaticMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_05EN, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLOD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_GCNG, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_BWO8, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, EditableMesh, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0150);
		}

		// class UStaticMeshSocket : public UObject
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_55TJ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0068);
		}

		// class UStereoLayerShape : public UObject
		TEST_METHOD(Class__Engine__StereoLayerShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShape, 0x0028);
		}

		// class UStereoLayerShapeQuad : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeQuad)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeQuad, 0x0028);
		}

		// class UStereoLayerShapeCylinder : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, OverlayArc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, UnknownData_6SWZ, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCylinder, 0x0038);
		}

		// class UStereoLayerShapeCubemap : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCubemap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCubemap, 0x0028);
		}

		// class UStereoLayerShapeEquirect : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeEquirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftUVRect, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightUVRect, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightBias, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeEquirect, 0x0070);
		}

		// class UStereoLayerComponent : public USceneComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_AOA2, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Texture, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_9KVE, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, EquirectProps, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_5JZQ, 0x0286);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Shape, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Priority, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_M0DY, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x02E0);
		}

		// class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0028);
		}

		// class UStringTable : public UObject
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_NCMZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0040);
		}

		// class USubsurfaceProfile : public UObject
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, UnknownData_M0II, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x00B8);
		}

		// class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__SubsystemBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystemBlueprintLibrary, 0x0028);
		}

		// class USubUVAnimation : public UObject
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_BTJ6, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_E7KH, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0068);
		}

		// class USystemTimeTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__Engine__SystemTimeTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, FrameRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bGenerateFullFrame, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bUseHighPerformanceClock, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, UnknownData_JPN7, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USystemTimeTimecodeProvider, 0x0040);
		}

		// class ATargetPoint : public AActor
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0220);
		}

		// class UTextPropertyTestObject : public UObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0070);
		}

		// class ATextRenderActor : public AActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0228);
		}

		// class UTextRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Text, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_YC87, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_M74L, 0x0489);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x0490);
		}

		// class UTexture2DArray : public UTexture
		TEST_METHOD(Class__Engine__Texture2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, UnknownData_S0V2, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressX, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressY, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressZ, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, UnknownData_T4XF, 0x0133);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DArray, 0x0138);
		}

		// class UTexture2DDynamic : public UTexture
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_HFMJ, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_BNDL, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00F0);
		}

		// class UTextureLightProfile : public UTexture2D
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x0108);
		}

		// class UTextureMipDataProviderFactory : public UAssetUserData
		TEST_METHOD(Class__Engine__TextureMipDataProviderFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureMipDataProviderFactory, 0x0028);
		}

		// class UTextureRenderTarget2DArray : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, Slices, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, ClearColor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, OverrideFormat, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, UnknownData_93LO, 0x00FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2DArray, 0x0100);
		}

		// class UTextureRenderTargetCube : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_Q6P7, 0x00F6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00F8);
		}

		// class UTextureRenderTargetVolume : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeZ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, ClearColor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, OverrideFormat, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, UnknownData_ZOBS, 0x00FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetVolume, 0x0100);
		}

		// class UThumbnailInfo : public UObject
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0028);
		}

		// class UTimelineComponent : public UActorComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_9W7T, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x0150);
		}

		// class UTimelineTemplate : public UObject
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_2FN3, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VariableName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, DirectionPropertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UpdateFunctionName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FinishedFunctionName, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x00B0);
		}

		// class UTireType : public UDataAsset
		TEST_METHOD(Class__Engine__TireType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_B7OE, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0038);
		}

		// class UTouchInterface : public UObject
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_W1NT, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_PBFM, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0058);
		}

		// class ATriggerBase : public AActor
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0228);
		}

		// class ATriggerBox : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0228);
		}

		// class ATriggerCapsule : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0228);
		}

		// class ATriggerSphere : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0228);
		}

		// class ATriggerVolume : public AVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x0258);
		}

		// class UTwitterIntegrationBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0038);
		}

		// class UUserDefinedEnum : public UEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B0);
		}

		// class UUserDefinedStruct : public UScriptStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Status, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_5L5V, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Guid, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_S0TF, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x0108);
		}

		// class UUserInterfaceSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_QT3P, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, ApplicationScale, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_BDAL, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bAllowHighDPIInGameMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_MIRE, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DesignScreenSize, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_0HBF, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_01YH, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x0270);
		}

		// class UVectorField : public UObject
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0048);
		}

		// class UVectorFieldAnimated : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_JOEU, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_KS08, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0088);
		}

		// class UVectorFieldComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_2SVC, 0x0451);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x0470);
		}

		// class UVectorFieldStatic : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, bAllowCPUAccess, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_VIMR, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x0098);
		}

		// class AVectorFieldVolume : public AActor
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0228);
		}

		// class UViewportStatsSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__ViewportStatsSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewportStatsSubsystem, UnknownData_D8CT, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewportStatsSubsystem, 0x0050);
		}

		// class UVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__VirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture, 0x0028);
		}

		// class ULightMapVirtualTexture : public UVirtualTexture
		TEST_METHOD(Class__Engine__LightMapVirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture, 0x0028);
		}

		// class URuntimeVirtualTextureStreamingProxy : public UTexture2D
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureStreamingProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureStreamingProxy, 0x0100);
		}

		// class UVirtualTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__VirtualTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, Settings, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, bContinuousUpdate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, bSinglePhysicalSpace, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, UnknownData_TAVY, 0x010E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture2D, 0x0110);
		}

		// class UVirtualTextureBuilder : public UObject
		TEST_METHOD(Class__Engine__VirtualTextureBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureBuilder, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureBuilder, BuildHash, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTextureBuilder, 0x0038);
		}

		// class UVirtualTexturePoolConfig : public UObject
		TEST_METHOD(Class__Engine__VirtualTexturePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, DefaultSizeInMegabyte, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, UnknownData_PIFT, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, Pools, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexturePoolConfig, 0x0040);
		}

		// class UVisualLoggerAutomationTests : public UObject
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0028);
		}

		// class UVisualLoggerDebugSnapshotInterface : public UInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0028);
		}

		// class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0028);
		}

		// class UVoiceChannel : public UChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_NCT3, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0080);
		}

		// class UVOIPTalker : public UActorComponent
		TEST_METHOD(Class__Engine__VOIPTalker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, Settings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, UnknownData_XPSS, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPTalker, 0x00E8);
		}

		// class UVOIPStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VOIPStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPStatics, 0x0028);
		}

		// class UVolumeTexture : public UTexture
		TEST_METHOD(Class__Engine__VolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumeTexture, UnknownData_4UC1, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumeTexture, 0x0130);
		}

		// class UVolumetricCloudComponent : public USceneComponent
		TEST_METHOD(Class__Engine__VolumetricCloudComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_OBY5, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, LayerHeight, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, TracingStartMaxDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, TracingMaxDistance, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, PlanetRadius, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, GroundAlbedo, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, Material, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_YFQH, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, SkyLightCloudBottomOcclusion, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ViewSampleCountScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ReflectionSampleCountScale, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowViewSampleCountScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowReflectionSampleCountScale, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowTracingDistance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_I6BJ, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumetricCloudComponent, 0x0240);
		}

		// class AVolumetricCloud : public AInfo
		TEST_METHOD(Class__Engine__VolumetricCloud)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricCloud, VolumetricCloudComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricCloud, 0x0228);
		}

		// class UInputComponent : public UActorComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_X51H, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, CachedKeyToActionInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_QZ2K, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0138);
		}

		// class UInputKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0038);
		}

		// class UInputSettings : public UObject
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bUseAutocorrect, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_6LY2, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectOS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectCultures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectDeviceModels, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_ZTV1, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_XFFO, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, SpeechMappings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultPlayerInputClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultInputComponentClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x0140);
		}

		// class UInputTouchDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0038);
		}

		// class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0038);
		}

		// class UInterface_AssetUserData : public UInterface
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0028);
		}

		// class UBoneReferenceSkeletonProvider : public UInterface
		TEST_METHOD(Class__Engine__BoneReferenceSkeletonProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneReferenceSkeletonProvider, 0x0028);
		}

		// class UInterface_CollisionDataProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0028);
		}

		// class UInterface_PostProcessVolume : public UInterface
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0028);
		}

		// class UInterface_PreviewMeshProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_PreviewMeshProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PreviewMeshProvider, 0x0028);
		}

		// class UInterpCurveEdSetup : public UObject
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_3TYJ, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0040);
		}

		// class UInterpData : public UObject
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_HGKT, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0070);
		}

		// class UInterpFilter : public UObject
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0038);
		}

		// class UInterpFilter_Classes : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0038);
		}

		// class UInterpFilter_Custom : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0038);
		}

		// class UInterpGroup : public UObject
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_T8WA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_G94J, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0050);
		}

		// class UInterpGroupCamera : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_4APE, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0060);
		}

		// class UInterpGroupDirector : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0050);
		}

		// class UInterpGroupInst : public UObject
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0048);
		}

		// class UInterpGroupInstCamera : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0048);
		}

		// class UInterpGroupInstDirector : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0048);
		}

		// class UInterpToMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, Duration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_IKTH, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bSweep, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, TeleportType, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bCheckIfStillInWorld, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_XGRV, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_5UBM, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x0190);
		}

		// class UInterpTrack : public UObject
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_WPVS, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_JCIY, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_SFHC, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0070);
		}

		// class UInterpTrackFloatBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_59GL, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0090);
		}

		// class UInterpTrackAnimControl : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_XD6M, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B0);
		}

		// class UInterpTrackVectorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_QBEW, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0090);
		}

		// class UInterpTrackAudioMaster : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0090);
		}

		// class UInterpTrackBoolProp : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0088);
		}

		// class UInterpTrackColorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x0098);
		}

		// class UInterpTrackColorScale : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0090);
		}

		// class UInterpTrackDirector : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_P74Q, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0088);
		}

		// class UInterpTrackEvent : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_A0ID, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0088);
		}

		// class UInterpTrackFade : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_CRLY, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_AF8S, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00A8);
		}

		// class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_BQHZ, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B0);
		}

		// class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00A8);
		}

		// class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x0098);
		}

		// class UInterpTrackFloatProp : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x0098);
		}

		// class UInterpTrackInst : public UObject
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0028);
		}

		// class UInterpTrackInstAnimControl : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_OY4F, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0030);
		}

		// class UInterpTrackInstAudioMaster : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0028);
		}

		// class UInterpTrackInstProperty : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0050);
		}

		// class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_F5IR, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_AUEN, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0068);
		}

		// class UInterpTrackInstColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_M16Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_SCTN, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0060);
		}

		// class UInterpTrackInstColorScale : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0028);
		}

		// class UInterpTrackInstDirector : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0030);
		}

		// class UInterpTrackInstEvent : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_Z64G, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0030);
		}

		// class UInterpTrackInstFade : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0028);
		}

		// class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_1HMK, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0040);
		}

		// class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0060);
		}

		// class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_J7A1, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0030);
		}

		// class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_CZKF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_S1DR, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0060);
		}

		// class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_M7LI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0068);
		}

		// class UInterpTrackInstMove : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0040);
		}

		// class UInterpTrackInstParticleReplay : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_JIA9, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0030);
		}

		// class UInterpTrackInstSlomo : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_74AS, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0030);
		}

		// class UInterpTrackInstSound : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_4XN8, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0038);
		}

		// class UInterpTrackInstToggle : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_S7PO, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_AXDP, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0038);
		}

		// class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0060);
		}

		// class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_1EW3, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_1O57, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0068);
		}

		// class UInterpTrackInstVisibility : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_3M43, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0030);
		}

		// class UInterpTrackLinearColorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_6EB3, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0090);
		}

		// class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x0098);
		}

		// class UInterpTrackMove : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_WVTP, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_7R7P, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00C8);
		}

		// class UInterpTrackMoveAxis : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_LMWU, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00A8);
		}

		// class UInterpTrackParticleReplay : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0080);
		}

		// class UInterpTrackSlomo : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0090);
		}

		// class UInterpTrackSound : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_36RE, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00A8);
		}

		// class UInterpTrackToggle : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_8CYR, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0088);
		}

		// class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00A8);
		}

		// class UInterpTrackVectorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x0098);
		}

		// class UInterpTrackVisibility : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_6V2O, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0088);
		}

		// class UIntSerialization : public UObject
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_EYSJ, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_HHRO, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_2KVE, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_4F9A, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0050);
		}

		// class AKillZVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x0268);
		}

		// class UKismetArrayLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0028);
		}

		// class UKismetGuidLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0028);
		}

		// class UKismetInputLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0028);
		}

		// class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0028);
		}

		// class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0028);
		}

		// class UKismetMathLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0028);
		}

		// class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0028);
		}

		// class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0028);
		}

		// class UKismetStringLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0028);
		}

		// class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0028);
		}

		// class UKismetSystemLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0028);
		}

		// class UKismetTextLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0028);
		}

		// class ULayer : public UObject
		TEST_METHOD(Class__Engine__Layer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_NI7N, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0048);
		}

		// class ULevelPartitionInterface : public UInterface
		TEST_METHOD(Class__Engine__LevelPartitionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelPartitionInterface, 0x0028);
		}

		// class ULevel : public UObject
		TEST_METHOD(Class__Engine__Level)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_QUXY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActorCluster, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingUnbuiltComponents, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingDirtyResources, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavDataChunks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StreamingTextureGuids, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_UB19, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelBuildDataId, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MapBuildData, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightBuildLevelOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_HXP1, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, WorldSettings, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_W0ET, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_V4H1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, DestroyedReplicatedStaticActors, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0298);
		}

		// class ULevelActorContainer : public UObject
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, Actors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0038);
		}

		// class ALevelBounds : public AActor
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, BoxComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_U4WO, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0230);
		}

		// class ALevelScriptActor : public AActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_83ZU, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0228);
		}

		// class ULevelScriptBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00A0);
		}

		// class UWorld : public UObject
		TEST_METHOD(Class__Engine__World)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_ZGCV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PerModuleDataObjects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsToConsider, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingInvisibility, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DemoNetDriver, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_N5D0, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_XR1O, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelCollections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_IH8Z, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_T5D6, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedPreEndOfFrameSync, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate_OnGameThread, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_SXZC, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_55V2, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PSCPool, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_C14E, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x0788);
		}

		// class ULevelStreaming : public UObject
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_0257, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, StreamingPriority, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_2Q3C, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_0URV, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_HBO3, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_DGD0, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0150);
		}

		// class ULevelStreamingAlwaysLoaded : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0150);
		}

		// class ULevelStreamingDynamic : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingDynamic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingDynamic, 0x0150);
		}

		// class ULevelStreamingPersistent : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0150);
		}

		// class ALevelStreamingVolume : public AVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_FB4T, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_1JR6, 0x026D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x0270);
		}

		// class ULightmappedSurfaceCollection : public UObject
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0040);
		}

		// class ULightMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_WWYQ, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x0108);
		}

		// class ULightMapVirtualTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapVirtualTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, TypeToLayer, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, UnknownData_LB6D, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture2D, 0x0118);
		}

		// class ALightmassCharacterIndirectDetailVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x0258);
		}

		// class ALightmassImportanceVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x0258);
		}

		// class ALightmassPortal : public AActor
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightmassPortal, PortalComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassPortal, 0x0228);
		}

		// class ULightmassPortalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x0200);
		}

		// class ULightmassPrimitiveSettingsObject : public UObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0040);
		}

		// class ULineBatchComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_CAIZ, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x0480);
		}

		// class ULocalPlayer : public UPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_ZFLL, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_OAUA, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_MABU, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_ZF11, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_VJLO, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x0258);
		}

		// class ULocalPlayerSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__LocalPlayerSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayerSubsystem, 0x0030);
		}

		// class ALODActor : public AActor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, ImpostersStaticMeshComponents, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Proxy, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Key, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODDrawDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODLevel, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubActors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, CachedNumHLODLevels, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_KA8E, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODActor, 0x02A8);
		}

		// class ULODSyncComponent : public UActorComponent
		TEST_METHOD(Class__Engine__LODSyncComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, NumLODs, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, ForcedLOD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, ComponentsToSync, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CustomLODMapping, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CurrentLOD, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CurrentNumLODs, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, DriveComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, SubComponents, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODSyncComponent, 0x0140);
		}

		// class ULODSyncInterface : public UInterface
		TEST_METHOD(Class__Engine__LODSyncInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODSyncInterface, 0x0028);
		}

		// class UMapBuildDataRegistry : public UObject
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_EL1C, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x0238);
		}

		// class UMaterial : public UMaterialInterface
		TEST_METHOD(Class__Engine__Material)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterialMask, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysicalMaterialMap, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_ZTF1, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_ZQTV, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Anisotropy, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_UD0F, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_JFR2, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Tangent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_Z3PZ, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_GHPM, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModels, 0x0156);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_0N6A, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_J8WL, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_F1CC, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_ETZ3, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModelFromMaterialExpression, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_QNT2, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_KE79, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_49ND, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_8L3R, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_E2AL, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_UTMW, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingRate, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilCompare, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilRefValue, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionMode, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_QPAS, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_DPXF, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaxDisplacement, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_EVI3, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CachedExpressionData, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x0490);
		}

		// class UMaterialBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0450);
		}

		// class UMaterialExpressionAbs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, UnknownData_UTN4, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0058);
		}

		// class UMaterialExpressionActorPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0040);
		}

		// class UMaterialExpressionAdd : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_7U7M, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_TNJ7, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x0070);
		}

		// class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x0080);
		}

		// class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x0080);
		}

		// class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Threshold, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_DO5O, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x0088);
		}

		// class UMaterialExpressionAppendVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_LI9M, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_D93R, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x0068);
		}

		// class UMaterialExpressionArccosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, UnknownData_ZO5X, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0058);
		}

		// class UMaterialExpressionArccosineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, UnknownData_NCB7, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0058);
		}

		// class UMaterialExpressionArcsine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, UnknownData_CGUT, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0058);
		}

		// class UMaterialExpressionArcsineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, UnknownData_RLW0, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0058);
		}

		// class UMaterialExpressionArctangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, UnknownData_MK20, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0058);
		}

		// class UMaterialExpressionArctangent2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_LHSB, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_B18M, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x0068);
		}

		// class UMaterialExpressionArctangent2Fast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_UA18, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_0QWE, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x0068);
		}

		// class UMaterialExpressionArctangentFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, UnknownData_SWT8, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0058);
		}

		// class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, UnknownData_6O27, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0058);
		}

		// class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0040);
		}

		// class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0040);
		}

		// class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, UnknownData_4M7A, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionBlackBody : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, UnknownData_WIA2, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0058);
		}

		// class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_GCGS, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_63VW, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_DYNB, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_PV2B, 0x0086);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x0088);
		}

		// class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_YRH0, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x0058);
		}

		// class UMaterialExpressionBumpOffset : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_0447, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_OUHY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_380L, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0088);
		}

		// class UMaterialExpressionCameraPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0040);
		}

		// class UMaterialExpressionCameraVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0040);
		}

		// class UMaterialExpressionCeil : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, UnknownData_A81Y, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0058);
		}

		// class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, bUseCustomPrimitiveData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, PrimitiveDataIndex, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, UnknownData_JEIY, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0070);
		}

		// class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionChannelMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, MaskChannel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_A75H, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionChannelMaskParameter, 0x0078);
		}

		// class UMaterialExpressionClamp : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_A1SI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_U5LE, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_AJBM, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_IJEL, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0088);
		}

		// class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, UnknownData_W62F, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCloudSampleAttribute)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCloudSampleAttribute, 0x0040);
		}

		// class UMaterialExpressionCollectionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0060);
		}

		// class UMaterialExpressionComment : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, Text, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_8BBQ, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0070);
		}

		// class UMaterialExpressionComponentMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_4E1U, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_JSZ3, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x0058);
		}

		// class UMaterialExpressionConstant : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_8W6X, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0048);
		}

		// class UMaterialExpressionConstant2Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0048);
		}

		// class UMaterialExpressionConstant3Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0050);
		}

		// class UMaterialExpressionConstant4Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0050);
		}

		// class UMaterialExpressionConstantBiasScale : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_C8E7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_WVK0, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x0060);
		}

		// class UMaterialExpressionSceneDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_2HF6, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_2GLD, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_LPL1, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_6DAF, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0078);
		}

		// class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepthWithoutWater)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_VCKC, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_2H7M, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, ConstInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, FallbackDepth, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_HHNW, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepthWithoutWater, 0x0068);
		}

		// class UMaterialExpressionSceneTexelSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0040);
		}

		// class UMaterialExpressionSceneTexture : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_ZU88, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_LH41, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x0058);
		}

		// class UMaterialExpressionScreenPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0040);
		}

		// class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0060);
		}

		// class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShaderStageSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, PixelShader, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_ZB5L, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, VertexShader, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_QK7F, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShaderStageSwitch, 0x0068);
		}

		// class UMaterialExpressionShadingModel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, ShadingModel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, UnknownData_L2X8, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingModel, 0x0048);
		}

		// class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingPathSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_0TVV, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_J3YU, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingPathSwitch, 0x0090);
		}

		// class UMaterialExpressionShadowReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadowReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_2YCH, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Shadow, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_T2CM, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadowReplace, 0x0068);
		}

		// class UMaterialExpressionSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, UnknownData_EC3O, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0058);
		}

		// class UMaterialExpressionSine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_ITM1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x0058);
		}

		// class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionSingleLayerWaterMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ScatteringCoefficients, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_Q72F, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, AbsorptionCoefficients, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_8NYS, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, PhaseG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_SJ8B, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ColorScaleBehindWater, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_9X1X, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, 0x0090);
		}

		// class UMaterialExpressionSkinningVertexOffsets : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkinningVertexOffsets)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkinningVertexOffsets, 0x0040);
		}

		// class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, UnknownData_IVAI, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDirection, 0x0048);
		}

		// class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightIlluminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, WorldPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, UnknownData_9J0G, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDiskLuminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, UnknownData_M31W, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, 0x0048);
		}

		// class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereAerialPerspective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, UnknownData_A6N1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance, 0x0040);
		}

		// class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereViewLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereViewLuminance, 0x0040);
		}

		// class UMaterialExpressionSmoothStep : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSmoothStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_HCJG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Max, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_GV8E, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Value, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_EAT0, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstValue, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSmoothStep, 0x0088);
		}

		// class UMaterialExpressionSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_8NYG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Index, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_5FXM, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Seed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_HI4X, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x0088);
		}

		// class UMaterialExpressionSpeedTree : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_9S9L, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindInput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_6TN1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_0UXX, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, ExtraBendWS, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_4W2E, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_W5KV, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_MZSY, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x00A0);
		}

		// class UMaterialExpressionSphereMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_FAQI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_E54T, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_AKHH, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_N18U, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x0098);
		}

		// class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_9LQL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x0058);
		}

		// class UMaterialExpressionSquareRoot : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, UnknownData_27P2, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0058);
		}

		// class UMaterialExpressionStaticBool : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_2RR4, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0048);
		}

		// class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_RLKD, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0060);
		}

		// class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_5PP6, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x0060);
		}

		// class UMaterialExpressionStaticSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_JEO0, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_BUUT, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_B52Y, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_AMZV, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0080);
		}

		// class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x0060);
		}

		// class UMaterialExpressionStep : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, UnknownData_W719, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, UnknownData_MGMS, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, ConstY, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, ConstX, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStep, 0x0070);
		}

		// class UMaterialExpressionSubtract : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_2PIC, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_WLSI, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x0070);
		}

		// class UMaterialExpressionTangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_OT2C, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x0058);
		}

		// class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, UnknownData_3FMY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0058);
		}

		// class UMaterialExpressionTemporalSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Index, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_J3KL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Seed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_HBSU, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_ZZ2W, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x0078);
		}

		// class UMaterialExpressionTextureCoordinate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_PSU2, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0050);
		}

		// class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0048);
		}

		// class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x0080);
		}

		// class UMaterialExpressionTextureProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_DSFM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_BM4U, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x0058);
		}

		// class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2DArray)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2DArray, 0x0080);
		}

		// class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x0080);
		}

		// class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_LA0G, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x0088);
		}

		// class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterVolume, 0x0080);
		}

		// class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_2Q92, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00B0);
		}

		// class UParticleModuleEventBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0030);
		}

		// class UParticleModuleEventGenerator : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0040);
		}

		// class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_B8Z9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_O21B, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0040);
		}

		// class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_E4CH, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0048);
		}

		// class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_7FER, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_XV9L, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00D8);
		}

		// class UParticleModuleEventSendToGame : public UObject
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0028);
		}

		// class UParticleModuleKillBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0030);
		}

		// class UParticleModuleKillBox : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_MNWY, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00C8);
		}

		// class UParticleModuleKillHeight : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_4C75, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0068);
		}

		// class UParticleModuleLifetimeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0030);
		}

		// class UParticleModuleLifetime : public UParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, LifeTime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0060);
		}

		// class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0080);
		}

		// class UParticleModuleLightBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0030);
		}

		// class UParticleModuleLight : public UParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_T875, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightingChannels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_IIVY, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_4IDM, 0x011A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0120);
		}

		// class UParticleModuleLight_Seeded : public UParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0140);
		}

		// class UParticleModuleLocation : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0080);
		}

		// class UParticleModuleLocation_Seeded : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00A0);
		}

		// class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_35D6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_UZR6, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_B39Y, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_35MB, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0070);
		}

		// class UParticleModuleLocationDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0150);
		}

		// class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_GQRD, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_DP4X, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_1TPV, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_EXIQ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0050);
		}

		// class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0038);
		}

		// class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_CNSC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00B0);
		}

		// class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_PUKY, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_PV58, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0120);
		}

		// class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0140);
		}

		// class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00E0);
		}

		// class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0100);
		}

		// class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0108);
		}

		// class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_HUJR, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_UV31, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_YDIG, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_I0GS, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0090);
		}

		// class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0080);
		}

		// class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00A0);
		}

		// class UParticleModuleMaterialBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0030);
		}

		// class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0040);
		}

		// class UParticleModuleMeshRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_1KTB, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0080);
		}

		// class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00A0);
		}

		// class UParticleSystemComponent : public UFXSystemComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_OVLP, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_UE0R, 0x046B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x0476);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_AEOV, 0x0477);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, bOldPositionValid, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_T70E, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_GKT2, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_UGG0, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_PUV6, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_0XBJ, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_JZJB, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x059A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_G0SU, 0x059B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_AM6G, 0x05D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x06A0);
		}

		// class UParticleSystemReplay : public UObject
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_TS5J, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0040);
		}

		// class UPathFollowingAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__PathFollowingAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingAgentInterface, 0x0028);
		}

		// class UPawnNoiseEmitterComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_MTG3, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_XYXF, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x00D8);
		}

		// class UPhysicalAnimationComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_BJW4, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, SkeletalMeshComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_YWZD, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x00F0);
		}

		// class UPhysicalMaterialMask : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UVChannelIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressX, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressY, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UnknownData_66EQ, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialMask, 0x0030);
		}

		// class UPhysicsAsset : public UObject
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_FCS5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SolverIterations, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_HQ71, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0138);
		}

		// class USkeletalBodySetup : public UBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, bSkipScaleFromAnimation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_NI8W, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x02B8);
		}

		// class UPhysicsCollisionHandler : public UObject
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_6QB2, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0040);
		}

		// class ARigidBodyBase : public AActor
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0220);
		}

		// class APhysicsConstraintActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_H2G9, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0240);
		}

		// class UPhysicsConstraintComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_IIVY, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x0400);
		}

		// class UPhysicsConstraintTemplate : public UObject
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_T4SI, 0x0304);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x0308);
		}

		// class UPhysicsHandleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_D7E9, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_P31A, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_VLVB, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_GM97, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x0160);
		}

		// class UPhysicsSettings : public UPhysicsSettingsCore
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicErrorCorrection, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x0117);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicStaticPairs, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicKinematicPairs, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_SRO0, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AnimPhysicsMinDeltaTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateAnimPhysicsAfterReset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_FGHL, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_4WDU, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_KHGI, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultBroadphaseSettings, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinDeltaVelocityForHitEvents, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ChaosSettings, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_XPMS, 0x019F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x01A0);
		}

		// class UPhysicsSpringComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_XDU8, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_CVNV, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_VYQK, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x0220);
		}

		// class APhysicsThruster : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0228);
		}

		// class UPhysicsThrusterComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, UnknownData_2R38, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x0200);
		}

		// class ASceneCapture : public AActor
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, SceneComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0230);
		}

		// class APlanarReflection : public ASceneCapture
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, PlanarReflectionComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, bShowPreviewPlane, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, UnknownData_9XME, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanarReflection, 0x0240);
		}

		// class USceneCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_STFY, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bUseRayTracingIfEnabled, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_3WSP, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_JJWM, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ProfilingEventName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_QMBK, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x02B0);
		}

		// class UPlanarReflectionComponent : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bShowPreviewPlane, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_QOMY, 0x02E6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x03A0);
		}

		// class APlaneReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0228);
		}

		// class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, InfluenceRadiusScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_W4UK, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_MFAB, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x0290);
		}

		// class UPlatformEventsComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x00D0);
		}

		// class UPlatformInterfaceWebResponse : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_YQWB, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B0);
		}

		// class APlayerCameraManager : public AActor
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_TFFV, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_HZDU, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_FWFB, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_9SRJ, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_SC2C, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCachePrivate, 0x1AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCachePrivate, 0x2090);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x2680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultModifiers, 0x2690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x26A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x26A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTargetOffset, 0x26B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_QGVB, 0x26BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, OnAudioFadeChangeEvent, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_L4HW, 0x26D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x26E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CachedCameraShakeMod, 0x26F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x26F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PostProcessBlendCache, 0x2738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_4V0V, 0x2748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x2758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x2768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x2778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_1JT9, 0x2782);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x2784);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x2788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x278C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x2790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x2794);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x2798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_MZ3E, 0x279C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ServerUpdateCameraTimeout, 0x27A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_CX6V, 0x27A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x27B0);
		}

		// class UPlayerInput : public UObject
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_XULG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_XVYV, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_ACUG, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x03A8);
		}

		// class APlayerStart : public ANavigationObjectBase
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x0250);
		}

		// class APlayerStartPIE : public APlayerStart
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x0250);
		}

		// class UPluginCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_YEDB, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A0);
		}

		// class APointLight : public ALight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0238);
		}

		// class UPolys : public UObject
		TEST_METHOD(Class__Engine__Polys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_U9E2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0038);
		}

		// class UPoseableMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_9EF9, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x07F0);
		}

		// class UPoseAsset : public UAnimationAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_OM78, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0120);
		}

		// class UPoseWatch : public UObject
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_8TZ7, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0038);
		}

		// class UPostProcessComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_7Z2C, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_PYLP, 0x075D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x0760);
		}

		// class APostProcessVolume : public AVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_6S50, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_QYE2, 0x07BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x07C0);
		}

		// class APrecomputedVisibilityOverrideVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x0288);
		}

		// class APrecomputedVisibilityVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x0258);
		}

		// class UPreviewCollectionInterface : public UInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0028);
		}

		// class UPreviewMeshCollection : public UDataAsset
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_GN6W, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0050);
		}

		// class UPrimaryAssetLabel : public UPrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_4AWX, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0068);
		}

		// class UProjectileMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_R6W6, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinFrictionFraction, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_7U2M, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceAdditionalIterations, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationTime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpRotationTime, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationMaxLagDistance, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationSnapToTargetDistance, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_GECA, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x01D0);
		}

		// class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__ProxyLODMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProxyLODMeshSimplificationSettings, 0x0040);
		}

		// class ARadialForceActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0228);
		}

		// class URadialForceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_MC48, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_R8P9, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_ZJNB, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0230);
		}

		// class ARectLight : public ALight
		TEST_METHOD(Class__Engine__RectLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARectLight, RectLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARectLight, 0x0238);
		}

		// class URectLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__RectLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceWidth, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceHeight, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorAngle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorLength, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceTexture, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, UnknownData_ENLL, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLightComponent, 0x0360);
		}

		// class URendererSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_9N3A, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_QLE8, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_7BPT, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_CPSM, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileBorderSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureFeedbackFactor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_0TTM, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_VDKI, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_876U, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_WVTE, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_UK7U, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_0155, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bEnableAlphaChannelInPostProcessing, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_AEDP, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_S56K, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_1AKV, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposureBias, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_3905, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultLightUnits, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_CVCT, 0x00A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_PTLM, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_SL92, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_R8W9, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_XYLQ, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_A4ZC, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeX, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeY, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_AV3W, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_K7KU, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_TCRF, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ZMPQ, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultSkinCacheBehavior, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_217H, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_6E32, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_OL7E, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnlimitedBonInfluencesThreshold, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobilePlanarReflectionMode, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bStreamSkeletalMeshLODs, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bDiscardSkeletalMeshOptionalLODs, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_YJ5H, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationColorMaterialPath, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationCustomMaterialPath, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationGrayscaleMaterialPath, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x0140);
		}

		// class URendererOverrideSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_59S3, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0040);
		}

		// class UReplayNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ReplayNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplayNetConnection, UnknownData_0ZBU, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplayNetConnection, 0x22F0);
		}

		// class UReplaySubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__Engine__ReplaySubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplaySubsystem, UnknownData_AOIP, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplaySubsystem, 0x0038);
		}

		// class UReplicationDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationDriver, 0x0028);
		}

		// class UReplicationConnectionDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationConnectionDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationConnectionDriver, 0x0028);
		}

		// class UReporterBase : public UObject
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_RQKK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0030);
		}

		// class UReporterGraph : public UReporterBase
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_J4XJ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00A8);
		}

		// class UReverbEffect : public UObject
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, bBypassEarlyReflections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, UnknownData_7SF6, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, bBypassLateReflections, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, UnknownData_2AH9, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0060);
		}

		// class URig : public UObject
		TEST_METHOD(Class__Engine__Rig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, UnknownData_3V0D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0050);
		}

		// class URotatingMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_ZNGS, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0110);
		}

		// class URuntimeOptionsBase : public UObject
		TEST_METHOD(Class__Engine__RuntimeOptionsBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeOptionsBase, UnknownData_5NL7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeOptionsBase, 0x0038);
		}

		// class URuntimeVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__RuntimeVirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileBorderSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, MaterialType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bCompressTextures, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bClearTextures, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bSinglePhysicalSpace, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bPrivateSpace, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bAdaptive, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bContinuousUpdate, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_AX53, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, RemoveLowMips, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, LODGroup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_WWJN, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, Size, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, StreamingTexture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_3WBZ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTexture, 0x00A0);
		}

		// class URuntimeVirtualTextureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_3ZFJ, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, BoundsAlignActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bSetBoundsButton, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bSnapBoundsToLandscape, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_RCU4, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, VirtualTexture, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bEnableScalability, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_R8IG, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, ScalabilityGroup, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bHidePrimitives, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_HURX, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, StreamingTexture, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, StreamLowMips, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bBuildStreamingMipsButton, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bEnableCompressCrunch, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bUseStreamingLowMipsInEditor, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bBuildDebugStreamingMips, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_EUTU, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureComponent, 0x0270);
		}

		// class ARuntimeVirtualTextureVolume : public AActor
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARuntimeVirtualTextureVolume, VirtualTextureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARuntimeVirtualTextureVolume, 0x0228);
		}

		// class URVOAvoidanceInterface : public UInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0028);
		}

		// class USaveGame : public UObject
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0028);
		}

		// class UScene : public UObject
		TEST_METHOD(Class__Engine__Scene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0028);
		}

		// class ASceneCapture2D : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0238);
		}

		// class USceneCaptureComponent2D : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ProjectionType, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_LXAO, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_ZK8M, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_KDXU, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_A55H, 0x0825);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomNearClippingPlane, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_UAVX, 0x082D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_2LB7, 0x0871);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_FEZP, 0x088D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bDisableFlipCopyGLES, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_FIYB, 0x0891);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x08B0);
		}

		// class USceneCaptureComponentCube : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, bCaptureRotation, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_CZBG, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetLeft, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetRight, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetODS, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, IPD, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_WW9H, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x02E0);
		}

		// class ASceneCaptureCube : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0238);
		}

		// class USCS_Node : public UObject
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_DHUN, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x00D8);
		}

		// class USelection : public UObject
		TEST_METHOD(Class__Engine__Selection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_KXGL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A0);
		}

		// class AServerStatReplicator : public AInfo
		TEST_METHOD(Class__Engine__ServerStatReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bUpdateStatNet, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bOverwriteClientStats, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_ZKCD, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, Channels, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRate, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_861A, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, MaxPacketOverhead, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMax, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMin, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientAvg, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMax, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMin, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientAvg, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMax, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMin, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientAvg, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMax, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMin, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientAvg, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetNumClients, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPackets, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPackets, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InBunches, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutBunches, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutLoss, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InLoss, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesSent, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesRecv, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsSent, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsRecv, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentInVoice, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentOutVoice, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActorChannels, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumConsideredActors, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PrioritizedActors, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantActors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantDeletedActors, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActorAttempts, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActors, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActors, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetActors, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumDormantActors, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumInitiallyDormantActors, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsAckd, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsPending, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsUnAckd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, ObjPathBytes, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDOutRate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDInRate, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetSaturated, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_WCIV, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerStatReplicator, 0x02E8);
		}

		// class UShadowMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_UTHB, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x0108);
		}

		// class USimpleConstructionScript : public UObject
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_OWSK, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00A0);
		}

		// class ASkeletalMeshActor : public AActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_4ZU8, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_ANUU, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_1XXS, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x02A8);
		}

		// class USkeletalMeshEditorData : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshEditorData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshEditorData, 0x0028);
		}

		// class USkeletalMeshLODSettings : public UDataAsset
		TEST_METHOD(Class__Engine__SkeletalMeshLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MinLOD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, DisableBelowMinLodStripping, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bOverrideLODStreamingSettings, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bSupportLODStreaming, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, UnknownData_AS8Y, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumStreamedLODs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumOptionalLODs, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, LODGroups, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshLODSettings, 0x0050);
		}

		// class USkeletalMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__SkeletalMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimplificationSettings, SkeletalMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimplificationSettings, 0x0040);
		}

		// class USkeletalMeshSocket : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_E6RA, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0060);
		}

		// class USkyAtmosphereComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SkyAtmosphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_SCAJ, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, BottomRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, GroundAlbedo, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AtmosphereHeight, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MultiScatteringFactor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TraceSampleCountScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScatteringScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScattering, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighExponentialDistribution, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScatteringScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScattering, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorptionScale, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorption, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAnisotropy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieExponentialDistribution, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorptionScale, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorption, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherTentDistribution, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, SkyLuminanceFactor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPespectiveViewDistanceScale, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, HeightFogContribution, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TransmittanceMinLightElevationAngle, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPerspectiveStartDepth, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_ZDCV, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, bStaticLightingBuiltGUID, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_LGI8, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyAtmosphereComponent, 0x02D0);
		}

		// class ASkyAtmosphere : public AInfo
		TEST_METHOD(Class__Engine__SkyAtmosphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyAtmosphere, SkyAtmosphereComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyAtmosphere, 0x0228);
		}

		// class USkyLightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_JBYV, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_P0XG, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_2L54, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionStrength, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionExtent, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionMapResolutionScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionApertureScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_TLM2, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_EAUW, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x0410);
		}

		// class USoundGroups : public UObject
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_TY5Y, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0088);
		}

		// class USoundMix : public UObject
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_RWAT, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0090);
		}

		// class USoundNodeAttenuation : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_J5WT, 0x03F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x03F8);
		}

		// class USoundNodeBranch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0050);
		}

		// class USoundNodeConcatenator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0058);
		}

		// class USoundNodeDelay : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0050);
		}

		// class UObject
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0028);
		}

		// class UInterface : public UObject
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0028);
		}

		// class UGCObjectReferencer : public UObject
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_AV5M, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0070);
		}

		// class UTextBuffer : public UObject
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_UFJL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0050);
		}

		// class UField : public UObject
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0030);
		}

		// class UStruct : public UField, public FStructBaseChain
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ChildProperties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptAndPropertyObjectReferences, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnresolvedScriptProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnversionedSchema, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x00B0);
		}

		// class UScriptStruct : public UStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_VPXB, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x00C0);
		}

		// class UPackage : public UObject
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_PZ3J, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x00A0);
		}

		// class UClass : public UStruct
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_40VP, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0230);
		}

		// class UFunction : public UStruct
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_2E23LJISRX, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_S6JSZARN0K, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_AP04IPWWFB, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00E0);
		}

		// class UDelegateFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00E0);
		}

		// class USparseDelegateFunction : public UDelegateFunction
		TEST_METHOD(Class__CoreUObject__SparseDelegateFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USparseDelegateFunction, UnknownData_FC0J, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USparseDelegateFunction, 0x00F0);
		}

		// class UDynamicClass : public UClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_ZTW9, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x02B0);
		}

		// class UPackageMap : public UObject
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_MQ4P, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E0);
		}

		// class UEnum : public UField
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_KUYN, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0060);
		}

		// class ULinkerPlaceholderClass : public UClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_0WP0, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x03E8);
		}

		// class ULinkerPlaceholderExportObject : public UObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_I1FI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00F0);
		}

		// class ULinkerPlaceholderFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_289F, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x0298);
		}

		// class UMetaData : public UObject
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_3I2T, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x00C8);
		}

		// class UObjectRedirector : public UObject
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_UCEA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0030);
		}

		// class UProperty : public UField
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_SKPM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0070);
		}

		// class UEnumProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_PJPE, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0080);
		}

		// class UArrayProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_JQ4F, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0078);
		}

		// class UObjectPropertyBase : public UProperty
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_47GI, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0078);
		}

		// class UBoolProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_ROVN, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0078);
		}

		// class UNumericProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0070);
		}

		// class UByteProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_7RQ0, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0078);
		}

		// class UObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0078);
		}

		// class UClassProperty : public UObjectProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_TQFE, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0080);
		}

		// class UDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDelegateProperty, UnknownData_YL5I, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0078);
		}

		// class UDoubleProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0070);
		}

		// class UFloatProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0070);
		}

		// class UIntProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0070);
		}

		// class UInt8Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0070);
		}

		// class UInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0070);
		}

		// class UInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0070);
		}

		// class UInterfaceProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_QX5Q, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0078);
		}

		// class ULazyObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0078);
		}

		// class UMapProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_GCL9, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x0098);
		}

		// class UMulticastDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_MA8L, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0078);
		}

		// class UMulticastInlineDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegateProperty, 0x0078);
		}

		// class UMulticastSparseDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastSparseDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastSparseDelegateProperty, 0x0078);
		}

		// class UNameProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0070);
		}

		// class USetProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_E3L6, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x0090);
		}

		// class USoftObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0078);
		}

		// class USoftClassProperty : public USoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_BTBF, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0080);
		}

		// class UStrProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0070);
		}

		// class UStructProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_Q0DA, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0078);
		}

		// class UUInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0070);
		}

		// class UUInt32Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0070);
		}

		// class UUInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0070);
		}

		// class UWeakObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0078);
		}

		// class UTextProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0070);
		}

		// class UPropertyWrapper : public UObject
		TEST_METHOD(Class__CoreUObject__PropertyWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyWrapper, UnknownData_3Z38, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyWrapper, 0x0030);
		}

		// class UMulticastDelegatePropertyWrapper : public UPropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegatePropertyWrapper, 0x0030);
		}

		// class UMulticastInlineDelegatePropertyWrapper : public UMulticastDelegatePropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegatePropertyWrapper, 0x0030);
		}

		// class ULowEntryBitDataEntry : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryBitDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, Type, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, ByteValue, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, UnknownData_O0WW, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, IntegerValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, LongBytesValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, FloatValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, UnknownData_N9OG, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, DoubleBytesValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, BooleanValue, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, UnknownData_UA3L, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, StringUtf8Value, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, ByteArrayValue, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, IntegerArrayValue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, LongBytesArrayValue, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, FloatArrayValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, DoubleBytesArrayValue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, BooleanArrayValue, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, StringUtf8ArrayValue, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryBitDataEntry, 0x00D0);
		}

		// class ULowEntryBitDataReader : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryBitDataReader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataReader, Bytes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataReader, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataReader, CurrentByte, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataReader, UnknownData_K5YF, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataReader, CurrentBytePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataReader, UnknownData_RYJ7, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryBitDataReader, 0x0048);
		}

		// class ULowEntryBitDataWriter : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryBitDataWriter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataWriter, Bytes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataWriter, CurrentByte, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataWriter, UnknownData_XCG5, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataWriter, CurrentBytePosition, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryBitDataWriter, 0x0040);
		}

		// class ULowEntryByteArray : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryByteArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteArray, ByteArray, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryByteArray, 0x0038);
		}

		// class ULowEntryByteDataEntry : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryByteDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, Type, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, ByteValue, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, UnknownData_KMG4, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, IntegerValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, LongBytesValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, FloatValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, UnknownData_KN3K, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, DoubleBytesValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, BooleanValue, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, UnknownData_7ZCT, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, StringUtf8Value, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, ByteArrayValue, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, IntegerArrayValue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, LongBytesArrayValue, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, FloatArrayValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, DoubleBytesArrayValue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, BooleanArrayValue, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, StringUtf8ArrayValue, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryByteDataEntry, 0x00D0);
		}

		// class ULowEntryByteDataReader : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryByteDataReader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataReader, Bytes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataReader, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataReader, UnknownData_1TZA, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryByteDataReader, 0x0040);
		}

		// class ULowEntryByteDataWriter : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryByteDataWriter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataWriter, Bytes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryByteDataWriter, 0x0038);
		}

		// class ULowEntryDouble : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryDouble)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryDouble, Bytes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryDouble, 0x0038);
		}

		// class ULowEntryExecutionQueue : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryExecutionQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryExecutionQueue, Count, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryExecutionQueue, Next, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryExecutionQueue, UnknownData_4YT3, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryExecutionQueue, 0x0030);
		}

		// class ULowEntryExtendedStandardLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryExtendedStandardLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryExtendedStandardLibrary, 0x0028);
		}

		// class ULowEntryLatentActionBoolean : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryLatentActionBoolean)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionBoolean, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionBoolean, Result, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionBoolean, UnknownData_Y8JP, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionBoolean, KeepAliveCount, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryLatentActionBoolean, 0x0030);
		}

		// class ULowEntryLatentActionFloat : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryLatentActionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionFloat, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionFloat, UnknownData_J856, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionFloat, Result, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionFloat, KeepAliveCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionFloat, UnknownData_HAQO, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryLatentActionFloat, 0x0038);
		}

		// class ULowEntryLatentActionInteger : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryLatentActionInteger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionInteger, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionInteger, UnknownData_E7OY, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionInteger, Result, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionInteger, KeepAliveCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionInteger, UnknownData_7ESQ, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryLatentActionInteger, 0x0038);
		}

		// class ULowEntryLatentActionNone : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryLatentActionNone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionNone, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionNone, UnknownData_ZQLI, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionNone, KeepAliveCount, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryLatentActionNone, 0x0030);
		}

		// class ULowEntryLatentActionObject : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryLatentActionObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionObject, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionObject, UnknownData_1O2U, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionObject, Result, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionObject, KeepAliveCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionObject, UnknownData_B7GB, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryLatentActionObject, 0x0040);
		}

		// class ULowEntryLatentActionString : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryLatentActionString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionString, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionString, UnknownData_3O5W, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionString, Result, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionString, KeepAliveCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionString, UnknownData_MQMM, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryLatentActionString, 0x0048);
		}

		// class ULowEntryLong : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryLong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLong, Bytes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryLong, 0x0038);
		}

		// class ULowEntryParsedHashcash : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryParsedHashcash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryParsedHashcash, Valid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryParsedHashcash, UnknownData_X2XL, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryParsedHashcash, Resource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryParsedHashcash, Date, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryParsedHashcash, Bits, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryParsedHashcash, UnknownData_BKGM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryParsedHashcash, 0x0050);
		}

		// class USmoothSync : public UActorComponent
		TEST_METHOD(Class__SmoothSyncPlugin__SmoothSync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, UnknownData_50V9, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, interpolationBackTime, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, ExtrapolationMode, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, useExtrapolationTimeLimit, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, UnknownData_CPF7, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, extrapolationTimeLimit, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, useExtrapolationDistanceLimit, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, UnknownData_YJAL, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, extrapolationDistanceLimit, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, sendPositionThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, sendRotationThreshold, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, sendScaleThreshold, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, sendVelocityThreshold, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, sendAngularVelocityThreshold, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, receivedPositionThreshold, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, receivedRotationThreshold, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, positionSnapThreshold, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, rotationSnapThreshold, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, scaleSnapThreshold, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, timeSmoothing, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, positionLerpSpeed, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, rotationLerpSpeed, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, scaleLerpSpeed, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, syncPosition, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, syncRotation, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, syncScale, 0x0156);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, syncVelocity, 0x0157);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, syncAngularVelocity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, syncMovementMode, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, isPositionCompressed, 0x015A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, isRotationCompressed, 0x015B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, isScaleCompressed, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, isVelocityCompressed, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, isAngularVelocityCompressed, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, UnknownData_UQHB, 0x015F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, sendRate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, isUsingOriginRebasing, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, alwaysSendOrigin, 0x0165);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, syncOwnershipChange, 0x0166);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, UnknownData_OQHC, 0x0167);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, realComponentToSync, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, UnknownData_PRFY, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, InterpolationTime, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, UnknownData_BYPB, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, atRestPositionThreshold, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, atRestRotationThreshold, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothSync, UnknownData_9EHE, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothSync, 0x0370);
		}

		// class UCameraShake_SightAiming_C : public UMatineeCameraShake
		TEST_METHOD(BlueprintGeneratedClass__CameraShake_SightAiming__CameraShake_SightAiming_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake_SightAiming_C, 0x0180);
		}

		// class UUI_ChatMessage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_ChatMessage__UI_ChatMessage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatMessage_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatMessage_C, MultiLineEditableText_Message, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatMessage_C, TextBlock_MessageType, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatMessage_C, TextBlock_PlayerName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatMessage_C, Message, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_ChatMessage_C, PlayerState, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_ChatMessage_C, 0x02A8);
		}

		// class UUI_MatchResult_ReceivedGamePoints_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_MatchResult_ReceivedGamePoints__UI_MatchResult_ReceivedGamePoints_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, NewLevel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, Image_CurrentLevel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, Image_NextLevel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, Lines, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, ProgressBar_InitialLevel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, ProgressBar_NextLevel, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, ProgressBar_PremiumProgress, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, TextBlock_InitialLevel, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, TextBlock_InitialProgress, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, TextBlock_NextLevel, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, TextBlock_PremiumProgress, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, TextBlock_ProgressForNextLevel, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, TextBlock_ReceivedGamePoints, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, TextBlock_TimeToGameRestart, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, PlayerState, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, InitialLevelInfo, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, NextLevelInfo, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, GeneralGamePoints, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, UnknownData_LBLH, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, SoundProgress, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, PremiumGamePoints, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, Alpha, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, GameState, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_MatchResult_ReceivedGamePoints_C, Timer_StartAddExp, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_MatchResult_ReceivedGamePoints_C, 0x0348);
		}

		// class UUI_GamePoints_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_GamePoints__UI_GamePoints_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GamePoints_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GamePoints_C, Anim_ShowCustomString, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GamePoints_C, Anim_ShowWidget, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GamePoints_C, TextBlock_Message, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GamePoints_C, TextBlock_Points, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GamePoints_C, Message, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GamePoints_C, customString, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GamePoints_C, AddPoint, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GamePoints_C, CurrentDisplayCharacters, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_GamePoints_C, 0x02B8);
		}

		// class UUI_Solder_WeaponCustomizationItem_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Solder_WeaponCustomizationItem__UI_Solder_WeaponCustomizationItem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, HoverIfNotAvaliable, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, Hover, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, Border, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, Border_IsEquipped, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, Button, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, Image_ItemIcon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, SizeBox, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, TextBlock_ItemName, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, WidgetSwitcher_IsAvaliable, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, ModuleClass, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, IsEquipped, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, UnknownData_OPRL, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, ClickDelegate, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, WeaponDataJson, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, ModuleDataJson, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, UI_WeaponCustomization, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, JsonRequest, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, IsLocked, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_WeaponCustomizationItem_C, IsAvaliable, 0x02F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Solder_WeaponCustomizationItem_C, 0x02F2);
		}

		// class UNamedInterfaces : public UObject
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_JKK2, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0060);
		}

		// class UTurnBasedMatchInterface : public UInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0028);
		}

		// class UBuoyancyComponent : public UActorComponent
		TEST_METHOD(Class__Water__BuoyancyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, Pontoons, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, OnEnteredWaterDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, OnExitedWaterDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, BuoyancyData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, CurrentWaterBodies, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, SimulatingComponent, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuoyancyComponent, UnknownData_CTJL, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuoyancyComponent, 0x01A8);
		}

		// class UConvertWaterBodyActorsCommandlet : public UCommandlet
		TEST_METHOD(Class__Water__ConvertWaterBodyActorsCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConvertWaterBodyActorsCommandlet, 0x0080);
		}

		// class UEnvQueryTest_InsideWaterBody : public UEnvQueryTest
		TEST_METHOD(Class__Water__EnvQueryTest_InsideWaterBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_InsideWaterBody, bIncludeWaves, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_InsideWaterBody, bSimpleWaves, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_InsideWaterBody, bIgnoreExclusionVolumes, 0x01FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_InsideWaterBody, UnknownData_TU5S, 0x01FB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_InsideWaterBody, 0x0200);
		}

		// class UGerstnerWaterWaveGeneratorBase : public UObject
		TEST_METHOD(Class__Water__GerstnerWaterWaveGeneratorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGerstnerWaterWaveGeneratorBase, 0x0028);
		}

		// class UGerstnerWaterWaveGeneratorSimple : public UGerstnerWaterWaveGeneratorBase
		TEST_METHOD(Class__Water__GerstnerWaterWaveGeneratorSimple)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSimple, NumWaves, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSimple, Seed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSimple, Randomness, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSimple, MinWavelength, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSimple, MaxWavelength, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSimple, WavelengthFalloff, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSimple, MinAmplitude, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSimple, MaxAmplitude, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSimple, AmplitudeFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSimple, WindAngleDeg, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSimple, DirectionAngularSpreadDeg, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSimple, SmallWaveSteepness, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSimple, LargeWaveSteepness, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSimple, SteepnessFalloff, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGerstnerWaterWaveGeneratorSimple, 0x0060);
		}

		// class UGerstnerWaterWaveGeneratorSpectrum : public UGerstnerWaterWaveGeneratorBase
		TEST_METHOD(Class__Water__GerstnerWaterWaveGeneratorSpectrum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSpectrum, SpectrumType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSpectrum, UnknownData_5IIV, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveGeneratorSpectrum, Octaves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGerstnerWaterWaveGeneratorSpectrum, 0x0040);
		}

		// class UWaterWavesBase : public UObject
		TEST_METHOD(Class__Water__WaterWavesBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaterWavesBase, 0x0028);
		}

		// class UWaterWaves : public UWaterWavesBase
		TEST_METHOD(Class__Water__WaterWaves)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaterWaves, 0x0028);
		}

		// class UGerstnerWaterWaves : public UWaterWaves
		TEST_METHOD(Class__Water__GerstnerWaterWaves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaves, GerstnerWaveGenerator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaves, GerstnerWaves, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaves, MaxWaveHeight, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaves, UnknownData_C3R7, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGerstnerWaterWaves, 0x0048);
		}

		// class UGerstnerWaterWaveSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__Water__GerstnerWaterWaveSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGerstnerWaterWaveSubsystem, UnknownData_6V5E, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGerstnerWaterWaveSubsystem, 0x0048);
		}

		// class ULakeCollisionComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Water__LakeCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULakeCollisionComponent, CachedBodySetup, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULakeCollisionComponent, BoxExtent, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULakeCollisionComponent, UnknownData_48YQ, 0x0454);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULakeCollisionComponent, 0x0460);
		}

		// class UNiagaraDataInterfaceWater : public UNiagaraDataInterface
		TEST_METHOD(Class__Water__NiagaraDataInterfaceWater)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceWater, SourceBody, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceWater, 0x0040);
		}

		// class UNiagaraWaterFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Water__NiagaraWaterFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraWaterFunctionLibrary, 0x0028);
		}

		// class UOceanCollisionComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Water__OceanCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOceanCollisionComponent, CachedBodySetup, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOceanCollisionComponent, UnknownData_407O, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOceanCollisionComponent, 0x0470);
		}

		// class UOceanBoxCollisionComponent : public UBoxComponent
		TEST_METHOD(Class__Water__OceanBoxCollisionComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOceanBoxCollisionComponent, 0x0470);
		}

		// class AWaterBody : public AActor
		TEST_METHOD(Class__Water__WaterBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, UnknownData_F04G, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, PhysicalMaterial, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, TargetWaveMaskDepth, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, MaxWaveHeightOffset, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, WaterBodyIndex, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, bFillCollisionUnderWaterBodiesForNavmesh, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, UnknownData_ZEEP, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, UnderwaterPostProcessSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, WaterBodyType, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, UnknownData_CS32, 0x07C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, CurveSettings, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, WaterMaterial, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, UnderwaterPostProcessMaterial, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, bAffectsLandscape, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, bGenerateCollisions, 0x07F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, bOverrideWaterMesh, 0x07FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, UnknownData_UP7V, 0x07FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, WaterMeshOverride, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, OverlapMaterialPriority, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, CollisionProfileName, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, UnknownData_556X, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, SplineComp, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, WaterSplineMetadata, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, WaterMID, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, UnderwaterPostProcessMID, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, Islands, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, ExclusionVolumes, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, Landscape, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, CurrentPostProcessSettings, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, bCanAffectNavigation, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, UnknownData_SCA3, 0x0DB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, WaterNavAreaClass, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, WaterWaves, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, bHasWaveSpectrumSettings, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, bHasTerrainCarvingSettingsSettings, 0x0DC9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBody, UnknownData_Q120, 0x0DCA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWaterBody, 0x0DD0);
		}

		// class UWaterBodyGenerator : public UObject
		TEST_METHOD(Class__Water__WaterBodyGenerator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaterBodyGenerator, 0x0028);
		}

		// class UCustomMeshGenerator : public UWaterBodyGenerator
		TEST_METHOD(Class__Water__CustomMeshGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshGenerator, MeshComp, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshGenerator, 0x0030);
		}

		// class AWaterBodyCustom : public AWaterBody
		TEST_METHOD(Class__Water__WaterBodyCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyCustom, CustomGenerator, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyCustom, UnknownData_9LTE, 0x0DD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWaterBodyCustom, 0x0DE0);
		}

		// class AWaterBodyExclusionVolume : public APhysicsVolume
		TEST_METHOD(Class__Water__WaterBodyExclusionVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyExclusionVolume, bIgnoreAllOverlappingWaterBodies, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyExclusionVolume, UnknownData_ZZ79, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyExclusionVolume, WaterBodiesToIgnore, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWaterBodyExclusionVolume, 0x0280);
		}

		// class AWaterBodyIsland : public AActor
		TEST_METHOD(Class__Water__WaterBodyIsland)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyIsland, UnknownData_VUYK, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyIsland, SplineComp, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWaterBodyIsland, 0x0230);
		}

		// class ULakeGenerator : public UWaterBodyGenerator
		TEST_METHOD(Class__Water__LakeGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULakeGenerator, LakeMeshComp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULakeGenerator, LakeCollisionComp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULakeGenerator, LakeCollision, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULakeGenerator, 0x0040);
		}

		// class AWaterBodyLake : public AWaterBody
		TEST_METHOD(Class__Water__WaterBodyLake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyLake, LakeGenerator, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyLake, UnknownData_2JK4, 0x0DD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWaterBodyLake, 0x0DE0);
		}

		// class UOceanGenerator : public UWaterBodyGenerator
		TEST_METHOD(Class__Water__OceanGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOceanGenerator, CollisionBoxes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOceanGenerator, CollisionHullSets, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOceanGenerator, 0x0048);
		}

		// class AWaterBodyOcean : public AWaterBody
		TEST_METHOD(Class__Water__WaterBodyOcean)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyOcean, OceanGenerator, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyOcean, CollisionExtents, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyOcean, HeightOffset, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyOcean, UnknownData_S779, 0x0DE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWaterBodyOcean, 0x0DF0);
		}

		// class URiverGenerator : public UWaterBodyGenerator
		TEST_METHOD(Class__Water__RiverGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URiverGenerator, SplineMeshComponents, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URiverGenerator, 0x0038);
		}

		// class AWaterBodyRiver : public AWaterBody
		TEST_METHOD(Class__Water__WaterBodyRiver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyRiver, RiverGenerator, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyRiver, LakeTransitionMaterial, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyRiver, LakeTransitionMID, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyRiver, OceanTransitionMaterial, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyRiver, OceanTransitionMID, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterBodyRiver, UnknownData_MN6V, 0x0DF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWaterBodyRiver, 0x0E00);
		}

		// class UWaterBrushActorInterface : public UInterface
		TEST_METHOD(Class__Water__WaterBrushActorInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaterBrushActorInterface, 0x0028);
		}

		// class AWaterMeshActor : public AActor
		TEST_METHOD(Class__Water__WaterMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterMeshActor, WaterVelocityTexture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWaterMeshActor, WaterMesh, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWaterMeshActor, 0x0230);
		}

		// class UWaterMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Water__WaterMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterMeshComponent, UnknownData_VKBQ, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterMeshComponent, TileSize, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterMeshComponent, ExtentInTiles, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterMeshComponent, FarDistanceMaterial, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterMeshComponent, FarDistanceMeshExtent, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterMeshComponent, RTWorldLocation, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterMeshComponent, RTWorldSizeVector, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterMeshComponent, UnknownData_O02Z, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterMeshComponent, TessellationFactor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterMeshComponent, LODScale, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterMeshComponent, UnknownData_2C8K, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaterMeshComponent, 0x0590);
		}

		// class UWaterRuntimeSettings : public UDeveloperSettings
		TEST_METHOD(Class__Water__WaterRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterRuntimeSettings, CollisionChannelForWaterTraces, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterRuntimeSettings, UnknownData_GMJB, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterRuntimeSettings, MaterialParameterCollection, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterRuntimeSettings, WaterBodyIconWorldSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterRuntimeSettings, WaterBodyIconWorldZOffset, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterRuntimeSettings, DefaultWaterCollisionProfileName, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaterRuntimeSettings, 0x0078);
		}

		// class UWaterSplineComponent : public USplineComponent
		TEST_METHOD(Class__Water__WaterSplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSplineComponent, WaterSplineDefaults, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSplineComponent, PreviousWaterSplineDefaults, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSplineComponent, UnknownData_D2GK, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaterSplineComponent, 0x0560);
		}

		// class UWaterSplineMetadata : public USplineMetadata
		TEST_METHOD(Class__Water__WaterSplineMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSplineMetadata, Depth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSplineMetadata, WaterVelocityScalar, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSplineMetadata, RiverWidth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSplineMetadata, AudioIntensity, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSplineMetadata, WaterVelocity, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaterSplineMetadata, 0x00A0);
		}

		// class UWaterSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Water__WaterSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSubsystem, UnknownData_OVPA, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSubsystem, OnCameraUnderwaterStateChanged, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSubsystem, OnWaterScalabilityChanged, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSubsystem, DefaultRiverMesh, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSubsystem, DefaultLakeMesh, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSubsystem, WaterMeshActor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSubsystem, UnknownData_115M, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSubsystem, MaterialParameterCollection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterSubsystem, UnknownData_QD87, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaterSubsystem, 0x00F8);
		}

		// class UWaterWavesAsset : public UObject
		TEST_METHOD(Class__Water__WaterWavesAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterWavesAsset, WaterWaves, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaterWavesAsset, 0x0030);
		}

		// class UWaterWavesAssetReference : public UWaterWavesBase
		TEST_METHOD(Class__Water__WaterWavesAssetReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaterWavesAssetReference, WaterWavesAsset, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaterWavesAssetReference, 0x0030);
		}

		// class UUI_Squad_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Squad__UI_Squad_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, Visible, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, Border_Ready, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, Button_CreateSquad, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, Button_Ready, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, Button_Squad, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, LinesRainbow, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, Overlay_Loading, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, TextBlock_Ready, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, TextBlock_Squad, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, UI_Squad_PlayerSlot_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, UI_Squad_PlayerSlot_3, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, UI_Squad_PlayerSlot_4, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, WidgetSwitcher, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, IsReady, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, UnknownData_W2UA, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, NameMyPlayer, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, IsVisibleSquad, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, UnknownData_3BC8, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, PlayFapGroup, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Squad_C, PlayerController, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Squad_C, 0x0300);
		}

		// class UUI_Shop_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Shop__UI_Shop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_C, HorizontalBox_Header, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_C, UI_Button_Clothes, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_C, UI_Button_Modules, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_C, UI_Button_Weapon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_C, UI_Shop_Weapon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_C, UI_WeaponModules, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_C, WidgetSwitcher_Main, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Shop_C, PlayerState, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Shop_C, 0x02A8);
		}

		// class UPlayFabAdminAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabAdminAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAdminAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAdminAPI, UnknownData_IGCD, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAdminAPI, CallAuthenticationContext, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAdminAPI, RequestJsonObj, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAdminAPI, ResponseJsonObj, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAdminAPI, UnknownData_1CLR, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabAdminAPI, 0x0840);
		}

		// class UPlayFabAdminModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabAdminModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabAdminModelDecoder, 0x0028);
		}

		// class UPlayFabAuthenticationAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabAuthenticationAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationAPI, UnknownData_QXUZ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationAPI, CallAuthenticationContext, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationAPI, RequestJsonObj, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationAPI, ResponseJsonObj, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationAPI, UnknownData_AUHJ, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabAuthenticationAPI, 0x0110);
		}

		// class UPlayFabAuthenticationModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabAuthenticationModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabAuthenticationModelDecoder, 0x0028);
		}

		// class UPlayFabClientAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabClientAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabClientAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabClientAPI, UnknownData_6N97, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabClientAPI, CallAuthenticationContext, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabClientAPI, RequestJsonObj, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabClientAPI, ResponseJsonObj, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabClientAPI, UnknownData_GNB5, 0x0B10);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabClientAPI, 0x0B60);
		}

		// class UPlayFabClientModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabClientModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabClientModelDecoder, 0x0028);
		}

		// class UPlayFabCloudScriptAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabCloudScriptAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabCloudScriptAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabCloudScriptAPI, UnknownData_Q2FB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabCloudScriptAPI, CallAuthenticationContext, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabCloudScriptAPI, RequestJsonObj, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabCloudScriptAPI, ResponseJsonObj, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabCloudScriptAPI, UnknownData_MCF4, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabCloudScriptAPI, 0x01C0);
		}

		// class UPlayFabCloudScriptModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabCloudScriptModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabCloudScriptModelDecoder, 0x0028);
		}

		// class UPlayFabDataAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabDataAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabDataAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabDataAPI, UnknownData_YYQ9, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabDataAPI, CallAuthenticationContext, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabDataAPI, RequestJsonObj, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabDataAPI, ResponseJsonObj, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabDataAPI, UnknownData_GJ0O, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabDataAPI, 0x0160);
		}

		// class UPlayFabDataModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabDataModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabDataModelDecoder, 0x0028);
		}

		// class UPlayFabEventsAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabEventsAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabEventsAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabEventsAPI, UnknownData_YME4, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabEventsAPI, CallAuthenticationContext, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabEventsAPI, RequestJsonObj, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabEventsAPI, ResponseJsonObj, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabEventsAPI, UnknownData_Q5BN, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabEventsAPI, 0x0110);
		}

		// class UPlayFabEventsModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabEventsModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabEventsModelDecoder, 0x0028);
		}

		// class UPlayFabExperimentationAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabExperimentationAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabExperimentationAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabExperimentationAPI, UnknownData_I2QB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabExperimentationAPI, CallAuthenticationContext, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabExperimentationAPI, RequestJsonObj, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabExperimentationAPI, ResponseJsonObj, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabExperimentationAPI, UnknownData_AE20, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabExperimentationAPI, 0x01C0);
		}

		// class UPlayFabExperimentationModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabExperimentationModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabExperimentationModelDecoder, 0x0028);
		}

		// class UPlayFabGroupsAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabGroupsAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabGroupsAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabGroupsAPI, UnknownData_26MC, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabGroupsAPI, CallAuthenticationContext, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabGroupsAPI, RequestJsonObj, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabGroupsAPI, ResponseJsonObj, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabGroupsAPI, UnknownData_TT90, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabGroupsAPI, 0x0280);
		}

		// class UPlayFabGroupsModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabGroupsModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabGroupsModelDecoder, 0x0028);
		}

		// class UPlayFabInsightsAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabInsightsAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabInsightsAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabInsightsAPI, UnknownData_GXSN, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabInsightsAPI, CallAuthenticationContext, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabInsightsAPI, RequestJsonObj, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabInsightsAPI, ResponseJsonObj, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabInsightsAPI, UnknownData_W1TA, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabInsightsAPI, 0x0150);
		}

		// class UPlayFabInsightsModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabInsightsModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabInsightsModelDecoder, 0x0028);
		}

		// class UPlayFabJsonObject : public UObject
		TEST_METHOD(Class__PlayFab__PlayFabJsonObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabJsonObject, UnknownData_MT0T, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabJsonObject, 0x0038);
		}

		// class UPlayFabJsonValue : public UObject
		TEST_METHOD(Class__PlayFab__PlayFabJsonValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabJsonValue, UnknownData_XQ9S, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabJsonValue, 0x0038);
		}

		// class UPlayFabLocalizationAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabLocalizationAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabLocalizationAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabLocalizationAPI, UnknownData_UZGR, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabLocalizationAPI, CallAuthenticationContext, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabLocalizationAPI, RequestJsonObj, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabLocalizationAPI, ResponseJsonObj, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabLocalizationAPI, UnknownData_7N30, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabLocalizationAPI, 0x0100);
		}

		// class UPlayFabLocalizationModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabLocalizationModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabLocalizationModelDecoder, 0x0028);
		}

		// class UPlayFabMatchmakerAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabMatchmakerAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMatchmakerAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMatchmakerAPI, UnknownData_QZ84, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMatchmakerAPI, CallAuthenticationContext, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMatchmakerAPI, RequestJsonObj, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMatchmakerAPI, ResponseJsonObj, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMatchmakerAPI, UnknownData_5G2P, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabMatchmakerAPI, 0x0140);
		}

		// class UPlayFabMatchmakerModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabMatchmakerModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabMatchmakerModelDecoder, 0x0028);
		}

		// class UPlayFabMultiplayerAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabMultiplayerAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMultiplayerAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMultiplayerAPI, UnknownData_N4MY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMultiplayerAPI, CallAuthenticationContext, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMultiplayerAPI, RequestJsonObj, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMultiplayerAPI, ResponseJsonObj, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabMultiplayerAPI, UnknownData_MOW0, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabMultiplayerAPI, 0x04B0);
		}

		// class UPlayFabMultiplayerModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabMultiplayerModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabMultiplayerModelDecoder, 0x0028);
		}

		// class UPlayFabProfilesAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabProfilesAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabProfilesAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabProfilesAPI, UnknownData_W6HP, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabProfilesAPI, CallAuthenticationContext, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabProfilesAPI, RequestJsonObj, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabProfilesAPI, ResponseJsonObj, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabProfilesAPI, UnknownData_NBR5, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabProfilesAPI, 0x0160);
		}

		// class UPlayFabProfilesModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabProfilesModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabProfilesModelDecoder, 0x0028);
		}

		// class UPlayFabServerAPI : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__PlayFab__PlayFabServerAPI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabServerAPI, OnPlayFabResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabServerAPI, UnknownData_3PV1, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabServerAPI, CallAuthenticationContext, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabServerAPI, RequestJsonObj, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabServerAPI, ResponseJsonObj, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabServerAPI, UnknownData_KIY0, 0x08F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabServerAPI, 0x0940);
		}

		// class UPlayFabServerModelDecoder : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabServerModelDecoder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabServerModelDecoder, 0x0028);
		}

		// class UPlayFabUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__PlayFab__PlayFabUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabUtilities, 0x0028);
		}

		// class UUI_Solder_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Solder__UI_Solder_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_C, HorizontalBox_Header, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_C, UI_Button_Customization, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_C, UI_Button_Statistics, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_C, UI_Solder_Customization, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_C, UI_Solder_Statistic, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_C, WidgetSwitcher_Main, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Solder_C, 0x0298);
		}

		// class UUI_GeneralMenuScreen_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_GeneralMenuScreen__UI_GeneralMenuScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, BuyPremiumHovered, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, Button_BuyAccount, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, Button_Exit, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, Button_Progress, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, Button_Settings, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, HorizontalBox_Header, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, Image_LevelIcon, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, Image_LevelProgress, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, Lines, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, ScaleBox_Footer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, ScaleBox_Header, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, TextBlock_Level, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_Button_Home, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_Button_Multiplayer, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_Button_PremiumShop, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_Button_Shop, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_Button_Soldier, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_Counter_Coin, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_Counter_PremiumCoin, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_GameVersion, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_HomeScreen, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_LoginScreen, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_Multiplayer, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_Options, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_PremiumShop, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_Shop, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_Solder, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UI_Squad, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, WidgetSwitcher_Main, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, WidgetSwitcher_Menu, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, WidgetSwitcher_TypeAccount, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, PlayerController, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, PlayerState, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, MatchmakingIsStarted, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, UnknownData_7JXN, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, OnChangeMatchmakingState, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, PingRegions, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GeneralMenuScreen_C, Regions, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_GeneralMenuScreen_C, 0x03A8);
		}

		// class UGeometryCache : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_MW56, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Tracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_KHLI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, StartFrame, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, EndFrame, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCache, 0x0068);
		}

		// class AGeometryCacheActor : public AActor
		TEST_METHOD(Class__GeometryCache__GeometryCacheActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCacheActor, GeometryCacheComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCacheActor, 0x0228);
		}

		// class UGeometryCacheCodecBase : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecBase, TopologyRanges, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecBase, 0x0038);
		}

		// class UGeometryCacheCodecRaw : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecRaw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, DummyProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, UnknownData_G4JX, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecRaw, 0x0040);
		}

		// class UGeometryCacheCodecV1 : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecV1, UnknownData_81KU, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecV1, 0x0040);
		}

		// class UGeometryCacheComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCache__GeometryCacheComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, GeometryCache, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bRunning, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bLooping, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_OL58, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, StartTimeOffset, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, PlaybackSpeed, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, NumTracks, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, ElapsedTime, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_VL2Y, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, Duration, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bManualTick, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_4HYZ, 0x04B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheComponent, 0x04C0);
		}

		// class UGeometryCacheTrack : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, Duration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, UnknownData_CU20, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack, 0x0058);
		}

		// class UGeometryCacheTrack_FlipbookAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_FlipbookAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, NumMeshSamples, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, UnknownData_DUNK, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_FlipbookAnimation, 0x0080);
		}

		// class UGeometryCacheTrackStreamable : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrackStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, Codec, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_1E9H, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, StartSampleTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_WW3Z, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrackStreamable, 0x00D0);
		}

		// class UGeometryCacheTrack_TransformAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformAnimation, UnknownData_IW3O, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformAnimation, 0x0100);
		}

		// class UGeometryCacheTrack_TransformGroupAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformGroupAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformGroupAnimation, UnknownData_ADCT, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformGroupAnimation, 0x0100);
		}

		// class UUI_Crosshair_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Crosshair__UI_Crosshair_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Crosshair_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Crosshair_C, HeadshotAnimation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Crosshair_C, KillAnimation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Crosshair_C, HitAnimation, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Crosshair_C, Border_OnApplyDamage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Crosshair_C, CanvasPanel_Main, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Crosshair_C, Overlay_Bottom, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Crosshair_C, Overlay_Center, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Crosshair_C, Overlay_Left, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Crosshair_C, Overlay_Right, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Crosshair_C, Overlay_Top, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Crosshair_C, Character, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Crosshair_C, 0x02C0);
		}

		// class UTemplateSequence : public UMovieSceneSequence
		TEST_METHOD(Class__TemplateSequence__TemplateSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorClass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundPreviewActor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorComponents, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequence, 0x0108);
		}

		// class UCameraAnimationSequence : public UTemplateSequence
		TEST_METHOD(Class__TemplateSequence__CameraAnimationSequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimationSequence, 0x0108);
		}

		// class USequenceCameraShakeCameraStandIn : public UObject
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShakeCameraStandIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, UnknownData_GDF8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, FieldOfView, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, UnknownData_RVHI, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShakeCameraStandIn, 0x0070);
		}

		// class USequenceCameraShake : public UCameraShakeBase
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Sequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, PlayRate, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Scale, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, BlendInTime, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, BlendOutTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, RandomSegmentDuration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, bRandomSegment, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, UnknownData_4V1Q, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Player, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, CameraStandIn, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, UnknownData_L71F, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShake, 0x00D0);
		}

		// class USequenceCameraShakeSequencePlayer : public UObject
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShakeSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, UnknownData_LBLV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, BoundObjectOverride, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, Sequence, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, RootTemplateInstance, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, UnknownData_KW6J, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShakeSequencePlayer, 0x05D8);
		}

		// class ATemplateSequenceActor : public AActor
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_WG4T, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, PlaybackSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_DGI3, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, SequencePlayer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, TemplateSequence, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, BindingOverride, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_PS0D, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATemplateSequenceActor, 0x0270);
		}

		// class UTemplateSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__TemplateSequence__TemplateSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequencePlayer, UnknownData_1GFV, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequencePlayer, 0x0688);
		}

		// class UTemplateSequenceSection : public UMovieSceneSubSection
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceSection, UnknownData_ARFC, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceSection, 0x0168);
		}

		// class UTemplateSequenceSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceSystem, UnknownData_5N4S, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceSystem, 0x00B0);
		}

		// class UTemplateSequenceTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceTrack, 0x0088);
		}

		// class UAudioSynesthesiaNRTSettings : public UAudioAnalyzerNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__AudioSynesthesiaNRTSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSynesthesiaNRTSettings, 0x0028);
		}

		// class UAudioSynesthesiaNRT : public UAudioAnalyzerNRT
		TEST_METHOD(Class__AudioSynesthesia__AudioSynesthesiaNRT)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSynesthesiaNRT, 0x0078);
		}

		// class UConstantQNRTSettings : public UAudioSynesthesiaNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__ConstantQNRTSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, StartingFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NumBands, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NumBandsPerOctave, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, AnalysisPeriod, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, bDownmixToMono, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, FFTSize, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, WindowType, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, SpectrumType, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, BandWidthStretch, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, CQTNormalization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, UnknownData_MPO5, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NoiseFloorDb, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstantQNRTSettings, 0x0048);
		}

		// class UConstantQNRT : public UAudioSynesthesiaNRT
		TEST_METHOD(Class__AudioSynesthesia__ConstantQNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstantQNRT, 0x0080);
		}

		// class ULoudnessNRTSettings : public UAudioSynesthesiaNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__LoudnessNRTSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, AnalysisPeriod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, MinimumFrequency, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, MaximumFrequency, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, CurveType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, UnknownData_37SZ, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, NoiseFloorDb, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, UnknownData_1GUW, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoudnessNRTSettings, 0x0040);
		}

		// class ULoudnessNRT : public UAudioSynesthesiaNRT
		TEST_METHOD(Class__AudioSynesthesia__LoudnessNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoudnessNRT, 0x0080);
		}

		// class UOnsetNRTSettings : public UAudioSynesthesiaNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__OnsetNRTSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, bDownmixToMono, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, UnknownData_MXPI, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, GranularityInSeconds, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, Sensitivity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, MinimumFrequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, MaximumFrequency, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, UnknownData_51T9, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnsetNRTSettings, 0x0040);
		}

		// class UOnsetNRT : public UAudioSynesthesiaNRT
		TEST_METHOD(Class__AudioSynesthesia__OnsetNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnsetNRT, 0x0080);
		}

		// class UClothConfigCommon : public UClothConfigBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigCommon, 0x0028);
		}

		// class UClothSharedConfigCommon : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothSharedConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedConfigCommon, 0x0028);
		}

		// class UClothingAssetCustomData : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCustomData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0028);
		}

		// class UClothingAssetCommon : public UClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, PhysicsAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfigs, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSharedSimConfig, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSimConfig, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ChaosClothSimConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothLODData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LODData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LodMap, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneIndices, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ReferenceBoneIndex, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_FIDU, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, customData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfig, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_RCP9, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCommon, 0x01F0);
		}

		// class UClothLODDataCommon_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothLODDataCommon_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, PhysicalMeshData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, ClothPhysicalMeshData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, CollisionData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, UnknownData_11MT, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothLODDataCommon_Legacy, 0x0188);
		}

		// class UUI_PremiumShop_Subscriptions_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_PremiumShop_Subscriptions__UI_PremiumShop_Subscriptions_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Subscriptions_C, UI_PremiumItem_Subscription_14Days, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Subscriptions_C, UI_PremiumItem_Subscription_180Days, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Subscriptions_C, UI_PremiumItem_Subscription_1Days, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Subscriptions_C, UI_PremiumItem_Subscription_30Days, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Subscriptions_C, UI_PremiumItem_Subscription_360Days, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Subscriptions_C, UI_PremiumItem_Subscription_3Days, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Subscriptions_C, UI_PremiumItem_Subscription_7Days, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Subscriptions_C, UI_PremiumItem_Subscription_90Days, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_PremiumShop_Subscriptions_C, 0x02A0);
		}

		// class UGameplayTask : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_HDUM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, InstanceName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_3MKO, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ResourceOverlapPolicy, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_I9A0, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ChildTask, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask, 0x0068);
		}

		// class UGameplayTask_ClaimResource : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_ClaimResource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_ClaimResource, 0x0068);
		}

		// class UGameplayTask_SpawnActor : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_SpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, Success, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, DidNotSpawn, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, UnknownData_92FT, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, ClassToSpawn, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_SpawnActor, 0x00A8);
		}

		// class UGameplayTask_TimeLimitedExecution : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_TimeLimitedExecution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnFinished, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnTimeExpired, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, UnknownData_RICB, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_TimeLimitedExecution, 0x0098);
		}

		// class UGameplayTask_WaitDelay : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_WaitDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, OnFinish, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, UnknownData_NWKC, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_WaitDelay, 0x0080);
		}

		// class UGameplayTaskOwnerInterface : public UInterface
		TEST_METHOD(Class__GameplayTasks__GameplayTaskOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskOwnerInterface, 0x0028);
		}

		// class UGameplayTaskResource : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTaskResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, ManualResourceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, AutoResourceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_E8BZ, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_M95T, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskResource, 0x0038);
		}

		// class UGameplayTasksComponent : public UActorComponent
		TEST_METHOD(Class__GameplayTasks__GameplayTasksComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_4NFG, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_8AUC, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, SimulatedTasks, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TaskPriorityQueue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_907A, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TickingTasks, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, KnownTasks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, OnClaimedResourcesChange, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTasksComponent, 0x0120);
		}

		// class ANavigationData : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_N0LU, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RenderingComp, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, NavDataConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_QRUI, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RuntimeGeneration, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_7UKY, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, ObservedPathsTickInterval, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, DataVersion, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_PS4T, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, SupportedAreas, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_RDKK, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationData, 0x0428);
		}

		// class AAbstractNavData : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__AbstractNavData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbstractNavData, 0x0428);
		}

		// class UCrowdManagerBase : public UObject
		TEST_METHOD(Class__NavigationSystem__CrowdManagerBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManagerBase, 0x0028);
		}

		// class UNavArea : public UNavAreaBase
		TEST_METHOD(Class__NavigationSystem__NavArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DefaultCost, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, FixedAreaEnteringCost, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, SupportedAgents, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, UnknownData_OOO4, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea, 0x0048);
		}

		// class UNavArea_Default : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Default)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Default, 0x0048);
		}

		// class UNavArea_LowHeight : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_LowHeight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_LowHeight, 0x0048);
		}

		// class UNavArea_Null : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Null)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Null, 0x0048);
		}

		// class UNavArea_Obstacle : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Obstacle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Obstacle, 0x0048);
		}

		// class UNavAreaMeta : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta, 0x0048);
		}

		// class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta_SwitchByAgent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent0Area, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent1Area, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent2Area, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent3Area, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent4Area, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent5Area, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent6Area, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent7Area, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent8Area, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent9Area, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent10Area, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent11Area, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent12Area, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent13Area, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent14Area, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent15Area, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta_SwitchByAgent, 0x00C8);
		}

		// class UNavCollision : public UNavCollisionBase
		TEST_METHOD(Class__NavigationSystem__NavCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_CTX2, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, CylinderCollision, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, BoxCollision, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, AreaClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_ZS08, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollision, 0x00D8);
		}

		// class ANavigationGraph : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__NavigationGraph)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraph, 0x0428);
		}

		// class ANavigationGraphNode : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraphNode, 0x0220);
		}

		// class UNavigationGraphNodeComponent : public USceneComponent
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, Node, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, NextNodeComponent, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, PrevNodeComponent, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNodeComponent, 0x0220);
		}

		// class UNavigationInvokerComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavigationInvokerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileGenerationRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileRemovalRadius, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationInvokerComponent, 0x00B8);
		}

		// class UNavigationPath : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathUpdatedNotifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, RecalculateOnInvalidation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, UnknownData_9LL6, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPath, 0x0088);
		}

		// class UNavigationPathGenerator : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavigationPathGenerator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPathGenerator, 0x0028);
		}

		// class UNavigationQueryFilter : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationQueryFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, Areas, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, IncludeFlags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, ExcludeFlags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, UnknownData_XSFL, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter, 0x0048);
		}

		// class UNavigationSystemV1 : public UNavigationSystemBase
		TEST_METHOD(Class__NavigationSystem__NavigationSystemV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, MainNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, AbstractNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DefaultAgentName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, CrowdManagerClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_JBZK, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, ActiveTilesUpdateInterval, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DataGatheringMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_F0BI, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreaWarningSizeThreshold, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgents, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgentsMask, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_UCNH, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataSet, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataRegistrationQueue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_R51T, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavDataRegisteredEvent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavigationGenerationFinishedDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_OBVP, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OperationMode, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_12RI, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreasUpdateFreq, 0x15BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_YQWE, 0x15C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemV1, 0x15E0);
		}

		// class UNavigationSystemModuleConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__NavigationSystem__NavigationSystemModuleConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemModuleConfig, UnknownData_HPHH, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemModuleConfig, 0x0058);
		}

		// class ANavigationTestingActor : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationTestingActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_2DQS, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, InvokerComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_3AMN, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, NavAgentProps, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, QueryingExtent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_J83I, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MyNavData, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ProjectedLocation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_AVU6, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostLimitFactor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MinimumCostLimit, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_28C1, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostDisplayMode, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_48YV, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, TextCanvasOffset, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_MK6Z, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathCost, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingSteps, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OtherActor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, FilterClass, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ShowStepIndex, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OffsetFromCornersDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_G23B, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationTestingActor, 0x0310);
		}

		// class UNavLinkComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_5O8S, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, Links, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_VLSM, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkComponent, 0x0460);
		}

		// class UNavRelevantComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavRelevantComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_M1DB, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_73L6, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, CachedNavParent, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantComponent, 0x00E0);
		}

		// class UNavLinkCustomComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_P0PC, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, NavLinkUserId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_4XYT, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, EnabledAreaClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, DisabledAreaClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, SupportedAgents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeEnd, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkDirection, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_99QA, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_39AG, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleOffset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleExtent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_0DH4, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleAreaClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastRadius, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastInterval, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastChannel, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_KTJH, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomComponent, 0x0190);
		}

		// class UNavLinkCustomInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomInterface, 0x0028);
		}

		// class UNavLinkHostInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkHostInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkHostInterface, 0x0028);
		}

		// class UNavLinkRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkRenderingComponent, 0x0440);
		}

		// class UNavLinkTrivial : public UNavLinkDefinition
		TEST_METHOD(Class__NavigationSystem__NavLinkTrivial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkTrivial, 0x0050);
		}

		// class ANavMeshBoundsVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavMeshBoundsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, SupportedAgents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, UnknownData_ZE96, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavMeshBoundsVolume, 0x0260);
		}

		// class UNavMeshRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavMeshRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_GZJH, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshRenderingComponent, 0x0450);
		}

		// class UNavModifierComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavModifierComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, AreaClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, FailsafeExtent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, UnknownData_AQ5T, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierComponent, 0x0140);
		}

		// class ANavModifierVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavModifierVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_V05G, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, AreaClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, bMaskFillCollisionUnderneathForNavmesh, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_TGUX, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavModifierVolume, 0x0270);
		}

		// class UNavNodeInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavNodeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavNodeInterface, 0x0028);
		}

		// class ANavSystemConfigOverride : public AActor
		TEST_METHOD(Class__NavigationSystem__NavSystemConfigOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, NavigationSystemConfig, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, OverridePolicy, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, UnknownData_9B7O, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavSystemConfigOverride, 0x0230);
		}

		// class UNavTestRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavTestRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavTestRenderingComponent, 0x0440);
		}

		// class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
		TEST_METHOD(Class__NavigationSystem__RecastFilter_UseDefaultArea)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastFilter_UseDefaultArea, 0x0048);
		}

		// class ARecastNavMesh : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__RecastNavMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_OHCG, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DrawOffset, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_5KVS, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TilePoolSize, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSizeUU, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellSize, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellHeight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentRadius, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentHeight, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxSlope, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxStepHeight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MinRegionArea, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MergeRegionSize, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimplificationError, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimultaneousTileGenerationJobsCount, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileNumberHardLimit, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefTileBits, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefNavPolyBits, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefSaltBits, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, NavMeshOriginOffset, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultDrawDistance, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxSearchNodes, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxHierarchicalSearchNodes, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionPartitioning, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerPartitioning, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_ZKKN, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionChunkSplits, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerChunkSplits, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_9MF8, 0x049A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSetUpdateInterval, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, HeuristicScale, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, VerticalDeviationFromGroundCompensation, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_PQA5, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh, 0x04D8);
		}

		// class URecastNavMeshDataChunk : public UNavigationDataChunk
		TEST_METHOD(Class__NavigationSystem__RecastNavMeshDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMeshDataChunk, UnknownData_JQWK, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastNavMeshDataChunk, 0x0040);
		}

		// class UUI_GameMenu_Map_SpawnSelect_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_GameMenu_Map_SpawnSelect__UI_GameMenu_Map_SpawnSelect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_SpawnSelect_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenu_Map_SpawnSelect_C, NewPosition, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_GameMenu_Map_SpawnSelect_C, 0x0270);
		}

		// class UUI_GameMenuScreen_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_GameMenuScreen__UI_GameMenuScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, BlinkDeploy, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, Border_MyTeam, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, Button_Deploy, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, Image_Team, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, ProgressBar_CaptureProcessBlueTeam, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, ProgressBar_CaptureProcessRedTeam, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, TextBlock_CapturePointsBlueTeam, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, TextBlock_CapturePointsRedTeam, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, TextBlock_TimeToSpawn_MiliSecond, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, TextBlock_TimeToSpawn_Second, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, UI_ControlPointMarker_A_Board, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, UI_ControlPointMarker_B_Board, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, UI_ControlPointMarker_C_Board, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, UI_ControlPointMarker_D_Board, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, UI_ControlPointMarker_E_Board, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, UI_ControlPointMarker_F_Board, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, UI_GameMenu_Map, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, WidgetSwitcher_Deploy, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, GameState, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, PlayerController, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, PlayerState, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameMenuScreen_C, TimeToSpawn, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_GameMenuScreen_C, 0x0314);
		}

		// class UUI_Scoreboard_Player_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Scoreboard_Player__UI_Scoreboard_Player_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, Border_Illumination, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, Image_LevelIcon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, TextBlock_LevelNumber, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, TextBlock_PlayerDeath, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, TextBlock_PlayerKills, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, TextBlock_PlayerName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, TextBlock_PlayerNumber, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, TextBlock_PlayerPing, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, TextBlock_PlayerScore, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, Player, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, PlayerNumber, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, UnknownData_0YBF, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Scoreboard_Player_C, ParentWidget, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Scoreboard_Player_C, 0x02C8);
		}

		// class UInputBehavior : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehavior, UnknownData_CUVT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehavior, 0x0030);
		}

		// class UAnyButtonInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__AnyButtonInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyButtonInputBehavior, UnknownData_PZFO, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnyButtonInputBehavior, 0x0080);
		}

		// class UInteractiveGizmoBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoBuilder, 0x0028);
		}

		// class UAxisAngleGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmoBuilder, 0x0028);
		}

		// class UInteractiveGizmo : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, UnknownData_N3T8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, InputBehaviors, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmo, 0x0038);
		}

		// class UAxisAngleGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_JAHN, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AngleSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, bInInteraction, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_JOE7, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartAngle, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurAngle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_106V, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmo, 0x00F0);
		}

		// class UAxisPositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmoBuilder, 0x0028);
		}

		// class UAxisPositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_GBDW, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bInInteraction, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_L08P, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartPoint, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurPoint, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartParameter, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurParameter, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSign, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_82MC, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmo, 0x00D8);
		}

		// class UGizmoConstantAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, UnknownData_06GY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Direction, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantAxisSource, 0x0048);
		}

		// class UGizmoConstantFrameAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantFrameAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, UnknownData_W4XT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Direction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantFrameAxisSource, 0x0060);
		}

		// class UGizmoWorldAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoWorldAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, UnknownData_2R39, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, AxisIndex, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoWorldAxisSource, 0x0040);
		}

		// class UGizmoComponentAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_UZ0Q, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, AxisIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, bLocalAxes, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_AULK, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentAxisSource, 0x0040);
		}

		// class UInteractiveToolPropertySet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_LDYL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, CachedProperties, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, bIsPropertySetEnabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_71YK, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolPropertySet, 0x0060);
		}

		// class UBrushBaseProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__InteractiveToolsFramework__BrushBaseProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bSpecifyRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_5OAE, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushRadius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushStrength, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushFalloffAmount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowStrength, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowFalloff, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_GGS2, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBaseProperties, 0x0078);
		}

		// class UInteractiveTool : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_WSPV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, InputBehaviors, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, ToolPropertyObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_AS1V, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveTool, 0x0080);
		}

		// class USingleSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleSelectionTool, UnknownData_0PBF, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleSelectionTool, 0x0088);
		}

		// class UMeshSurfacePointTool : public USingleSelectionTool
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointTool, UnknownData_U6MS, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointTool, 0x00C0);
		}

		// class UBaseBrushTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__InteractiveToolsFramework__BaseBrushTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, bInBrushStroke, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_YDLI, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, WorldToLocalScale, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, LastBrushStamp, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_9FAR, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, PropertyClass, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushStampIndicator, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseBrushTool, 0x01C0);
		}

		// class UBrushStampIndicatorBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicatorBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicatorBuilder, 0x0028);
		}

		// class UBrushStampIndicator : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushRadius, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushFalloff, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushNormal, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawIndicatorLines, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawRadiusCircle, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_YHCA, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SampleStepCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineThickness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDepthTested, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawSecondaryLines, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_IU3C, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineThickness, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineColor, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_BTBV, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, AttachedComponent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_CUES, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicator, 0x00B0);
		}

		// class UClickDragInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_YWH4, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, bUpdateModifiersDuringDrag, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_96QV, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragInputBehavior, 0x0140);
		}

		// class ULocalClickDragInputBehavior : public UClickDragInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__LocalClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalClickDragInputBehavior, UnknownData_T0LR, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalClickDragInputBehavior, 0x0280);
		}

		// class UInteractiveToolBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolBuilder, 0x0028);
		}

		// class UClickDragToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragToolBuilder, 0x0028);
		}

		// class UClickDragTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragTool, UnknownData_6I2R, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragTool, 0x0088);
		}

		// class AInternalToolFrameworkActor : public AActor
		TEST_METHOD(Class__InteractiveToolsFramework__InternalToolFrameworkActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInternalToolFrameworkActor, 0x0220);
		}

		// class AGizmoActor : public AInternalToolFrameworkActor
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGizmoActor, 0x0220);
		}

		// class UGizmoBaseComponent : public UPrimitiveComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, Color, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, HoverSizeMultiplier, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, PixelHitDistanceThreshold, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, UnknownData_QZ0R, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseComponent, 0x0460);
		}

		// class UGizmoArrowComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Direction, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Gap, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Length, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Thickness, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, UnknownData_Y534, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoArrowComponent, 0x0480);
		}

		// class UGizmoBoxComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Origin, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_KO22, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Rotation, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Dimensions, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, LineThickness, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bRemoveHiddenLines, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bEnableAxisFlip, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_1RSF, 0x0492);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBoxComponent, 0x04A0);
		}

		// class UGizmoCircleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoCircleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Normal, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Radius, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Thickness, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, NumSides, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bViewAligned, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bOnlyAllowFrontFacingHits, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, UnknownData_I0TK, 0x047A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoCircleComponent, 0x0480);
		}

		// class UGizmoTransformSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformSource, 0x0028);
		}

		// class UGizmoAxisSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisSource, 0x0028);
		}

		// class UGizmoClickTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoClickTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoClickTarget, 0x0028);
		}

		// class UGizmoStateTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoStateTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoStateTarget, 0x0028);
		}

		// class UGizmoFloatParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoFloatParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoFloatParameterSource, 0x0028);
		}

		// class UGizmoVec2ParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoVec2ParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoVec2ParameterSource, 0x0028);
		}

		// class UGizmoLineHandleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLineHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Normal, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, HandleSize, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Thickness, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Direction, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Length, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, bImageScale, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, UnknownData_6ZGE, 0x0485);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLineHandleComponent, 0x0490);
		}

		// class UGizmoRectangleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoRectangleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionX, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionY, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetX, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetY, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthX, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthY, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, Thickness, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, SegmentFlags, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, UnknownData_CVGC, 0x048D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoRectangleComponent, 0x0490);
		}

		// class UGizmoLambdaHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaHitTarget, UnknownData_VPVR, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaHitTarget, 0x00B0);
		}

		// class UGizmoComponentHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_49GR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_HUJ7, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentHitTarget, 0x0080);
		}

		// class UInputBehaviorSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehaviorSet, Behaviors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSet, 0x0038);
		}

		// class UInputBehaviorSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSource, 0x0028);
		}

		// class UInputRouter : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputRouter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnHover, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnCapture, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_42WA, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, ActiveInputBehaviors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_2Y1Q, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputRouter, 0x00B0);
		}

		// class UInteractionMechanic : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractionMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionMechanic, UnknownData_QI6D, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionMechanic, 0x0030);
		}

		// class UInteractiveGizmoManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_18ZQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, ActiveGizmos, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_YW17, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, GizmoBuilders, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_HPZX, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoManager, 0x00B8);
		}

		// class UToolContextTransactionProvider : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolContextTransactionProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolContextTransactionProvider, 0x0028);
		}

		// class UInteractiveToolManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_TOM1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveLeftTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveRightTool, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_KR0P, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ToolBuilders, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_63RX, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolManager, 0x0138);
		}

		// class UToolFrameworkComponent : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolFrameworkComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolFrameworkComponent, 0x0028);
		}

		// class UInteractiveToolsContext : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolsContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, UnknownData_3ZCK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, InputRouter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManager, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, GizmoManager, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManagerClass, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolsContext, 0x0098);
		}

		// class AIntervalGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, UpIntervalComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, DownIntervalComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, ForwardIntervalComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIntervalGizmoActor, 0x0238);
		}

		// class UIntervalGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmoBuilder, UnknownData_HILL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmoBuilder, 0x00C0);
		}

		// class UIntervalGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, StateTarget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_80PI, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, TransformProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveComponents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveGizmos, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_Q4JE, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisYSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisZSource, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_MJG3, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmo, 0x0130);
		}

		// class UGizmoBaseFloatParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseFloatParameterSource, UnknownData_NHHU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseFloatParameterSource, 0x0048);
		}

		// class UGizmoAxisIntervalParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisIntervalParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, FloatParameterSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MinParameter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MaxParameter, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisIntervalParameterSource, 0x0060);
		}

		// class UKeyAsModifierInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__KeyAsModifierInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyAsModifierInputBehavior, UnknownData_XITY, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyAsModifierInputBehavior, 0x0110);
		}

		// class UMeshSurfacePointToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointToolBuilder, UnknownData_TW4T, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointToolBuilder, 0x0030);
		}

		// class UMouseHoverBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MouseHoverBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMouseHoverBehavior, UnknownData_SKJF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseHoverBehavior, 0x0098);
		}

		// class UMultiClickSequenceInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MultiClickSequenceInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiClickSequenceInputBehavior, UnknownData_X6UV, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiClickSequenceInputBehavior, 0x0130);
		}

		// class UMultiSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__MultiSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiSelectionTool, UnknownData_7T2K, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiSelectionTool, 0x0090);
		}

		// class UGizmoLocalFloatParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, LastChange, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, UnknownData_AB9X, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalFloatParameterSource, 0x0058);
		}

		// class UGizmoBaseVec2ParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseVec2ParameterSource, UnknownData_Q2R7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseVec2ParameterSource, 0x0048);
		}

		// class UGizmoLocalVec2ParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, LastChange, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalVec2ParameterSource, 0x0060);
		}

		// class UGizmoAxisTranslationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_KBD3, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_9TGC, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisTranslationParameterSource, 0x0110);
		}

		// class UGizmoPlaneTranslationParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_KSIY, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, LastChange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationNormal, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisY, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_OKWE, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneTranslationParameterSource, 0x0130);
		}

		// class UGizmoAxisRotationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisRotationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_PFK8, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, Angle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_7ZOC, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisRotationParameterSource, 0x0110);
		}

		// class UGizmoUniformScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoUniformScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, LastChange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleNormal, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisX, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisY, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, UnknownData_3YWF, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, InitialTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoUniformScaleParameterSource, 0x00F0);
		}

		// class UGizmoAxisScaleParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, LastChange, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleAxis, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, InitialTransform, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisScaleParameterSource, 0x00C0);
		}

		// class UGizmoPlaneScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_8P5V, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, ScaleMultiplier, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, Parameter, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, LastChange, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleOrigin, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleNormal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisX, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisY, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_NE4Z, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneScaleParameterSource, 0x0130);
		}

		// class UPlanePositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmoBuilder, 0x0028);
		}

		// class UPlanePositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_IHEV, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipX, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipY, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bInInteraction, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionNormal, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartParameter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurParameter, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSigns, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_XPAS, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmo, 0x0100);
		}

		// class USelectionSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__SelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectionSet, UnknownData_42ZY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectionSet, 0x0040);
		}

		// class UMeshSelectionSet : public USelectionSet
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Vertices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Edges, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Faces, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Groups, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionSet, 0x0080);
		}

		// class USingleClickInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_372Y, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, HitTestOnRelease, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_5YEY, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickInputBehavior, 0x0130);
		}

		// class USingleClickToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickToolBuilder, 0x0028);
		}

		// class USingleClickTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickTool, UnknownData_3WH4, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickTool, 0x0088);
		}

		// class UGizmoNilStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoNilStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoNilStateTarget, UnknownData_K1HQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoNilStateTarget, 0x0030);
		}

		// class UGizmoLambdaStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaStateTarget, UnknownData_BQOB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaStateTarget, 0x00B0);
		}

		// class UGizmoObjectModifyStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoObjectModifyStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoObjectModifyStateTarget, UnknownData_B455, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoObjectModifyStateTarget, 0x0058);
		}

		// class UGizmoTransformChangeStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformChangeStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_LRF2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, TransactionManager, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_GV0K, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformChangeStateTarget, 0x00E0);
		}

		// class ATransformGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateX, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateY, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateZ, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateYZ, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXZ, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXY, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateY, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateZ, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, UniformScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleX, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleY, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleZ, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleYZ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXZ, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXY, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATransformGizmoActor, 0x02A0);
		}

		// class UTransformGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoBuilder, UnknownData_754W, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmoBuilder, 0x00C0);
		}

		// class UTransformGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_0IEL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveTarget, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldGrid, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bGridSizeIsExplicit, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_CS13, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ExplicitGridSize, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bRotationGridSizeIsExplicit, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_875Z, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ExplicitRotationGridSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldRotGrid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bUseContextCoordinateSystem, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_4ZNO, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CurrentCoordinateSystem, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_LS3D, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_HKBK, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveComponents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, NonuniformScaleComponents, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveGizmos, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_D0MO, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CameraAxisSource, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisXSource, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisYSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisZSource, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisXSource, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisYSource, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisZSource, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, StateTarget, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ScaledTransformSource, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_ZMMK, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmo, 0x01A0);
		}

		// class UTransformProxy : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__TransformProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_WZ10, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bRotatePerObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bSetPivotMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_6YPA, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, SharedTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, InitialSharedTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformProxy, 0x00F0);
		}

		// class UGizmoBaseTransformSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseTransformSource, UnknownData_AXJK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseTransformSource, 0x0048);
		}

		// class UGizmoComponentWorldTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentWorldTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, Component, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, bModifyComponentOnTransform, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, UnknownData_TK23, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentWorldTransformSource, 0x0058);
		}

		// class UGizmoScaledTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoScaledTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, ChildTransformSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, UnknownData_MRIG, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoScaledTransformSource, 0x00E0);
		}

		// class UGizmoTransformProxyTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformProxyTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformProxyTransformSource, Proxy, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformProxyTransformSource, 0x0050);
		}

		// class UUI_GameVersion_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_GameVersion__UI_GameVersion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameVersion_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameVersion_C, PlayerId, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameVersion_C, VectorX, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameVersion_C, VectorY, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_GameVersion_C, Version, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_GameVersion_C, 0x0288);
		}

		// class UUI_QuickMatchWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_QuickMatchWidget__UI_QuickMatchWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, Hovered, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, Border, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, Border_Create, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, Border_Footer, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, Border_Hovered, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, Border_Play, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, Button, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, Button_Create, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, Button_Play, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, Image_MapPreview, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, Image_MatchmakingTimer, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, TextBlock_Create, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, TextBlock_MapName, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, TextBlock_Play, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, TextBlock_ServerSearchTime, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, WidgetSwitcher_Play, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, MapID, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, TimerGetMatchmakingTicket, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, TimerSearchServer, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, TimerCalculateServerSearchTime, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_QuickMatchWidget_C, SearchTime, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_QuickMatchWidget_C, 0x030C);
		}

		// class UUI_PremiumShop_Crowns_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_PremiumShop_Crowns__UI_PremiumShop_Crowns_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Crowns_C, UI_PremiumItem_1200Crowns, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Crowns_C, UI_PremiumItem_2500Crowns, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Crowns_C, UI_PremiumItem_5000Crowns, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Crowns_C, UI_PremiumItem_5000Crowns_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Crowns_C, UI_PremiumItem_5000Crowns_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Crowns_C, UI_PremiumItem_5000Crowns_4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Crowns_C, UI_PremiumItem_5000Crowns_5, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_PremiumShop_Crowns_C, UI_PremiumItem_500Crowns, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_PremiumShop_Crowns_C, 0x02A0);
		}

		// class UDefaultBindCapturePrompt_C : public UBindCapturePrompt
		TEST_METHOD(WidgetBlueprintGeneratedClass__DefaultBindCapturePrompt__DefaultBindCapturePrompt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultBindCapturePrompt_C, 0x02C0);
		}

		// class UDefaultAxisMapping_C : public UAxisMapping
		TEST_METHOD(WidgetBlueprintGeneratedClass__DefaultAxisMapping__DefaultAxisMapping_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultAxisMapping_C, 0x02B0);
		}

		// class UChaosClothConfig : public UClothConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MassMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_0YD4, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UniformMass, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, TotalMass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, Density, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MinPerParticleMass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, EdgeStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, BendingStiffness, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseBendingElements, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_87PV, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AreaStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, VolumeStiffness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, StrainLimitingStiffness, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LimitScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, TetherMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseGeodesicDistance, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_IX0F, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, ShapeTargetStiffness, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, CollisionThickness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, FrictionCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseSelfCollisions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_KQU2, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, SelfCollisionThickness, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseLegacyBackstop, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_FBQI, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DampingCoefficient, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUsePointBasedWindModel, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_NHN2, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DragCoefficient, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LiftCoefficient, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseGravityOverride, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_6D1L, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, GravityScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, Gravity, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AnimDriveSpringStiffness, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LinearVelocityScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AngularVelocityScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseTetrahedralConstraints, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseThinShellVolumeConstraints, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseContinuousCollisionDetection, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_QI1U, 0x00AF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothConfig, 0x00B0);
		}

		// class UChaosClothSharedSimConfig : public UClothSharedConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothSharedSimConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, IterationCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SubdivisionCount, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SelfCollisionThickness, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, CollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseDampingOverride, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_M0T7, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Damping, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseGravityOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_UVI2, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, GravityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Gravity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseLocalSpaceSimulation, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseXPBDConstraints, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_JUX1, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothSharedSimConfig, 0x0058);
		}

		// class UChaosClothingSimulationFactory : public UClothingSimulationFactory
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationFactory, 0x0028);
		}

		// class UChaosClothingSimulationInteractor : public UClothingSimulationInteractor
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothingSimulationInteractor, UnknownData_BMRS, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationInteractor, 0x0058);
		}

		// class UChatSystemComponent : public UActorComponent
		TEST_METHOD(Class__POLYGON__ChatSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatSystemComponent, ChatHistory, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatSystemComponent, 0x00C0);
		}

		// class UGeneralBackendComponent : public UActorComponent
		TEST_METHOD(Class__POLYGON__GeneralBackendComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralBackendComponent, UnknownData_AQ1K, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralBackendComponent, 0x00E0);
		}

		// class UClientBackendComponent : public UGeneralBackendComponent
		TEST_METHOD(Class__POLYGON__ClientBackendComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClientBackendComponent, OnSetPlayerId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClientBackendComponent, OnUpdatePlayerCombinedInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClientBackendComponent, PlayerId, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClientBackendComponent, PlayerCombinedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClientBackendComponent, 0x0128);
		}

		// class UClientTransfer : public UObject
		TEST_METHOD(Class__POLYGON__ClientTransfer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClientTransfer, bInMenu, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClientTransfer, UnknownData_EXQO, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClientTransfer, PlayerCombinedInfo, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClientTransfer, UnknownData_STY1, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClientTransfer, 0x0068);
		}

		// class AControlPoint : public AActor
		TEST_METHOD(Class__POLYGON__ControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, OnCapturedTeam, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, OnIsCapture, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, OnChangeCapturePoints, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, ControlPointName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, CapturedTeam, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, bIsCapture, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, UnknownData_AQW4, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, CapturePointsRedTeam, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, CapturePointsBlueTeam, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, UnknownData_2HL0, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPoint, CaptureArea, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AControlPoint, 0x0290);
		}

		// class UDataManagerLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__POLYGON__DataManagerLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataManagerLibrary, 0x0028);
		}

		// class UHealthStatsComponent : public UActorComponent
		TEST_METHOD(Class__POLYGON__HealthStatsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealthStatsComponent, OnChangeHealth, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealthStatsComponent, Health, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealthStatsComponent, UnknownData_UACD, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealthStatsComponent, Stamina, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealthStatsComponent, UnknownData_IPUG, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealthStatsComponent, KillAssists, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealthStatsComponent, UnknownData_VBAH, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthStatsComponent, 0x00F0);
		}

		// class UInteractInterface : public UInterface
		TEST_METHOD(Class__POLYGON__InteractInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractInterface, 0x0028);
		}

		// class AItem_General : public AActor
		TEST_METHOD(Class__POLYGON__Item_General)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_General, ItemId, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_General, ItemType, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_General, UnknownData_KXGO, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_General, ItemName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_General, ItemIcon, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_General, ItemPrice, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_General, UnknownData_86M5, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_General, customData, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItem_General, 0x0270);
		}

		// class AItem_Module_General : public AItem_General
		TEST_METHOD(Class__POLYGON__Item_Module_General)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Module_General, WeaponModuleType, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Module_General, UnknownData_CAN0, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Module_General, LevelRequired, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Module_General, bIsPremium, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Module_General, UnknownData_VMWE, 0x0279);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItem_Module_General, 0x0280);
		}

		// class AItem_Module_Optic : public AItem_Module_General
		TEST_METHOD(Class__POLYGON__Item_Module_Optic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Module_Optic, MountingSocket, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Module_Optic, FOV, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Module_Optic, bIsScope, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Module_Optic, UnknownData_B7NQ, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Module_Optic, ModuleMesh, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItem_Module_Optic, 0x0298);
		}

		// class AItem_Module_Skin : public AItem_Module_General
		TEST_METHOD(Class__POLYGON__Item_Module_Skin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Module_Skin, SkinMaterial, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItem_Module_Skin, 0x0288);
		}

		// class AItem_Weapon_General : public AItem_General
		TEST_METHOD(Class__POLYGON__Item_Weapon_General)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, OnChangeCurrentNumberAmmo, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, OnChangeStockAmmo, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, OnSetWeaponModules, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, OnApplyWeaponDamage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, WeaponType, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, UnknownData_SDI0, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, WeaponDamage, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, DamageCurve, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, MaxMagazineAmmo, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, MaxStockAmmo, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, TimeBetweenShots, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, bIsAutomatic, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, UnknownData_ZJT9, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, WeaponRecoil, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, WeaponRecoilAlphaPerShot, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, AccuracyHip, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, AccuracySight, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, SpreadShot, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, UnknownData_8J38, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, RelatedModules, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, WeaponWhileIcon, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, LevelRequired, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, bIsPremium, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, bIsAvailable, 0x0305);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, UnknownData_R0T0, 0x0306);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, TrailFX, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, SleeveFX, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, ShotCameraShake, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, IdleCharacterAnimation, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, ReloadCharacterAnimation, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, ReloadFullCharacterAnimation, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, ShotCharacterAnimation, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, ShotWeaponAnimation, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, ReloadWeaponAnimation, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, ReloadFullWeaponAnimation, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, PositionAdjustment, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, UnknownData_KLFS, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, SoundShot, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, SoundBlankShot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, CustomSounds, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, CurrentMagazineAmmo, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, CurrentStockAmmo, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, UnknownData_2VPY, 0x038E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, CurrentSpread, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, UnknownData_C6AR, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, WeaponModules, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, UnknownData_KYEC, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, WeaponMesh, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, Magazine, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_General, PicatinnyRail, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItem_Weapon_General, 0x03E0);
		}

		// class AItem_Weapon_Grenade : public AItem_General
		TEST_METHOD(Class__POLYGON__Item_Weapon_Grenade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_Grenade, GrenadeRaduis, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_Grenade, GrenadeDamage, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_Grenade, ExplosionFX, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_Grenade, SoundExplosion, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_Grenade, ExplosionCameraShake, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_Grenade, GrenadeThrowCameraShake, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_Grenade, Mesh, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_Grenade, RadialForce, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_Grenade, GrenadeSphereRadius, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_Grenade, SmoothSyncComponent, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItem_Weapon_Grenade, 0x02B8);
		}

		// class AItem_Weapon_Pistol : public AItem_Weapon_General
		TEST_METHOD(Class__POLYGON__Item_Weapon_Pistol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AItem_Weapon_Pistol, NoAmmoWeaponAnimation, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItem_Weapon_Pistol, 0x03E8);
		}

		// class AItem_Weapon_Rifle : public AItem_Weapon_General
		TEST_METHOD(Class__POLYGON__Item_Weapon_Rifle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItem_Weapon_Rifle, 0x03E0);
		}

		// class AItem_Weapon_Sniper : public AItem_Weapon_General
		TEST_METHOD(Class__POLYGON__Item_Weapon_Sniper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AItem_Weapon_Sniper, 0x03E0);
		}

		// class AMenuCharacter : public AActor
		TEST_METHOD(Class__POLYGON__MenuCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuCharacter, Mesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuCharacter, Hair, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuCharacter, Hat, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuCharacter, Mask, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuCharacter, Jacket, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuCharacter, Chevron, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuCharacter, Backpack, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuCharacter, Weapon, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenuCharacter, 0x0260);
		}

		// class UPG_AnimInstance : public UAnimInstance
		TEST_METHOD(Class__POLYGON__PG_AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPG_AnimInstance, UnknownData_5HK9, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPG_AnimInstance, 0x02C0);
		}

		// class APG_Character : public ACharacter
		TEST_METHOD(Class__POLYGON__PG_Character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, OnSetPlayerState, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, UnknownData_EM62, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, PlayerAction, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, UnknownData_T8Y2, 0x04CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, TiltBodyAlpha, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, UnknownData_KFA5, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, CameraViewMode, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, UnknownData_7ALM, 0x04DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, LastFocusActor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, CurrentInteractActor, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, UnknownData_S3C1, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, ParticleDamageBlood, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, SoundBullet, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, ArmsRoot, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, Arms, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, Hair, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, Hat, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, Mask, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, Chevron, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, Backpack, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, FirstPersonCamera, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, ThirdPersonCameraBoom, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, ThirdPersonCamera, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, PlayerInputComponent, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, WidgetPlayerMarker, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, HealthStatsComponent, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_Character, WeaponComponent, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APG_Character, 0x0590);
		}

		// class UPG_FunctionLibraryKit : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__POLYGON__PG_FunctionLibraryKit)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPG_FunctionLibraryKit, 0x0028);
		}

		// class UPG_GameInstance : public UGameInstance
		TEST_METHOD(Class__POLYGON__PG_GameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPG_GameInstance, ClientTransfer, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPG_GameInstance, 0x01B0);
		}

		// class APG_GameMode_Base : public AGameMode
		TEST_METHOD(Class__POLYGON__PG_GameMode_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APG_GameMode_Base, 0x0308);
		}

		// class APG_GameMode_Game : public APG_GameMode_Base
		TEST_METHOD(Class__POLYGON__PG_GameMode_Game)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameMode_Game, MaxPlayers, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameMode_Game, GameTime, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameMode_Game, CameraViewMode, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameMode_Game, UnknownData_6F9V, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameMode_Game, ServerBackendComponent, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APG_GameMode_Game, 0x0328);
		}

		// class APG_GameMode_Menu : public APG_GameMode_Base
		TEST_METHOD(Class__POLYGON__PG_GameMode_Menu)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APG_GameMode_Menu, 0x0308);
		}

		// class APG_GameState_Game : public AGameState
		TEST_METHOD(Class__POLYGON__PG_GameState_Game)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, OnChangeGameState, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, OnGameTimer, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, OnCanMovePlayers, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, OnTeamWon, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, OnChangePlayersArray, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, OnChangeTeamRedArray, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, OnChangeTeamBlueArray, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, OnChangeTotalScore, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, GameMode, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, GameState, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, GameTimer, 0x0312);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, bCanMovePlayers, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, WinningTeam, 0x0315);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, UnknownData_U60A, 0x0316);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, Players, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, TeamRed, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, TeamBlue, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, AllTeamBases, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, AllControlPoints, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, ScoreRedTeam, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, ScoreBlueTeam, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_GameState_Game, UnknownData_8FD8, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APG_GameState_Game, 0x0378);
		}

		// class APG_PlayerController_Base : public APlayerController
		TEST_METHOD(Class__POLYGON__PG_PlayerController_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerController_Base, OnSetPawn, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerController_Base, OnSetPlayerState, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerController_Base, MouseSensitivity, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerController_Base, bIsInvertMouse, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerController_Base, UnknownData_TOHN, 0x0595);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerController_Base, GameFOV, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerController_Base, UnknownData_L1EJ, 0x059C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APG_PlayerController_Base, 0x05A0);
		}

		// class APG_PlayerController_Game : public APG_PlayerController_Base
		TEST_METHOD(Class__POLYGON__PG_PlayerController_Game)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APG_PlayerController_Game, 0x05A0);
		}

		// class APG_PlayerController_Menu : public APG_PlayerController_Base
		TEST_METHOD(Class__POLYGON__PG_PlayerController_Menu)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APG_PlayerController_Menu, 0x05A0);
		}

		// class APG_PlayerState_Base : public APlayerState
		TEST_METHOD(Class__POLYGON__PG_PlayerState_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerState_Base, OnPlayerNameChanged, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerState_Base, ClientBackendComponent, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APG_PlayerState_Base, 0x0338);
		}

		// class APG_PlayerState_Game : public APG_PlayerState_Base
		TEST_METHOD(Class__POLYGON__PG_PlayerState_Game)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerState_Game, OnChangeNumberKills, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerState_Game, OnChangeNumberDeaths, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerState_Game, OnSetTeam, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerState_Game, UnknownData_71QA, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerState_Game, Team, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerState_Game, UnknownData_XAER, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerState_Game, NumberKills, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerState_Game, NumberDeaths, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerState_Game, PlayerCoreComponent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APG_PlayerState_Game, ChatSystemComponent, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APG_PlayerState_Game, 0x0388);
		}

		// class APG_PlayerState_Menu : public APG_PlayerState_Base
		TEST_METHOD(Class__POLYGON__PG_PlayerState_Menu)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APG_PlayerState_Menu, 0x0338);
		}

		// class UPlayerCoreComponent : public UActorComponent
		TEST_METHOD(Class__POLYGON__PlayerCoreComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCoreComponent, OnSetTotalProgress, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCoreComponent, OnNewLevelReceived, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCoreComponent, PremiumScore, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCoreComponent, TotalProgress, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCoreComponent, Currency, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCoreComponent, UnknownData_OXBE, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCoreComponent, bHasPremiumAccount, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCoreComponent, UnknownData_CWS9, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerCoreComponent, 0x0128);
		}

		// class UServerBackendComponent : public UGeneralBackendComponent
		TEST_METHOD(Class__POLYGON__ServerBackendComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerBackendComponent, UnknownData_0I4G, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerBackendComponent, 0x00F0);
		}

		// class ASupportBox : public AActor
		TEST_METHOD(Class__POLYGON__SupportBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupportBox, UnknownData_OT6G, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupportBox, BoxMesh, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupportBox, WidgetTypeSupportBox, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASupportBox, InteractionWidget, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASupportBox, 0x0248);
		}

		// class ASupportBox_Ammo : public ASupportBox
		TEST_METHOD(Class__POLYGON__SupportBox_Ammo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASupportBox_Ammo, 0x0248);
		}

		// class ASupportBox_Health : public ASupportBox
		TEST_METHOD(Class__POLYGON__SupportBox_Health)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASupportBox_Health, 0x0248);
		}

		// class ATeamBase : public AActor
		TEST_METHOD(Class__POLYGON__TeamBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeamBase, Team, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATeamBase, UnknownData_Q59I, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATeamBase, 0x0228);
		}

		// class UWeaponComponent : public UActorComponent
		TEST_METHOD(Class__POLYGON__WeaponComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, OnSetCurrentWeapon, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, OnSetPrimaryWeapon, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, OnSetSecondaryWeapon, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, OnChangeNumberGrenades, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, OnAiming, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, UnknownData_OR3P, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, GrenadesNumber, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, bWeaponIsDown, 0x0117);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, CurrentWeapon, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, PrimaryWeapon, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, SecondaryWeapon, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, FireFX, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, HitFX_Metal, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, HitFX_Stone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, HitFX_Dirt, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, HitFX_Wood, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, HitFX_Water, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, HitFX_Glass, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, DecalImpact, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, SoundCharacterHit, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, SoundRicochetHit, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, SoundAiming, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, AnimChangeWeapon, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, AnimThrowGrenade, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponComponent, AnimLowThrowGrenade, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponComponent, 0x01A0);
		}

		// class UBlueprintGameplayTagLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0028);
		}

		// class UGameplayTagAssetInterface : public UInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0028);
		}

		// class UEditableGameplayTagQuery : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_YZTZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x0098);
		}

		// class UEditableGameplayTagQueryExpression : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0028);
		}

		// class UEditableGameplayTagQueryExpression_AnyTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AllTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_NoTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AnyExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_AllExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_NoExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0038);
		}

		// class UGameplayTagsManager : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_ND4J, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_1JGN, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_DWEH, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0210);
		}

		// class UGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0048);
		}

		// class URestrictedGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__RestrictedGameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, RestrictedGameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedGameplayTagsList, 0x0048);
		}

		// class UGameplayTagsSettings : public UGameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_DF50, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, InvalidTagCharacters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, RestrictedConfigFiles, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00B8);
		}

		// class UGameplayTagsDeveloperSettings : public UDeveloperSettings
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, FavoriteTagSource, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0050);
		}

		// class UPropertyAccess : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyAccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyAccess, 0x0028);
		}

		// class UPropertyEventBroadcaster : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyEventBroadcaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyEventBroadcaster, 0x0028);
		}

		// class UPropertyEventSubscriber : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyEventSubscriber)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyEventSubscriber, 0x0028);
		}

		// class USoundSimple : public USoundBase
		TEST_METHOD(Class__SoundUtilities__SoundSimple)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSimple, Variations, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSimple, SoundWave, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSimple, 0x01D0);
		}

		// class USoundUtilitiesBPFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SoundUtilities__SoundUtilitiesBPFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundUtilitiesBPFunctionLibrary, 0x0028);
		}

		// class UPlayFabAuthenticationContext : public UObject
		TEST_METHOD(Class__PlayFabCommon__PlayFabAuthenticationContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationContext, ClientSessionTicket, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationContext, EntityToken, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationContext, DeveloperSecretKey, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabAuthenticationContext, PlayFabId, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabAuthenticationContext, 0x0068);
		}

		// class UPlayFabRuntimeSettings : public UObject
		TEST_METHOD(Class__PlayFabCommon__PlayFabRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabRuntimeSettings, ProductionEnvironmentURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabRuntimeSettings, TitleId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayFabRuntimeSettings, DeveloperSecretKey, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayFabRuntimeSettings, 0x0058);
		}

		// class UConsoleSettings : public UObject
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_AZX5, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bDisplayHelpInAutoComplete, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_L0A9, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_CEC9, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0070);
		}

		// class UGameMapsSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, FourPlayerSplitscreenLayout, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_C9Q4, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x00F0);
		}

		// class UGameNetworkManagerSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_FZCF, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_RI5U, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0058);
		}

		// class UGameSessionSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_U2KZ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0038);
		}

		// class UGeneralEngineSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0028);
		}

		// class UGeneralProjectSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, UnknownData_L1ZU, 0x010F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0110);
		}

		// class UHudSettings : public UObject
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_FALB, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0040);
		}

		// class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, SectionToKey, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyBinding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, UnknownData_JG93, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x00A8);
		}

		// class UFloatChannelEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__FloatChannelEvaluatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatChannelEvaluatorSystem, 0x0040);
		}

		// class UMovieSceneTransformOrigin : public UInterface
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOrigin)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOrigin, 0x0028);
		}

		// class UMovieScene3DConstraintSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintBindingID, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0110);
		}

		// class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_5ROK, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_CQAC, 0x012E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0130);
		}

		// class UMovieScene3DConstraintTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x0088);
		}

		// class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x0088);
		}

		// class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_IBZ8, 0x01B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_FTQR, 0x01B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01B8);
		}

		// class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathTrack, UnknownData_TLOP, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x0090);
		}

		// class UMovieScenePropertySystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertySystem, InstantiatorSystem, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertySystem, UnknownData_4NM2, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertySystem, 0x0050);
		}

		// class UMovieScene3DTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformPropertySystem, 0x0050);
		}

		// class UMovieScene3DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_BLRT, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_VRJC, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, bUseQuaternionInterpolation, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_B66S, 0x0739);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0740);
		}

		// class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x00A8);
		}

		// class UMovieSceneActorReferenceSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorReferenceData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x0228);
		}

		// class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceTrack, UnknownData_ZDLA, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x00B0);
		}

		// class UMovieSceneAudioSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartFrameOffset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartOffset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_NQW4, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttachActorData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bLooping, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x02FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_64DB, 0x02FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0338);
		}

		// class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, UnknownData_FQ2Q, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0090);
		}

		// class UMovieSceneBaseValueEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBaseValueEvaluatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBaseValueEvaluatorSystem, 0x0040);
		}

		// class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolTrack, UnknownData_6GTY, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x00B0);
		}

		// class UMovieSceneByteSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0180);
		}

		// class UMovieSceneByteTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, UnknownData_69QN, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x00B8);
		}

		// class UMovieSceneCameraAnimSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendOutTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_E1RO, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0128);
		}

		// class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, UnknownData_KX6E, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x0090);
		}

		// class UMovieSceneCameraCutSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_Y2GI, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, bLockPreviousCamera, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_7Y36, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraBindingID, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_BVAW, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, InitialCameraCutTransform, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, bHasInitialCameraCutTransform, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_LO9F, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0160);
		}

		// class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, bCanBlend, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, UnknownData_YEE1, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x0090);
		}

		// class UMovieSceneCameraCutTrackInstance : public UMovieSceneTrackInstance
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrackInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrackInstance, UnknownData_06N3, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrackInstance, 0x00B8);
		}

		// class UMovieSceneCameraShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_OVII, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_EO0T, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0128);
		}

		// class UMovieSceneCameraShakeSourceShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeSection, ShakeData, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceShakeSection, 0x0108);
		}

		// class UMovieSceneCameraShakeSourceShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeTrack, UnknownData_I1ED, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeTrack, CameraShakeSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceShakeTrack, 0x0090);
		}

		// class UMovieSceneCameraShakeSourceTriggerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerSection, Channel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceTriggerSection, 0x0170);
		}

		// class UMovieSceneCameraShakeSourceTriggerTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerTrack, UnknownData_Z5AQ, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceTriggerTrack, 0x0090);
		}

		// class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, UnknownData_2ZQT, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x0090);
		}

		// class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, ShotDisplayName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0188);
		}

		// class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x0088);
		}

		// class UMovieSceneColorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x0368);
		}

		// class UMovieSceneColorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_YCRM, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_0DB8, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x00B8);
		}

		// class UMovieSceneComponentAttachmentInvalidatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentAttachmentInvalidatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentAttachmentInvalidatorSystem, 0x0040);
		}

		// class UMovieSceneComponentAttachmentSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentAttachmentSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentAttachmentSystem, UnknownData_IPCI, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentAttachmentSystem, 0x01C0);
		}

		// class UMovieSceneComponentMobilitySystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMobilitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMobilitySystem, UnknownData_LU4W, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMobilitySystem, 0x0220);
		}

		// class UMovieScenePreAnimatedComponentTransformSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePreAnimatedComponentTransformSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePreAnimatedComponentTransformSystem, UnknownData_ULC9, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreAnimatedComponentTransformSystem, 0x01C0);
		}

		// class UMovieSceneComponentTransformSystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentTransformSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentTransformSystem, 0x0050);
		}

		// class UMovieSceneEnumSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0180);
		}

		// class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, UnknownData_8133, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x00B8);
		}

		// class UMovieSceneEulerTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformPropertySystem, 0x0050);
		}

		// class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformTrack, 0x00A8);
		}

		// class UMovieSceneEventSectionBase : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSectionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSectionBase, 0x00E8);
		}

		// class UMovieScenePrimitiveMaterialSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialSection, MaterialChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialSection, 0x01A8);
		}

		// class UMovieScenePrimitiveMaterialTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_1E7J, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, MaterialIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_0M2I, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialTrack, 0x00B8);
		}

		// class UMovieScenePropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyInstantiatorSystem, UnknownData_FKMH, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyInstantiatorSystem, 0x0290);
		}

		// class UMovieSceneQuaternionInterpolationRotationSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneQuaternionInterpolationRotationSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneQuaternionInterpolationRotationSystem, 0x0040);
		}

		// class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Animation, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, PlayRate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_U2DB, 0x01DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartLocationOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartRotationOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchWithPrevious, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_OVMT, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedBoneName, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedLocationOffset, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedRotationOffset, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchTranslation, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchIncludeZHeight, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationYaw, 0x0226);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationPitch, 0x0227);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationRoll, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_1Q54, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x0270);
		}

		// class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_ITWF, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_IQEX, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, RootMotionParams, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bBlendFirstChildOfRoot, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_N0HW, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x00D0);
		}

		// class UMovieSceneSlomoSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSlomoSection, FloatCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0188);
		}

		// class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x00A8);
		}

		// class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSlomoTrack, UnknownData_3TQ0, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x00B0);
		}

		// class UMovieSceneStringSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0188);
		}

		// class UMovieSceneStringTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringTrack, UnknownData_8GKK, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x00B0);
		}

		// class UMovieSceneTransformOriginSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOriginSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTransformOriginSystem, UnknownData_MHRC, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOriginSystem, 0x0078);
		}

		// class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x00A8);
		}

		// class UMovieSceneVectorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_CU2U, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x0370);
		}

		// class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_6NXC, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_DWW0, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x00B8);
		}

		// class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x00B0);
		}

		// class UMovieSceneHierarchicalEasingInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneHierarchicalEasingInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneHierarchicalEasingInstantiatorSystem, UnknownData_S1X3, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneHierarchicalEasingInstantiatorSystem, 0x0090);
		}

		// class UWeightAndEasingEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__WeightAndEasingEvaluatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightAndEasingEvaluatorSystem, UnknownData_507K, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeightAndEasingEvaluatorSystem, 0x0078);
		}

		// class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventRepeaterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, UnknownData_B7FO, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, Event, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventRepeaterSection, 0x0118);
		}

		// class UMovieSceneEventSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, Events, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, EventData, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x01E8);
		}

		// class UMovieSceneEventSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSystem, UnknownData_2PW6, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSystem, 0x0090);
		}

		// class UMovieScenePreSpawnEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePreSpawnEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreSpawnEventSystem, 0x0090);
		}

		// class UMovieScenePostSpawnEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePostSpawnEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePostSpawnEventSystem, 0x0090);
		}

		// class UMovieScenePostEvalEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePostEvalEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePostEvalEventSystem, 0x0090);
		}

		// class UMovieSceneEventTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_50WI, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_JOW5, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventPosition, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_0FMZ, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x0098);
		}

		// class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, UnknownData_ONIC, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, EventChannel, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTriggerSection, 0x0178);
		}

		// class UMovieSceneFadeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FloatCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_AD3E, 0x0199);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x01A0);
		}

		// class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeTrack, UnknownData_PZWR, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x00B0);
		}

		// class UMovieSceneFloatPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatPropertySystem, 0x0050);
		}

		// class UMovieSceneFloatSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, UnknownData_L69C, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0190);
		}

		// class UMovieSceneHierarchicalBiasSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneHierarchicalBiasSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneHierarchicalBiasSystem, 0x0040);
		}

		// class UMovieSceneIntegerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0178);
		}

		// class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerTrack, UnknownData_50MM, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x00B0);
		}

		// class UMovieSceneInterrogatedPropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneInterrogatedPropertyInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneInterrogatedPropertyInstantiatorSystem, UnknownData_9GAO, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneInterrogatedPropertyInstantiatorSystem, 0x01E8);
		}

		// class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_YYYW, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, Visibility, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_WJNF, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x0108);
		}

		// class UMovieSceneLevelVisibilitySystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySystem, UnknownData_K1QM, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySystem, 0x01A8);
		}

		// class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x0088);
		}

		// class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x0088);
		}

		// class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, UnknownData_F3PT, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x0098);
		}

		// class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_WEM8, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, MaterialIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_JARE, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x0098);
		}

		// class UMovieSceneObjectPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertySection, ObjectChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertySection, 0x01A8);
		}

		// class UMovieSceneObjectPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, UnknownData_LRHU, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, PropertyClass, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertyTrack, 0x00B8);
		}

		// class UMovieSceneParameterSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, BoolParameterNamesAndCurves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, Vector2DParameterNamesAndCurves, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, TransformParameterNamesAndCurves, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0148);
		}

		// class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, UnknownData_AXLA, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x0090);
		}

		// class UMovieSceneParticleSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0180);
		}

		// class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, UnknownData_AAZH, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0090);
		}

		// class UMovieScenePiecewiseFloatBlenderSystem : public UMovieSceneBlenderSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePiecewiseFloatBlenderSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePiecewiseFloatBlenderSystem, UnknownData_856O, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePiecewiseFloatBlenderSystem, 0x0120);
		}

		// class UAssetRegistryImpl : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_SLRH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x07B8);
		}

		// class UAssetRegistryHelpers : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0028);
		}

		// class UAssetRegistry : public UInterface
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0028);
		}

		// class ABP_Item_Rifle_ScarH_C : public AItem_Weapon_Rifle
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Rifle_ScarH__BP_Item_Rifle_ScarH_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Rifle_ScarH_C, UberGraphFrame, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Rifle_ScarH_C, Aim_B, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Rifle_ScarH_C, Aim_A, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Rifle_ScarH_C, 0x03F8);
		}

		// class ABP_Item_Rifle_G36C_C : public AItem_Weapon_Rifle
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Rifle_G36C__BP_Item_Rifle_G36C_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Rifle_G36C_C, UberGraphFrame, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Rifle_G36C_C, Sight, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Rifle_G36C_C, 0x03F0);
		}

		// class ABP_Item_Rifle_Famas_C : public AItem_Weapon_Rifle
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Rifle_Famas__BP_Item_Rifle_Famas_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Rifle_Famas_C, 0x03E0);
		}

		// class UUI_HitIndicator_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_HitIndicator__UI_HitIndicator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HitIndicator_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HitIndicator_C, StartAnimation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HitIndicator_C, Image_Indicator, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_HitIndicator_C, FromLocation, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_HitIndicator_C, 0x0284);
		}

		// class UUI_Solder_Customization_ItemInfo_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Solder_Customization_ItemInfo__UI_Solder_Customization_ItemInfo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_ItemInfo_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_ItemInfo_C, MultiLineEditableText_CompatibleModules, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_ItemInfo_C, MultiLineEditableText_Description, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_ItemInfo_C, TextBlock_ItemName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_ItemInfo_C, UI_ItemParameter_AccuracyHip, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_ItemInfo_C, UI_ItemParameter_AccuracySight, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_ItemInfo_C, UI_ItemParameter_Damage, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_ItemInfo_C, UI_ItemParameter_MagazineCapacity, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_ItemInfo_C, UI_ItemParameter_Range, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_ItemInfo_C, UI_ItemParameter_RateOfFire, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_ItemInfo_C, VerticalBox_CompatibleModules, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_ItemInfo_C, ItemId, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Solder_Customization_ItemInfo_C, ItemClass, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Solder_Customization_ItemInfo_C, 0x02C8);
		}

		// class UAnalyticsBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnalyticsBlueprintLibrary__AnalyticsBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnalyticsBlueprintLibrary, 0x0028);
		}

		// class UUI_Multiplayer_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Multiplayer__UI_Multiplayer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Multiplayer_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Multiplayer_C, HorizontalBox_Header, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Multiplayer_C, UI_Button_CreateServer, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Multiplayer_C, UI_Button_Quickmatch, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Multiplayer_C, UI_Button_ServerList, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Multiplayer_C, UI_CreateServer, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Multiplayer_C, UI_QuickMatchWidget_Valley, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Multiplayer_C, UI_ServerList, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Multiplayer_C, WidgetSwitcher, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Multiplayer_C, 0x02A8);
		}

		// class UKismetProceduralMeshLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0028);
		}

		// class UProceduralMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_4LXQ, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_TOTT, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_A3T1, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x04D0);
		}

		// class UBodySetupCore : public UObject
		TEST_METHOD(Class__PhysicsCore__BodySetupCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, BoneName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, PhysicsType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, CollisionTraceFlag, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, CollisionReponse, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, UnknownData_ZPFE, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetupCore, 0x0048);
		}

		// class UChaosPhysicalMaterial : public UObject
		TEST_METHOD(Class__PhysicsCore__ChaosPhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, LinearEtherDrag, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, AngularEtherDrag, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingLinearVelocityThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingAngularVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, UnknownData_JFMI, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosPhysicalMaterial, 0x0048);
		}

		// class UPhysicalMaterial : public UObject
		TEST_METHOD(Class__PhysicsCore__PhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_LNCX, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RestitutionCombineMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideRestitutionCombineMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_LA5X, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepLinearVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepAngularVelocityThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepCounterThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_BBUT, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_ECBR, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0080);
		}

		// class UPhysicalMaterialPropertyBase : public UObject
		TEST_METHOD(Class__PhysicsCore__PhysicalMaterialPropertyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0028);
		}

		// class UPhysicsSettingsCore : public UDeveloperSettings
		TEST_METHOD(Class__PhysicsCore__PhysicsSettingsCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultGravityZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultTerminalVelocity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultFluidFriction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, SimulateScratchMemorySize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, RagdollAggregateThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, TriangleMeshTriangleMinAreaThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnableShapeSharing, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnablePCM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnableStabilization, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bWarnMissingLocks, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnable2DPhysics, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bDefaultHasComplexCollision, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_F1XY, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, BounceThresholdVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, FrictionCombineMode, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, RestitutionCombineMode, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_P7D2, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxAngularVelocity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxDepenetrationVelocity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, ContactOffsetMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MinContactOffset, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxContactOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bSimulateSkeletalMeshOnDedicatedServer, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultShapeComplexity, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_0LBC, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, SolverOptions, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettingsCore, 0x00E0);
		}

		// class USoundfieldEncodingSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEncodingSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEncodingSettingsBase, 0x0028);
		}

		// class UAudioEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__AudioEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioEndpointSettingsBase, 0x0028);
		}

		// class USpatializationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SpatializationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0028);
		}

		// class UOcclusionPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__OcclusionPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0028);
		}

		// class UReverbPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__ReverbPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0028);
		}

		// class USoundModulatorBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundModulatorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundModulatorBase, 0x0028);
		}

		// class USoundfieldEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSettingsBase, 0x0028);
		}

		// class USoundfieldEffectSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectSettingsBase, 0x0028);
		}

		// class USoundfieldEffectBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEffectBase, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectBase, 0x0030);
		}

		// class UUI_Options_Spinner_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Options_Spinner__UI_Options_Spinner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Spinner_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Spinner_C, LeftButton, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Spinner_C, RightButton, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Spinner_C, TextBlock_Label, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Spinner_C, SelectValue, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Spinner_C, CVarName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Spinner_C, Options, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_Spinner_C, OnChangedValue, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Options_Spinner_C, 0x02B8);
		}

		// class UUI_Button_Line_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Button_Line__UI_Button_Line_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, Hovered, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, Border, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, Button, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, Image_Corner, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, TextBlock_Name, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, Name, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, OnPressed, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, FontSize, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, IsSelected, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, UnknownData_B820, 0x02BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, GeneralColorID, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, SelectColorID, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, DisableColorID, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, HoveredColorID, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, SelectColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Button_Line_C, DisableColor, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Button_Line_C, 0x0300);
		}

		// class UUI_Options_InputRow_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Options_InputRow__UI_Options_InputRow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_InputRow_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_InputRow_C, Content_Keyboard, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_InputRow_C, LabelText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUI_Options_InputRow_C, Label, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Options_InputRow_C, 0x0290);
		}

		// class ADestructibleActor : public AActor
		TEST_METHOD(Class__ApexDestruction__DestructibleActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, DestructibleComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, OnActorFracture, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestructibleActor, 0x0238);
		}

		// class UDestructibleComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__ApexDestruction__DestructibleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_IBGL, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, FractureEffects, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, bEnableHardSleeping, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_25MN, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, LargeChunkThreshold, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_R69Q, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, OnComponentFracture, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_VJHN, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleComponent, 0x0770);
		}

		// class UDestructibleFractureSettings : public UObject
		TEST_METHOD(Class__ApexDestruction__DestructibleFractureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, CellSiteCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, FractureMaterialDesc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, RandomSeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_S6JP, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, VoronoiSites, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, OriginalSubmeshCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_GZOC, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, Materials, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, ChunkParameters, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_CJ8T, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleFractureSettings, 0x00B8);
		}

		// class UDestructibleMesh : public USkeletalMesh
		TEST_METHOD(Class__ApexDestruction__DestructibleMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, DefaultDestructibleParameters, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, FractureEffects, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, UnknownData_H017, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleMesh, 0x0438);
		}

		// class ABP_Road_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Road__BP_Road_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Road_C, Spline, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Road_C, DefaultSceneRoot, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Road_C, Close_, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Road_C, UnVisible_RedLine, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Road_C, 0x0232);
		}

		// class UUI_Interaction_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__UI_Interaction__UI_Interaction_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUI_Interaction_C, 0x0260);
		}

		// class UCameraShake_ThrowGrenade_C : public UMatineeCameraShake
		TEST_METHOD(BlueprintGeneratedClass__CameraShake_ThrowGrenade__CameraShake_ThrowGrenade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake_ThrowGrenade_C, 0x0180);
		}

		// class ABP_Grenade_C : public AItem_Weapon_Grenade
		TEST_METHOD(BlueprintGeneratedClass__BP_Grenade__BP_Grenade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grenade_C, 0x02B8);
		}

		// class ULayersBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ActorLayerUtilities__LayersBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayersBlueprintLibrary, 0x0028);
		}

		// class UBuildPatchManifest : public UObject
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_5CXP, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0120);
		}

		// class ABP_Item_Sniper_Barret_C : public AItem_Weapon_Sniper
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Sniper_Barret__BP_Item_Sniper_Barret_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Sniper_Barret_C, 0x03E0);
		}

		// class UDmgTypeBP_Environmental_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0040);
		}

		// class ABP_Item_Underbarrel_StandartUnderbarrel_C : public AItem_Module_General
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Underbarrel_StandartUnderbarrel__BP_Item_Underbarrel_StandartUnderbarrel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Underbarrel_StandartUnderbarrel_C, DefaultSceneRoot, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Underbarrel_StandartUnderbarrel_C, 0x0288);
		}

		// class ABP_Item_Skin_StandartSkin_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_StandartSkin__BP_Item_Skin_StandartSkin_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_StandartSkin_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_StandartSkin_C, 0x0290);
		}

		// class ABP_Item_Skin_VSS_04_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_VSS_04__BP_Item_Skin_VSS_04_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_VSS_04_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_VSS_04_C, 0x0290);
		}

		// class ABP_Item_Skin_M16_03_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_M16_03__BP_Item_Skin_M16_03_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_M16_03_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_M16_03_C, 0x0290);
		}

		// class ABP_Item_Skin_M16_01_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_M16_01__BP_Item_Skin_M16_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_M16_01_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_M16_01_C, 0x0290);
		}

		// class ABP_Item_Skin_G36C_01_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_G36C_01__BP_Item_Skin_G36C_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_G36C_01_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_G36C_01_C, 0x0290);
		}

		// class ABP_Item_Skin_AK12_02_C : public AItem_Module_Skin
		TEST_METHOD(BlueprintGeneratedClass__BP_Item_Skin_AK12_02__BP_Item_Skin_AK12_02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Item_Skin_AK12_02_C, DefaultSceneRoot, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Item_Skin_AK12_02_C, 0x0290);
		}

		// class UCameraShake_SniperShot_C : public UMatineeCameraShake
		TEST_METHOD(BlueprintGeneratedClass__CameraShake_SniperShot__CameraShake_SniperShot_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake_SniperShot_C, 0x0180);
		}

		// struct FUWorksSteamInventoryResult
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksSteamInventoryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamInventoryResult, UnknownData_SRLN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksSteamInventoryResult, 0x0004);
		}

		// struct FUWorksServerInfo
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksServerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, IP, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, QueryPort, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, ConnectionPort, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, Ping, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, bHadSuccessfulResponse, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, bDoNotRefresh, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, UnknownData_ECT0, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, GameDir, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, Map, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, GameDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, AppID, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, Players, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, MaxPlayers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, BotPlayers, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, bPassword, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, BSecure, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, UnknownData_TX51, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, TimeLastPlayed, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, ServerVersion, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, UnknownData_IWDA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, GameTags, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksServerInfo, SteamID, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksServerInfo, 0x0098);
		}

		// struct FUWorksPlayerInfo
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksPlayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksPlayerInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksPlayerInfo, Score, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksPlayerInfo, TimePlayed, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksPlayerInfo, 0x0018);
		}

		// struct FUWorksRuleInfo
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksRuleInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksRuleInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksRuleInfo, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksRuleInfo, 0x0020);
		}

		// struct FUWorksScreenshotHandle
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksScreenshotHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksScreenshotHandle, UnknownData_EY8X, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksScreenshotHandle, 0x0004);
		}

		// struct FUWorksUGCQueryHandle
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksUGCQueryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksUGCQueryHandle, UnknownData_8ZHV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksUGCQueryHandle, 0x0008);
		}

		// struct FUWorksTicketHandle
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksTicketHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksTicketHandle, UnknownData_XUPS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksTicketHandle, 0x0004);
		}

		// struct FUWorksSteamLeaderboard
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksSteamLeaderboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamLeaderboard, UnknownData_WS1O, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksSteamLeaderboard, 0x0008);
		}

		// struct FUWorksSteamLeaderboardEntries
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksSteamLeaderboardEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamLeaderboardEntries, UnknownData_T42Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksSteamLeaderboardEntries, 0x0008);
		}

		// struct FUWorksAnnexCoreAppList
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreAppList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreAppList, UnknownData_Y3GC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreAppList, 0x0001);
		}

		// struct FUWorksAnnexCoreApps
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreApps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreApps, UnknownData_M5Q6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreApps, 0x0001);
		}

		// struct FUWorksControllerHandle
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksControllerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerHandle, UnknownData_Z9ZB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksControllerHandle, 0x0008);
		}

		// struct FUWorksControllerDigitalActionHandle
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksControllerDigitalActionHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerDigitalActionHandle, UnknownData_OZTD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksControllerDigitalActionHandle, 0x0008);
		}

		// struct FUWorksControllerAnalogActionHandle
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksControllerAnalogActionHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerAnalogActionHandle, UnknownData_WXIP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksControllerAnalogActionHandle, 0x0008);
		}

		// struct FUWorksControllerActionSetHandle
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksControllerActionSetHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerActionSetHandle, UnknownData_ZGO2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksControllerActionSetHandle, 0x0008);
		}

		// struct FUWorksControllerMotionData
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksControllerMotionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerMotionData, RotQuatX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerMotionData, RotQuatY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerMotionData, RotQuatZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerMotionData, RotQuatW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerMotionData, PosAccelX, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerMotionData, PosAccelY, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerMotionData, PosAccelZ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerMotionData, RotVelX, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerMotionData, RotVelY, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerMotionData, RotVelZ, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksControllerMotionData, 0x0028);
		}

		// struct FUWorksControllerDigitalActionData
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksControllerDigitalActionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerDigitalActionData, bState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerDigitalActionData, bActive, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksControllerDigitalActionData, 0x0002);
		}

		// struct FUWorksControllerAnalogActionData
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksControllerAnalogActionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerAnalogActionData, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerAnalogActionData, UnknownData_K5TO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerAnalogActionData, X, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerAnalogActionData, Y, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerAnalogActionData, bActive, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksControllerAnalogActionData, UnknownData_6IMK, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksControllerAnalogActionData, 0x0010);
		}

		// struct FUWorksAnnexCoreController
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreController, UnknownData_QT0T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreController, 0x0001);
		}

		// struct FUWorksFriendsGroupID
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksFriendsGroupID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksFriendsGroupID, UnknownData_FEGO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksFriendsGroupID, 0x0002);
		}

		// struct FUWorksAnnexCoreFriends
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreFriends)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreFriends, UnknownData_L8RM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreFriends, 0x0001);
		}

		// struct FUWorksAnnexCoreGameServer
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreGameServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreGameServer, UnknownData_QAZQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreGameServer, 0x0001);
		}

		// struct FUWorksAnnexCoreGameServerStats
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreGameServerStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreGameServerStats, UnknownData_089M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreGameServerStats, 0x0001);
		}

		// struct FUWorksSteamItemDetails
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksSteamItemDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamItemDetails, InstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamItemDetails, Definition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamItemDetails, Quantity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamItemDetails, Flags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksSteamItemDetails, 0x0020);
		}

		// struct FUWorksAnnexCoreInventory
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreInventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreInventory, UnknownData_SKNO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreInventory, 0x0001);
		}

		// struct FUWorksAnnexCoreMatchmaking
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreMatchmaking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreMatchmaking, UnknownData_MLZ1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreMatchmaking, 0x0001);
		}

		// struct FUWorksAnnexCoreMatchmakingServers
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreMatchmakingServers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreMatchmakingServers, UnknownData_9IAP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreMatchmakingServers, 0x0001);
		}

		// struct FUWorksAnnexCoreMusic
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreMusic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreMusic, UnknownData_Q6SW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreMusic, 0x0001);
		}

		// struct FUWorksP2PSessionState
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksP2PSessionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksP2PSessionState, bConnectionActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksP2PSessionState, bConnecting, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksP2PSessionState, P2PSessionError, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksP2PSessionState, bUsingRelay, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksP2PSessionState, BytesQueuedForSend, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksP2PSessionState, PacketsQueuedForSend, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksP2PSessionState, 0x000C);
		}

		// struct FUWorksAnnexCoreNetworking
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreNetworking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreNetworking, UnknownData_0ZR5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreNetworking, 0x0001);
		}

		// struct FUWorksUGCFileWriteStreamHandle
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksUGCFileWriteStreamHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksUGCFileWriteStreamHandle, UnknownData_N8JO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksUGCFileWriteStreamHandle, 0x0008);
		}

		// struct FUWorksAnnexCoreRemoteStorage
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreRemoteStorage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreRemoteStorage, UnknownData_PWIK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreRemoteStorage, 0x0001);
		}

		// struct FUWorksAnnexCoreScreenshots
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreScreenshots)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreScreenshots, UnknownData_7G4H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreScreenshots, 0x0001);
		}

		// struct FUWorksUGCHandle
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksUGCHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksUGCHandle, UnknownData_MRC3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksUGCHandle, 0x0008);
		}

		// struct FUWorksSteamUGCDetails
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksSteamUGCDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, PublishedFileID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, Result, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, FileType, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, UnknownData_VLU0, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, CreatorAppID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, ConsumerAppID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, UnknownData_1B4T, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, Title, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, SteamIDOwner, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, TimeCreated, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, TimeUpdated, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, TimeAddedToUserList, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, Visibility, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, bBanned, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, bAcceptedForUse, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, bTagsTruncated, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, Tags, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, File, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, PreviewFile, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, Filename, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, FileSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, PreviewFileSize, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, URL, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, VotesUp, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, VotesDown, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, Score, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUGCDetails, NumChildren, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksSteamUGCDetails, 0x00A8);
		}

		// struct FUWorksUGCUpdateHandle
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksUGCUpdateHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksUGCUpdateHandle, UnknownData_6DVV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksUGCUpdateHandle, 0x0008);
		}

		// struct FUWorksAnnexCoreUGC
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreUGC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreUGC, UnknownData_6FXV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreUGC, 0x0001);
		}

		// struct FUWorksAnnexCoreUser
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreUser, UnknownData_DCB6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreUser, 0x0001);
		}

		// struct FUWorksLeaderboardEntry
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksLeaderboardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksLeaderboardEntry, SteamID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksLeaderboardEntry, GlobalRank, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksLeaderboardEntry, Score, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksLeaderboardEntry, Details, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksLeaderboardEntry, UnknownData_6CK3, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksLeaderboardEntry, UGCHandle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksLeaderboardEntry, 0x0020);
		}

		// struct FUWorksAnnexCoreUserStats
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreUserStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreUserStats, UnknownData_CPCN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreUserStats, 0x0001);
		}

		// struct FUWorksAnnexCoreUtils
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksAnnexCoreUtils)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexCoreUtils, UnknownData_7W4I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexCoreUtils, 0x0001);
		}

		// struct FUWorksSteamPipe
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksSteamPipe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamPipe, UnknownData_0A56, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksSteamPipe, 0x0004);
		}

		// struct FUWorksSteamUser
		TEST_METHOD(ScriptStruct__UWorksCore__UWorksSteamUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamUser, UnknownData_W8ZI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksSteamUser, 0x0004);
		}

		// struct FUWorksAnnexWebApps
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebApps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebApps, UnknownData_3GAD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebApps, 0x0001);
		}

		// struct FUWorksAnnexWebBroadcast
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebBroadcast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebBroadcast, UnknownData_NQ81, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebBroadcast, 0x0001);
		}

		// struct FUWorksAnnexWebCheatReporting
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebCheatReporting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebCheatReporting, UnknownData_8M74, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebCheatReporting, 0x0001);
		}

		// struct FUWorksAnnexWebCommunity
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebCommunity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebCommunity, UnknownData_QGMP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebCommunity, 0x0001);
		}

		// struct FUWorksAnnexWebEcon
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebEcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebEcon, UnknownData_2ZM6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebEcon, 0x0001);
		}

		// struct FUWorksAnnexWebEconMarket
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebEconMarket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebEconMarket, UnknownData_JBAX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebEconMarket, 0x0001);
		}

		// struct FUWorksAnnexWebEconomy
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebEconomy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebEconomy, UnknownData_DSI9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebEconomy, 0x0001);
		}

		// struct FUWorksAnnexWebGameInventory
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebGameInventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebGameInventory, UnknownData_5XDR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebGameInventory, 0x0001);
		}

		// struct FUWorksSessions
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksSessions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSessions, UnknownData_WB6K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksSessions, 0x0001);
		}

		// struct FUWorksUsers
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksUsers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksUsers, UnknownData_18I6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksUsers, 0x0001);
		}

		// struct FUWorksTitle
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksTitle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksTitle, UnknownData_LJBG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksTitle, 0x0001);
		}

		// struct FUWorksAnnexWebGameNotifications
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebGameNotifications)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebGameNotifications, UnknownData_D675, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebGameNotifications, 0x0001);
		}

		// struct FUWorksAnnexWebGameServers
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebGameServers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebGameServers, UnknownData_IF20, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebGameServers, 0x0001);
		}

		// struct FUWorksAnnexWebGameServerStats
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebGameServerStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebGameServerStats, UnknownData_6AUB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebGameServerStats, 0x0001);
		}

		// struct FUWorksAnnexWebInventory
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebInventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebInventory, UnknownData_27CW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebInventory, 0x0001);
		}

		// struct FUWorksAnnexWebLeaderboards
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebLeaderboards)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebLeaderboards, UnknownData_GREL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebLeaderboards, 0x0001);
		}

		// struct FUWorksAnnexWebMicroTxn
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebMicroTxn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebMicroTxn, UnknownData_885G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebMicroTxn, 0x0001);
		}

		// struct FUWorksAnnexWebNews
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebNews)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebNews, UnknownData_45GX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebNews, 0x0001);
		}

		// struct FUWorksPlaySessions
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksPlaySessions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksPlaySessions, UnknownData_RAD3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksPlaySessions, 0x0001);
		}

		// struct FUWorksAnnexWebPlayer
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebPlayer, UnknownData_J4FN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebPlayer, 0x0001);
		}

		// struct FUWorksRequiredKVTags
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksRequiredKVTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksRequiredKVTags, UnknownData_B904, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksRequiredKVTags, 0x0001);
		}

		// struct FUWorksAnnexWebPublishedFile
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebPublishedFile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebPublishedFile, UnknownData_YMVK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebPublishedFile, 0x0001);
		}

		// struct FUWorksAnnexWebPublishedItemSearch
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebPublishedItemSearch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebPublishedItemSearch, UnknownData_H9UL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebPublishedItemSearch, 0x0001);
		}

		// struct FUWorksAnnexWebPublishedItemVoting
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebPublishedItemVoting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebPublishedItemVoting, UnknownData_FONL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebPublishedItemVoting, 0x0001);
		}

		// struct FUWorksAnnexWebRemoteStorage
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebRemoteStorage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebRemoteStorage, UnknownData_XJ1B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebRemoteStorage, 0x0001);
		}

		// struct FUWorksAnnexWebUser
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebUser, UnknownData_20MM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebUser, 0x0001);
		}

		// struct FUWorksAnnexWebUserAuth
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebUserAuth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebUserAuth, UnknownData_TTP5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebUserAuth, 0x0001);
		}

		// struct FUWorksAnnexWebUserStats
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebUserStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebUserStats, UnknownData_E3LD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebUserStats, 0x0001);
		}

		// struct FUWorksLanguages
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksLanguages)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksLanguages, UnknownData_WLJ3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksLanguages, 0x0001);
		}

		// struct FUWorksPartnerAccounts
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksPartnerAccounts)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksPartnerAccounts, UnknownData_X4ZK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksPartnerAccounts, 0x0001);
		}

		// struct FUWorksAssociatedWorkshopFiles
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAssociatedWorkshopFiles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAssociatedWorkshopFiles, UnknownData_9K8Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAssociatedWorkshopFiles, 0x0001);
		}

		// struct FUWorksAnnexWebWorkshop
		TEST_METHOD(ScriptStruct__UWorksWeb__UWorksAnnexWebWorkshop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksAnnexWebWorkshop, UnknownData_UZY6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksAnnexWebWorkshop, 0x0001);
		}

		// struct FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, UnknownData_Y6FG, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataBinding, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataField, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderValue, 0x0020);
		}

		// struct FAIDataProviderTypedValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderTypedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, PropertyType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, UnknownData_0A9K, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderTypedValue, 0x0030);
		}

		// struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderBoolValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, UnknownData_LA7G, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderBoolValue, 0x0038);
		}

		// struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, UnknownData_H7J9, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderFloatValue, 0x0038);
		}

		// struct FAIDamageEvent
		TEST_METHOD(ScriptStruct__AIModule__AIDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, HitLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, UnknownData_TQL3, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, DamagedActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageEvent, 0x0030);
		}

		// struct FAINoiseEvent
		TEST_METHOD(ScriptStruct__AIModule__AINoiseEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_S6MM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, NoiseLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Loudness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, MaxRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Tag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_OTTQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAINoiseEvent, 0x0030);
		}

		// struct FAIPredictionEvent
		TEST_METHOD(ScriptStruct__AIModule__AIPredictionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, Requestor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, PredictedActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, UnknownData_9HLB, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPredictionEvent, 0x0018);
		}

		// struct FAITeamStimulusEvent
		TEST_METHOD(ScriptStruct__AIModule__AITeamStimulusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, UnknownData_1CF3, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Broadcaster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Enemy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITeamStimulusEvent, 0x0038);
		}

		// struct FAITouchEvent
		TEST_METHOD(ScriptStruct__AIModule__AITouchEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, UnknownData_87PD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, TouchReceiver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, OtherActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITouchEvent, 0x0020);
		}

		// struct FAISenseAffiliationFilter
		TEST_METHOD(ScriptStruct__AIModule__AISenseAffiliationFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISenseAffiliationFilter, UnknownData_IVL5, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISenseAffiliationFilter, 0x0004);
		}

		// struct FAIMoveRequest
		TEST_METHOD(ScriptStruct__AIModule__AIMoveRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, GoalActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, UnknownData_ZONP, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIMoveRequest, 0x0040);
		}

		// struct FBTDecoratorLogic
		TEST_METHOD(ScriptStruct__AIModule__BTDecoratorLogic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Operation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, UnknownData_BLDO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Number, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTDecoratorLogic, 0x0004);
		}

		// struct FBehaviorTreeTemplateInfo
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeTemplateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Template, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, UnknownData_148N, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorTreeTemplateInfo, 0x0018);
		}

		// struct FBlackboardEntry
		TEST_METHOD(ScriptStruct__AIModule__BlackboardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, KeyType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, UnknownData_EF79, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardEntry, 0x0018);
		}

		// struct FBTCompositeChild
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeChild)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildComposite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildTask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, Decorators, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, DecoratorOps, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTCompositeChild, 0x0030);
		}

		// struct FBlackboardKeySelector
		TEST_METHOD(ScriptStruct__AIModule__BlackboardKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, AllowedTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_E8SR, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_QWLJ, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardKeySelector, 0x0028);
		}

		// struct FAIDynamicParam
		TEST_METHOD(ScriptStruct__AIModule__AIDynamicParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, UnknownData_HIIE, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, BBKey, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDynamicParam, 0x0038);
		}

		// struct FEQSParametrizedQueryExecutionRequest
		TEST_METHOD(ScriptStruct__AIModule__EQSParametrizedQueryExecutionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryConfig, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, EQSQueryBlackboardKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, RunMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_ILU0, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_SK02, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEQSParametrizedQueryExecutionRequest, 0x0048);
		}

		// struct FIntervalCountdown
		TEST_METHOD(ScriptStruct__AIModule__IntervalCountdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, Interval, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, UnknownData_72T5, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntervalCountdown, 0x0008);
		}

		// struct FEnvNamedValue
		TEST_METHOD(ScriptStruct__AIModule__EnvNamedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, UnknownData_B6AM, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvNamedValue, 0x0010);
		}

		// struct FCrowdAvoidanceConfig
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, VelocityBias, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, DesiredVelocityWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CurrentVelocityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, SideBiasWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CustomPatternIdx, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDivisions, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveRings, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDepth, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceConfig, 0x001C);
		}

		// struct FCrowdAvoidanceSamplingPattern
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceSamplingPattern)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Angles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Radii, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceSamplingPattern, 0x0020);
		}

		// struct FEnvTraceData
		TEST_METHOD(ScriptStruct__AIModule__EnvTraceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, VersionNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_9JQI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, NavigationFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectDown, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentZ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, PostProjectionVerticalOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceChannel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, SerializedChannel, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceShape, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceMode, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_JWY5, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvTraceData, 0x0030);
		}

		// struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderIntValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, UnknownData_5OKE, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderIntValue, 0x0038);
		}

		// struct FEnvDirection
		TEST_METHOD(ScriptStruct__AIModule__EnvDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineFrom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, DirMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, UnknownData_K1PX, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvDirection, 0x0020);
		}

		// struct FEnvQueryInstanceCache
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryInstanceCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, Template, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, UnknownData_2WDZ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryInstanceCache, 0x0178);
		}

		// struct FEnvOverlapData
		TEST_METHOD(ScriptStruct__AIModule__EnvOverlapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ShapeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapChannel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapShape, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_TOIS, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_19KX, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvOverlapData, 0x0020);
		}

		// struct FPawnActionStack
		TEST_METHOD(ScriptStruct__AIModule__PawnActionStack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionStack, TopAction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionStack, 0x0008);
		}

		// struct FPawnActionEvent
		TEST_METHOD(ScriptStruct__AIModule__PawnActionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, UnknownData_4MFG, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionEvent, 0x0018);
		}

		// struct FAIRequestID
		TEST_METHOD(ScriptStruct__AIModule__AIRequestID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRequestID, RequestId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRequestID, 0x0004);
		}

		// struct FAIStimulus
		TEST_METHOD(ScriptStruct__AIModule__AIStimulus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ExpirationAge, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Strength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, StimulusLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ReceiverLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Tag, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_Q5FY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_N2M2, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIStimulus, 0x003C);
		}

		// struct FActorPerceptionUpdateInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionUpdateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, TargetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, Target, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, Stimulus, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionUpdateInfo, 0x0048);
		}

		// struct FAIDataProviderStructValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderStructValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderStructValue, UnknownData_3PG4, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderStructValue, 0x0030);
		}

		// struct FActorPerceptionBlueprintInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionBlueprintInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, LastSensedStimuli, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, UnknownData_KSLQ, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionBlueprintInfo, 0x0020);
		}

		// struct FAISightEvent
		TEST_METHOD(ScriptStruct__AIModule__AISightEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, UnknownData_QYYC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, SeenActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, Observer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISightEvent, 0x0018);
		}

		// struct FEnvQueryRequest
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, World, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, UnknownData_6XEN, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryRequest, 0x0068);
		}

		// struct FEnvQueryResult
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_HMK8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, ItemType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_UB65, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, OptionIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_DVCC, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryResult, 0x0040);
		}

		// struct FGenericTeamId
		TEST_METHOD(ScriptStruct__AIModule__GenericTeamId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericTeamId, TeamID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericTeamId, 0x0001);
		}

		// struct FNiagaraTypeDefinitionHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinitionHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinitionHandle, RegisteredTypeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinitionHandle, 0x0004);
		}

		// struct FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, TypeDefHandle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableBase, 0x000C);
		}

		// struct FNiagaraVariable : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, UnknownData_PSNU, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, VarData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariable, 0x0020);
		}

		// struct FNiagaraVariableWithOffset : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableWithOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableWithOffset, Offset, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableWithOffset, 0x0010);
		}

		// struct FNiagaraMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, MaterialSubIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, UnknownData_IUJ0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, EmitterRendererProperty, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMaterialOverride, 0x0018);
		}

		// struct FNiagaraTypeDefinition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, ClassStructOrEnum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnderlyingType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnknownData_QQ7J, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinition, 0x0010);
		}

		// struct FNiagaraScriptDataInterfaceCompileInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceCompileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UserPtrIdx, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_HBNJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapRead, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapWrite, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, bIsPlaceholder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_Z6M9, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceCompileInfo, 0x0038);
		}

		// struct FNiagaraEmitterHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, IdName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, BIsEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_L19J, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Name, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_6CES, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Instance, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterHandle, 0x0030);
		}

		// struct FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_J1KX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, SortedParameterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, ParameterData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, DataInterfaces, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UObjects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_608B, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterStore, 0x0078);
		}

		// struct FNiagaraUserRedirectionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserRedirectionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserRedirectionParameterStore, UserParameterRedirects, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserRedirectionParameterStore, 0x00C8);
		}

		// struct FNCPoolElement
		TEST_METHOD(ScriptStruct__Niagara__NCPoolElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, UnknownData_DZNN, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPoolElement, 0x0010);
		}

		// struct FNCPool
		TEST_METHOD(ScriptStruct__Niagara__NCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, UnknownData_GON0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPool, 0x0038);
		}

		// struct FNiagaraDeviceProfileStateEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDeviceProfileStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, QualityLevelMask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, SetQualityLevelMask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDeviceProfileStateEntry, 0x0010);
		}

		// struct FNiagaraPlatformSetCVarCondition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetCVarCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, CVarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, UnknownData_FIRY, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MinInt, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MaxInt, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MinFloat, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MaxFloat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, UnknownData_Q7WD, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetCVarCondition, 0x0028);
		}

		// struct FNiagaraPlatformSet
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, QualityLevelMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_ENA8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, DeviceProfileStates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, CVarConditions, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_9NRE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSet, 0x0030);
		}

		// struct FNiagaraVariableAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableAttributeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, ParamMapVariable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_EXZK, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, DataSetVariable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, RootVariable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, BindingSourceMode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_L32Q, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_QPYN, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableAttributeBinding, 0x0058);
		}

		// struct FNiagaraComponentPropertyBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraComponentPropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, AttributeBinding, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, PropertyName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, PropertyType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, MetadataSetterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, WritableValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, UnknownData_IBUP, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraComponentPropertyBinding, 0x00A0);
		}

		// struct FNiagaraUserParameterBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserParameterBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserParameterBinding, Parameter, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserParameterBinding, 0x0020);
		}

		// struct FNDIStaticMeshSectionFilter
		TEST_METHOD(ScriptStruct__Niagara__NDIStaticMeshSectionFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNDIStaticMeshSectionFilter, AllowedMaterialSlots, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNDIStaticMeshSectionFilter, 0x0010);
		}

		// struct FVMFunctionSpecifier
		TEST_METHOD(ScriptStruct__Niagara__VMFunctionSpecifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMFunctionSpecifier, 0x0010);
		}

		// struct FVMExternalFunctionBindingInfo
		TEST_METHOD(ScriptStruct__Niagara__VMExternalFunctionBindingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, OwnerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, InputParamLocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, NumOutputs, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, UnknownData_FBB4, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, FunctionSpecifiers, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMExternalFunctionBindingInfo, 0x0038);
		}

		// struct FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_2TZ0, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxInstances, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxSystemInstances, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxTimeWithoutRender, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_Q131, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettings, 0x0048);
		}

		// struct FNiagaraSystemScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraScriptDataUsageInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataUsageInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataUsageInfo, bReadsAttributeData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataUsageInfo, 0x0001);
		}

		// struct FNiagaraDataSetID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, UnknownData_9V4L, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetID, 0x000C);
		}

		// struct FNiagaraDataSetProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, UnknownData_87B7, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, Variables, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetProperties, 0x0020);
		}

		// struct FNiagaraStatScope
		TEST_METHOD(ScriptStruct__Niagara__NiagaraStatScope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FullName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FriendlyName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraStatScope, 0x0010);
		}

		// struct FNiagaraVMExecutableData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ByteCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, OptimizedByteCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumTempRegisters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumUserPtrs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ScriptLiterals, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, Attributes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataUsage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_0EUM, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataInterfaceInfo, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, CalledVMExternalFunctions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_5P1U, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ReadDataSets, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, WriteDataSets, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, StatScopes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DIParamInfo, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, LastCompileStatus, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_QITZ, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, SimulationStageMetaData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_38XJ, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableData, 0x00E0);
		}

		// struct FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, UnknownData_WLVS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, SpawnCountScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettings, 0x0038);
		}

		// struct FNiagaraEmitterScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraEventReceiverProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventReceiverProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEventGenerator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEmitter, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventReceiverProperties, 0x0018);
		}

		// struct FNiagaraTypeLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentByteOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentRegisterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentByteOffsets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentRegisterOffsets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, HalfComponentByteOffsets, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, HalfComponentRegisterOffsets, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeLayoutInfo, 0x0060);
		}

		// struct FNiagaraVariableLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, FloatComponentStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, Int32ComponentStart, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, HalfComponentStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, UnknownData_D5QI, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, LayoutInfo, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableLayoutInfo, 0x0070);
		}

		// struct FNiagaraDataSetCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, Variables, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, VariableLayouts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, ID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalFloatComponents, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalInt32Components, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalHalfComponents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_G8CT, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, SimTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_4DCM, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetCompiledData, 0x0040);
		}

		// struct FNiagaraDetailsLevelScaleOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDetailsLevelScaleOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Low, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Medium, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, High, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Epic, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Cine, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDetailsLevelScaleOverrides, 0x0014);
		}

		// struct FNiagaraEmitterScalabilityOverride : public FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverride, UnknownData_PYN2, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverride, 0x0040);
		}

		// struct FNiagaraEventGeneratorProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventGeneratorProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, MaxEventsPerFrame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, ID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, UnknownData_98H0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, DataSetCompiledData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventGeneratorProperties, 0x0050);
		}

		// struct FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, Script, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventReceivers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventGenerators, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScriptProperties, 0x0028);
		}

		// struct FNiagaraEventScriptProperties : public FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, ExecutionMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_EXJO, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SpawnNumber, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MaxEventsPerFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEmitterID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEventName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, bRandomSpawnNumber, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_B3LF, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MinSpawnNumber, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_YFNN, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventScriptProperties, 0x0058);
		}

		// struct FNiagaraEmitterScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraMeshMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMeshMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, ExplicitMat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, UserParamBinding, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMeshMaterialOverride, 0x0028);
		}

		// struct FNiagaraRibbonUVSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRibbonUVSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, LeadingEdgeMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_B03Q, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, TrailingEdgeMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_QGEA, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, DistributionMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_RHQ1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, TilingLength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, Scale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, bEnablePerParticleUOverride, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, bEnablePerParticleVRangeOverride, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_Y2XB, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRibbonUVSettings, 0x0024);
		}

		// struct FNiagaraScriptExecutionPaddingInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionPaddingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestOffset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestSize, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionPaddingInfo, 0x0008);
		}

		// struct FNiagaraScriptDataInterfaceInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, DataInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UserPtrIdx, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UnknownData_SJ7E, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Type, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapRead, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapWrite, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceInfo, 0x0038);
		}

		// struct FNiagaraVariableDataInterfaceBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableDataInterfaceBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableDataInterfaceBinding, BoundVariable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableDataInterfaceBinding, 0x0020);
		}

		// struct FNiagaraMaterialAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMaterialAttributeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, MaterialParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, NiagaraVariable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, ResolvedNiagaraVariable, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, NiagaraChildVariable, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMaterialAttributeBinding, 0x002C);
		}

		// struct FNiagaraSystemScalabilityOverride : public FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverride, UnknownData_TCMP, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverride, 0x0050);
		}

		// struct FNiagaraParameterDataSetBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, ParameterOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, DataSetComponentOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBinding, 0x0008);
		}

		// struct FNiagaraParameterDataSetBindingCollection
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBindingCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, FloatOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, Int32Offsets, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBindingCollection, 0x0020);
		}

		// struct FNiagaraSystemCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, InstanceParamStore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, DataSetCompiledData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceParamsDataSetCompiledData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceParamsDataSetCompiledData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceGlobalBinding, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceSystemBinding, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceOwnerBinding, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceEmitterBindings, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceGlobalBinding, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceSystemBinding, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceOwnerBinding, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceEmitterBindings, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompiledData, 0x0218);
		}

		// struct FMovieSceneNiagaraParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraParameterSectionTemplate, Parameter, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraParameterSectionTemplate, 0x0040);
		}

		// struct FMovieSceneNiagaraBoolParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraBoolParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, BoolChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, 0x00D0);
		}

		// struct FMovieSceneNiagaraColorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraColorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, RedChannel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, GreenChannel, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, BlueChannel, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, AlphaChannel, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraColorParameterSectionTemplate, 0x02C0);
		}

		// struct FMovieSceneNiagaraFloatParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraFloatParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, FloatChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, 0x00E0);
		}

		// struct FMovieSceneNiagaraIntegerParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraIntegerParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, IntegerChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, 0x00D0);
		}

		// struct FMovieSceneNiagaraSystemTrackImplementation : public FMovieSceneTrackImplementation
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackImplementation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartBehavior, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_Q8ZU, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEvaluateBehavior, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_XRFO, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndBehavior, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_CNFM, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, AgeUpdateMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_NQ3L, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackImplementation, 0x0028);
		}

		// struct FMovieSceneNiagaraSystemTrackTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackTemplate, 0x0020);
		}

		// struct FMovieSceneNiagaraVectorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraVectorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, VectorChannels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, ChannelsUsed, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, UnknownData_PPGJ, 0x02C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, 0x02C8);
		}

		// struct FNiagaraRandInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRandInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRandInfo, 0x000C);
		}

		// struct FNiagaraScriptVariableBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptVariableBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptVariableBinding, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptVariableBinding, 0x0008);
		}

		// struct FNiagaraVariableInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Variable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Definition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, DataInterface, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableInfo, 0x0040);
		}

		// struct FNiagaraSystemUpdateContext
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemUpdateContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReInit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToNotifySimDestroy, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, SystemSimsToDestroy, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, UnknownData_K58E, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemUpdateContext, 0x0048);
		}

		// struct FNiagaraFunctionSignature
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFunctionSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Inputs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Outputs, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, OwnerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, UnknownData_E20G, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ModuleUsageBitmask, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ContextStageMinIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ContextStageMaxIndex, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, FunctionSpecifiers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFunctionSignature, 0x0090);
		}

		// struct FNiagaraEmitterNameSettingsRef
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterNameSettingsRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterNameSettingsRef, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterNameSettingsRef, EmitterName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterNameSettingsRef, 0x0018);
		}

		// struct FBasicParticleData
		TEST_METHOD(ScriptStruct__Niagara__BasicParticleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Velocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasicParticleData, 0x001C);
		}

		// struct FMeshTriCoordinate
		TEST_METHOD(ScriptStruct__Niagara__MeshTriCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, Tri, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, BaryCoord, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshTriCoordinate, 0x0010);
		}

		// struct FNiagaraGraphViewSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraGraphViewSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Zoom, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, bIsValid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, UnknownData_PZRE, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraGraphViewSettings, 0x0010);
		}

		// struct FNiagaraCollisionEventPayload
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCollisionEventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, ParticleIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, PhysicalMaterialIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCollisionEventPayload, 0x002C);
		}

		// struct FNiagaraParameters
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameters, Parameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameters, 0x0010);
		}

		// struct FNiagaraPlatformSetConflictEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, QualityLevelMask, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictEntry, 0x000C);
		}

		// struct FNiagaraPlatformSetConflictInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetAIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetBIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, Conflicts, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictInfo, 0x0018);
		}

		// struct FNiagaraScalabilityManager
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScalabilityManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, EffectType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, ManagedComponents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, UnknownData_LSNX, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScalabilityManager, 0x0040);
		}

		// struct FNiagaraModuleDependency
		TEST_METHOD(ScriptStruct__Niagara__NiagaraModuleDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ScriptConstraint, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, UnknownData_N86R, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Description, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraModuleDependency, 0x0028);
		}

		// struct FNiagaraScriptInstanceParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptInstanceParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptInstanceParameterStore, UnknownData_RIWP, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptInstanceParameterStore, 0x0088);
		}

		// struct FNiagaraScriptHighlight
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptHighlight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, Color, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, DisplayName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptHighlight, 0x0028);
		}

		// struct FNiagaraSystemCompileRequest
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_VAZ3, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, RootObjects, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_4GO1, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompileRequest, 0x0080);
		}

		// struct FEmitterCompiledScriptPair
		TEST_METHOD(ScriptStruct__Niagara__EmitterCompiledScriptPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterCompiledScriptPair, UnknownData_TGUO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterCompiledScriptPair, 0x0078);
		}

		// struct FNiagaraEmitterCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, SpawnAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnIntervalVar, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInterpSpawnStartDTVar, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnGroupVar, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterAgeVar, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterRandomSeedVar, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInstanceSeedVar, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterTotalSpawnedParticlesVar, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, DataSetCompiledData, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterCompiledData, 0x0130);
		}

		// struct FNiagaraInputConditionMetadata
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInputConditionMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, TargetValues, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInputConditionMetadata, 0x0018);
		}

		// struct FNiagaraVariableMetaData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CategoryName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAdvancedDisplay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_ACDD, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditorSortPriority, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bInlineEditConditionToggle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_7G5L, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditCondition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, VisibleCondition, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, PropertyMetaData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ParentAttribute, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ScopeName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Usage, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_45AS, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bIsStaticSwitch, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_UO95, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, StaticSwitchDefaultValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAddedToNodeGraphDeepCopy, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bOutputIsPersistent, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_CLHH, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CachedNamespacelessVariableName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bCreatedInSystemEditor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bUseLegacyNameString, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_Z0IX, 0x00EA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableMetaData, 0x00F0);
		}

		// struct FNiagaraParameterScopeInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterScopeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, Scope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_04NB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_A8WR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, NamespaceString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterScopeInfo, 0x0018);
		}

		// struct FNiagaraCompileHashVisitorDebugInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCompileHashVisitorDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyValues, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHashVisitorDebugInfo, 0x0030);
		}

		// struct FNiagaraID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, AcquireTag, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraID, 0x0008);
		}

		// struct FNiagaraSpawnInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, InterpStartDt, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, IntervalDt, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, SpawnGroup, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSpawnInfo, 0x0010);
		}

		// struct FNiagaraMatrix
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMatrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMatrix, 0x0040);
		}

		// struct FNiagaraParameterMap
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterMap, UnknownData_NTRC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterMap, 0x0001);
		}

		// struct FNiagaraNumeric
		TEST_METHOD(ScriptStruct__Niagara__NiagaraNumeric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraNumeric, UnknownData_FGWK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraNumeric, 0x0001);
		}

		// struct FNiagaraHalfVector4
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, Y, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, Z, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, W, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector4, 0x0008);
		}

		// struct FNiagaraHalfVector3
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector3)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, Y, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, Z, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector3, 0x0006);
		}

		// struct FNiagaraHalfVector2
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector2, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector2, Y, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector2, 0x0004);
		}

		// struct FNiagaraHalf
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalf, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalf, 0x0002);
		}

		// struct FNiagaraBool
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBool, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBool, 0x0004);
		}

		// struct FNiagaraInt32
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInt32, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInt32, 0x0004);
		}

		// struct FNiagaraFloat
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFloat, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFloat, 0x0004);
		}

		// struct FNiagaraVariant
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, DataInterface, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Bytes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, CurrentMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_4WFT, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_QH09, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariant, 0x0028);
		}

		// struct FNiagaraWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Niagara__NiagaraWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraWorldManagerTickFunction, UnknownData_1L06, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraWorldManagerTickFunction, 0x0030);
		}

		// struct FNiagaraBoundParameter
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBoundParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, Parameter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, SrcOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, DestOffset, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBoundParameter, 0x0028);
		}

		// struct FNiagaraScriptExecutionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, ParameterSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddedParameterSize, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddingInfo, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, UnknownData_CF7Y, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionParameterStore, 0x0098);
		}

		// struct FNiagaraVMExecutableDataId
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableDataId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, CompilerVersionID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_C5KF, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageTypeID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_FKL1, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptCompileHash, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableDataId, 0x0048);
		}

		// struct FNiagaraSystemScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverrides, 0x0010);
		}

		// struct FClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothVertBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x004C);
		}

		// struct FClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// struct FClothCollisionPrim_Box
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, UnknownData_B6K9, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, HalfExtents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, BoneIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Box, 0x0030);
		}

		// struct FClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, SurfacePoints, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_XRFP, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0028);
		}

		// struct FClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// struct FClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Boxes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0040);
		}

		// struct FMotoSynthRuntimeSettings
		TEST_METHOD(ScriptStruct__MotoSynth__MotoSynthRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bSynthToneEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_831M, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthToneVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthToneFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthOctaveShift, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bGranularEngineEnabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_EVNC, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GranularEngineVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GranularEnginePitchScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, NumSamplesToCrossfadeBetweenGrains, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, NumGrainTableEntriesPerGrain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GrainTableRandomOffsetForConstantRPMs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GrainCrossfadeSamplesForConstantRPMs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_ZMJ3, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, AccelerationSource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, DecelerationSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bStereoWidenerEnabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_NQK7, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoDelayMsec, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoFeedback, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerWetlevel, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerDryLevel, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerDelayRatio, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bStereoWidenerFilterEnabled, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_J9DQ, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerFilterFrequency, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerFilterQ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_Z9IT, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotoSynthRuntimeSettings, 0x0068);
		}

		// struct FGrainTableEntry
		TEST_METHOD(ScriptStruct__MotoSynth__GrainTableEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrainTableEntry, SampleIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrainTableEntry, RPM, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrainTableEntry, 0x0008);
		}

		// struct FARSessionPayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, ConfigFlags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, UnknownData_WD92, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, DefaultMeshMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, DefaultWireframeMeshMaterial, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionPayload, 0x0018);
		}

		// struct FARPlaneUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPlaneUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, UnknownData_LLYX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, Center, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, Extents, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, BoundaryVertices, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, ObjectClassification, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, UnknownData_JMGX, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPlaneUpdatePayload, 0x0080);
		}

		// struct FARPointUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPointUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPointUpdatePayload, UnknownData_D704, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPointUpdatePayload, 0x0001);
		}

		// struct FARFaceUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARFaceUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, LeftEyePosition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, RightEyePosition, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, LookAtTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, UnknownData_3H7M, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFaceUpdatePayload, 0x0040);
		}

		// struct FARImageUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARImageUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, UnknownData_QT0D, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, DetectedImage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, EstimatedSize, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARImageUpdatePayload, 0x0060);
		}

		// struct FARQRCodeUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARQRCodeUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, UnknownData_DVI4, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, Extents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, UnknownData_Z7BL, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, QRCode, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARQRCodeUpdatePayload, 0x0070);
		}

		// struct FARPoseUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPoseUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPoseUpdatePayload, WorldTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPoseUpdatePayload, JointTransforms, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPoseUpdatePayload, 0x0040);
		}

		// struct FAREnvironmentProbeUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__AREnvironmentProbeUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAREnvironmentProbeUpdatePayload, WorldTransform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAREnvironmentProbeUpdatePayload, 0x0030);
		}

		// struct FARObjectUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARObjectUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARObjectUpdatePayload, WorldTransform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARObjectUpdatePayload, 0x0030);
		}

		// struct FARMeshUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARMeshUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, UnknownData_N654, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, ObjectClassification, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, UnknownData_DH4O, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARMeshUpdatePayload, 0x0060);
		}

		// struct FARGeoAnchorUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARGeoAnchorUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, UnknownData_62DO, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, Longitude, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, Latitude, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AltitudeMeters, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AltitudeSource, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, UnknownData_ZBBD, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AnchorName, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARGeoAnchorUpdatePayload, 0x0070);
		}

		// struct FARVideoFormat
		TEST_METHOD(ScriptStruct__AugmentedReality__ARVideoFormat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, FPS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Width, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Height, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARVideoFormat, 0x000C);
		}

		// struct FARSkeletonDefinition
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSkeletonDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, NumJoints, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, UnknownData_X48Q, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, JointNames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, ParentIndices, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSkeletonDefinition, 0x0028);
		}

		// struct FARPose3D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, IsJointTracked, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransformSpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, UnknownData_K2HE, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose3D, 0x0050);
		}

		// struct FTrackedGeometryGroup
		TEST_METHOD(ScriptStruct__AugmentedReality__TrackedGeometryGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, ARActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, ARComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, TrackedGeometry, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackedGeometryGroup, 0x0018);
		}

		// struct FARSharedWorldReplicationState
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSharedWorldReplicationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, PreviewImageOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, ARWorldOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSharedWorldReplicationState, 0x0008);
		}

		// struct FARTraceResult
		TEST_METHOD(ScriptStruct__AugmentedReality__ARTraceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, DistanceFromCamera, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TraceChannel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_GCQR, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, LocalTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TrackedGeometry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_YYOJ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARTraceResult, 0x0060);
		}

		// struct FARCameraIntrinsics
		TEST_METHOD(ScriptStruct__AugmentedReality__ARCameraIntrinsics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, ImageResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, FocalLength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, PrincipalPoint, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARCameraIntrinsics, 0x0018);
		}

		// struct FARPose2D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, JointLocations, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, IsJointTracked, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose2D, 0x0048);
		}

		// struct FARSessionStatus
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, AdditionalInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, Status, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, UnknownData_YNQ2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionStatus, 0x0018);
		}

		// struct FCCDIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__CCDIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCCDIKChainLink, UnknownData_MU45, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCCDIKChainLink, 0x0080);
		}

		// struct FAxis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_6SFE, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// struct FConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_SZUK, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// struct FConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_6LZH, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// struct FFilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// struct FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_HH61, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_KJW5, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// struct FAimConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_MBMV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUpTarget, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0040);
		}

		// struct FTransformConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_DQ1M, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// struct FConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// struct FTransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_4KEW, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_VY7M, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0028);
		}

		// struct FConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_LVBJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_Q6N5, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// struct FTransformFilter
		TEST_METHOD(ScriptStruct__AnimationCore__TransformFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, TranslationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, RotationFilter, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, ScaleFilter, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformFilter, 0x0009);
		}

		// struct FEulerTransform
		TEST_METHOD(ScriptStruct__AnimationCore__EulerTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Scale, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEulerTransform, 0x0024);
		}

		// struct FFABRIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__FABRIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFABRIKChainLink, UnknownData_C423, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFABRIKChainLink, 0x0038);
		}

		// struct FNodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// struct FNodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0010);
		}

		// struct FNodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// struct FNodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_SSD0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// struct FTransformNoScale
		TEST_METHOD(ScriptStruct__AnimationCore__TransformNoScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, UnknownData_X65S, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Rotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformNoScale, 0x0020);
		}

		// struct FBrushEffectBlurring
		TEST_METHOD(ScriptStruct__Landmass__BrushEffectBlurring)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectBlurring, bBlurShape, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectBlurring, UnknownData_OZRB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectBlurring, Radius, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushEffectBlurring, 0x0008);
		}

		// struct FBrushEffectCurlNoise
		TEST_METHOD(ScriptStruct__Landmass__BrushEffectCurlNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurlNoise, Curl1Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurlNoise, Curl2Amount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurlNoise, Curl1Tiling, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurlNoise, Curl2Tiling, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushEffectCurlNoise, 0x0010);
		}

		// struct FBrushEffectSmoothBlending
		TEST_METHOD(ScriptStruct__Landmass__BrushEffectSmoothBlending)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectSmoothBlending, InnerSmoothDistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectSmoothBlending, OuterSmoothDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushEffectSmoothBlending, 0x0008);
		}

		// struct FBrushEffectTerracing
		TEST_METHOD(ScriptStruct__Landmass__BrushEffectTerracing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectTerracing, TerraceAlpha, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectTerracing, TerraceSpacing, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectTerracing, TerraceSmoothness, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectTerracing, MaskLength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectTerracing, MaskStartOffset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushEffectTerracing, 0x0014);
		}

		// struct FBrushEffectDisplacement
		TEST_METHOD(ScriptStruct__Landmass__BrushEffectDisplacement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectDisplacement, DisplacementHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectDisplacement, DisplacementTiling, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectDisplacement, Texture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectDisplacement, Midpoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectDisplacement, Channel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectDisplacement, WeightmapInfluence, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushEffectDisplacement, 0x0028);
		}

		// struct FLandmassBrushEffectsList
		TEST_METHOD(ScriptStruct__Landmass__LandmassBrushEffectsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassBrushEffectsList, Blurring, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassBrushEffectsList, CurlNoise, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassBrushEffectsList, Displacement, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassBrushEffectsList, SmoothBlending, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassBrushEffectsList, Terracing, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassBrushEffectsList, UnknownData_U4A4, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandmassBrushEffectsList, 0x0060);
		}

		// struct FBrushEffectCurves
		TEST_METHOD(ScriptStruct__Landmass__BrushEffectCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurves, bUseCurveChannel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurves, UnknownData_1I5D, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurves, ElevationCurveAsset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurves, ChannelEdgeOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurves, ChannelDepth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurves, CurveRampWidth, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushEffectCurves, UnknownData_GK36, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushEffectCurves, 0x0020);
		}

		// struct FLandmassFalloffSettings
		TEST_METHOD(ScriptStruct__Landmass__LandmassFalloffSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassFalloffSettings, FalloffMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassFalloffSettings, UnknownData_SV51, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassFalloffSettings, FalloffAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassFalloffSettings, FalloffWidth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassFalloffSettings, EdgeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassFalloffSettings, ZOffset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandmassFalloffSettings, 0x0014);
		}

		// struct FLandmassTerrainCarvingSettings
		TEST_METHOD(ScriptStruct__Landmass__LandmassTerrainCarvingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassTerrainCarvingSettings, BlendMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassTerrainCarvingSettings, bInvertShape, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassTerrainCarvingSettings, UnknownData_WDLI, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassTerrainCarvingSettings, FalloffSettings, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassTerrainCarvingSettings, Effects, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassTerrainCarvingSettings, Priority, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmassTerrainCarvingSettings, UnknownData_UCMJ, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandmassTerrainCarvingSettings, 0x0080);
		}

		// struct FUWorksSteamID
		TEST_METHOD(ScriptStruct__UWorks__UWorksSteamID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamID, UnknownData_AEGQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksSteamID, 0x0008);
		}

		// struct FUWorksGameID
		TEST_METHOD(ScriptStruct__UWorks__UWorksGameID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksGameID, UnknownData_OJPP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksGameID, 0x0008);
		}

		// struct FUWorksPublishedFileID
		TEST_METHOD(ScriptStruct__UWorks__UWorksPublishedFileID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksPublishedFileID, UnknownData_448S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksPublishedFileID, 0x0008);
		}

		// struct FUWorksSteamItemDef
		TEST_METHOD(ScriptStruct__UWorks__UWorksSteamItemDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamItemDef, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksSteamItemDef, 0x0004);
		}

		// struct FUWorksSteamItemInstanceID
		TEST_METHOD(ScriptStruct__UWorks__UWorksSteamItemInstanceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUWorksSteamItemInstanceID, UnknownData_VMLL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUWorksSteamItemInstanceID, 0x0008);
		}

		// struct FGeometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_IH1Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// struct FMargin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// struct FSlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_PZOS, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// struct FSlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_2OJV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_XP9R, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_J11U, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0088);
		}

		// struct FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_4F03, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0018);
		}

		// struct FPointerEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_2JUF, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0070);
		}

		// struct FCharacterEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_AN1V, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0020);
		}

		// struct FKeyEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_NWYM, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0038);
		}

		// struct FNavigationEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_8RK9, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0020);
		}

		// struct FAnalogInputEvent : public FKeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_NFDJ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0040);
		}

		// struct FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_VV64, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// struct FTableColumnHeaderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x04D0);
		}

		// struct FSplitterStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x0118);
		}

		// struct FHeaderRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0B70);
		}

		// struct FInlineTextImageStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_WRQ6, 0x0092);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0098);
		}

		// struct FSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredBarImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredThumbImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_TNNU, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x0340);
		}

		// struct FVolumeControlStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x05F0);
		}

		// struct FFontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bSeparateFillAlpha, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bApplyOutlineToDropShadows, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_KEH1, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0020);
		}

		// struct FSlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_AGNR, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, LetterSpacing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_3J31, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0058);
		}

		// struct FScrollBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x04D0);
		}

		// struct FEditableTextBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x07F8);
		}

		// struct FSearchBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_6E1W, 0x0A89);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0A90);
		}

		// struct FExpandableAreaStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_3GAO, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0120);
		}

		// struct FProgressBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x01A0);
		}

		// struct FTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, StrikeBrush, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x0270);
		}

		// struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x0A70);
		}

		// struct FSlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_ZUUM, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// struct FButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0278);
		}

		// struct FHyperlinkStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x0500);
		}

		// struct FCheckBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_8YS1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x0580);
		}

		// struct FTableRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHighlightedBrush, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHighlightedBrush, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x07C8);
		}

		// struct FComboButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowOffset, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowColorAndOpacity, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x03B8);
		}

		// struct FComboBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x03F0);
		}

		// struct FEditableTextStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0220);
		}

		// struct FSpinBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x02E8);
		}

		// struct FFontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_9GYT, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, SubFaceIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// struct FTypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0028);
		}

		// struct FTypeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// struct FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFallbackFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, ScalingFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, UnknownData_ODAJ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFallbackFont, 0x0018);
		}

		// struct FCompositeSubFont : public FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Cultures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0038);
		}

		// struct FCompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, FallbackTypeface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0038);
		}

		// struct FMotionEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_M4BE, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0048);
		}

		// struct FCaptureLostEvent
		TEST_METHOD(ScriptStruct__SlateCore__CaptureLostEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureLostEvent, UnknownData_N77Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureLostEvent, 0x0008);
		}

		// struct FFocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_NDWK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// struct FWindowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0FD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x1060);
		}

		// struct FScrollBorderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x0118);
		}

		// struct FScrollBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x0228);
		}

		// struct FDockTabStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_83K6, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0700);
		}

		// struct FTimedDataInputEvaluationData
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataInputEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToNewestSampleSeconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToOldestSampleSeconds, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataInputEvaluationData, 0x0008);
		}

		// struct FTimedDataChannelSampleTime
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataChannelSampleTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataChannelSampleTime, UnknownData_W9Z2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataChannelSampleTime, 0x0018);
		}

		// struct FChaosCollisionEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxNumberResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, UnknownData_BFTH, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventRequestSettings, 0x0018);
		}

		// struct FChaosBreakingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinMass, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, UnknownData_JZCK, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventRequestSettings, 0x0018);
		}

		// struct FChaosTrailingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinAngularSpeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, UnknownData_T0M2, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventRequestSettings, 0x0018);
		}

		// struct FGeomComponentCacheParameters
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeomComponentCacheParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CacheMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_S5OH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TargetCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, ReverseCacheBeginTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveCollisionData, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateCollisionData, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_IQVN, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSizeMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoCollisionDataSpatialHash, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_YGK4, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSpatialHashRadius, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxCollisionPerCell, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveBreakingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateBreakingData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_3CLZ, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSizeMax, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoBreakingDataSpatialHash, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_95DC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSpatialHashRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxBreakingPerCell, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveTrailingData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateTrailingData, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_150Y, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingDataSizeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinSpeedThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinVolumeThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_T4AC, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomComponentCacheParameters, 0x0050);
		}

		// struct FGeometryCollectionRepData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionRepData, UnknownData_5E8W, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionRepData, 0x0018);
		}

		// struct FGeometryCollectionDebugDrawWarningMessage
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawWarningMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawWarningMessage, UnknownData_TGWM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawWarningMessage, 0x0001);
		}

		// struct FGeometryCollectionDebugDrawActorSelectedRigidBody
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawActorSelectedRigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, UnknownData_0A20, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, Solver, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, GeometryCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, 0x0018);
		}

		// struct FGeometryCollectionSource
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, SourceGeometryObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, UnknownData_YAM0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, LocalTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, SourceMaterial, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSource, 0x0060);
		}

		// struct FGeometryCollectionSizeSpecificData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSizeSpecificData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, ImplicitType, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, UnknownData_32I9, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinLevelSetResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxLevelSetResolution, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinClusterLevelSetResolution, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxClusterLevelSetResolution, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionObjectReductionPercentage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionParticlesFraction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaximumCollisionParticles, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSizeSpecificData, 0x0024);
		}

		// struct FChaosCollisionEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Impulse, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, UnknownData_NHRH, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventData, 0x0058);
		}

		// struct FChaosBreakingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Mass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventData, 0x001C);
		}

		// struct FChaosTrailingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, ParticleIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventData, 0x002C);
		}

		// struct FNetDebugStatPackets
		TEST_METHOD(ScriptStruct__NetDebugStats__NetDebugStatPackets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDebugStatPackets, InPackets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDebugStatPackets, OutPackets, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDebugStatPackets, 0x0008);
		}

		// struct FNetDebugStatBytes
		TEST_METHOD(ScriptStruct__NetDebugStats__NetDebugStatBytes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDebugStatBytes, InBytes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDebugStatBytes, OutBytes, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDebugStatBytes, 0x0008);
		}

		// struct FAnimationSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, NumRandomizedInstances, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, Enabled, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, UnknownData_EZYN, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSetup, 0x0018);
		}

		// struct FAnimationStateEntry
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, State, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_QTP5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, AnimationSetups, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bOnDemand, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bAdditive, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_WO9R, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, BlendTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bReturnToPreviousState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bSetNextState, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, NextState, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_HQI2, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, MaximumNumberOfConcurrentInstances, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, WiggleTimePercentage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bRequiresCurves, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_9GK5, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateEntry, 0x0030);
		}

		// struct FPerSkeletonAnimationSharingSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__PerSkeletonAnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, Skeleton, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, SkeletalMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, BlendAnimBlueprint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AdditiveAnimBlueprint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, StateProcessorClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AnimationStates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerSkeletonAnimationSharingSetup, 0x0038);
		}

		// struct FAnimationSharingScalability
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSharingScalability)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UseBlendTransitions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UnknownData_OIE9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, BlendSignificanceValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, MaximumNumberConcurrentBlends, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, TickSignificanceValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSharingScalability, 0x0010);
		}

		// struct FTickAnimationSharingFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__AnimationSharing__TickAnimationSharingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickAnimationSharingFunction, UnknownData_FW83, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickAnimationSharingFunction, 0x0030);
		}

		// struct FMyPluginStruct
		TEST_METHOD(ScriptStruct__UObjectPlugin__MyPluginStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMyPluginStruct, TestString, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMyPluginStruct, 0x0010);
		}

		// struct FActorSequenceObjectReference
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_P35N, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, ActorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_ZU4Z, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, PathToComponent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReference, 0x0028);
		}

		// struct FActorSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferences, 0x0010);
		}

		// struct FActorSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferenceMap, 0x0020);
		}

		// struct FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__ElementID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementID, IDValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementID, 0x0004);
		}

		// struct FPolygonGroupID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonGroupID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupID, 0x0004);
		}

		// struct FPolygonID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonID, 0x0004);
		}

		// struct FVertexID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexID, 0x0004);
		}

		// struct FVertexInstanceID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexInstanceID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceID, 0x0004);
		}

		// struct FEdgeID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__EdgeID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeID, 0x0004);
		}

		// struct FTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__TriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleID, 0x0004);
		}

		// struct FXRMotionControllerData
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRMotionControllerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, bValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_WR49, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, DeviceName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, ApplicationInstanceID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, DeviceVisualType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandIndex, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, TrackingStatus, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_A1RR, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, GripPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_6GI1, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, GripRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, AimPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_B7M4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, AimRotation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyPositions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyRotations, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyRadii, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, bIsGrasped, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_7RV0, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRMotionControllerData, 0x00A0);
		}

		// struct FXRHMDData
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRHMDData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, bValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_0Y76, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, DeviceName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, ApplicationInstanceID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, TrackingStatus, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_7A2F, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, Position, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_I8QN, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, Rotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRHMDData, 0x0040);
		}

		// struct FXRDeviceId
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRDeviceId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, DeviceID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRDeviceId, 0x000C);
		}

		// struct FXRGestureConfig
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRGestureConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bTap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bHold, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, AxisGesture, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisX, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisZ, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRGestureConfig, 0x0006);
		}

		// struct FEngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// struct FEngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, Username, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// struct FEngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Username, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// struct FEngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, Username, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// struct FEngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, Username, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// struct FEngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_114N, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_84DR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// struct FEngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_GM4M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// struct FUVMapSettings
		TEST_METHOD(ScriptStruct__StaticMeshDescription__UVMapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, UVTile, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Position, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Scale, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUVMapSettings, 0x0038);
		}

		// struct FLevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_3TFN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// struct FLevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_8BM4, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// struct FLevelSequenceCameraSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceCameraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, bOverrideAspectRatioAxisConstraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, AspectRatioAxisConstraint, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceCameraSettings, 0x0002);
		}

		// struct FLevelSequenceAnimSequenceLinkItem
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceAnimSequenceLinkItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, SkelTrackGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, PathToAnimSequence, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bExportTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bExportCurves, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bRecordInWorldSpace, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, UnknownData_GQ0P, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceAnimSequenceLinkItem, 0x0030);
		}

		// struct FLevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_898R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x000C);
		}

		// struct FLevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotSourceTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTimecode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_DROF, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ActiveShot, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_DSZT, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x00B8);
		}

		// struct FBoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_047D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// struct FLevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_XXK9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// struct FLevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0038);
		}

		// struct FLevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// struct FLevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, AnimSequenceInstances, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x00A0);
		}

		// struct FLevelStreamInstanceInfo
		TEST_METHOD(ScriptStruct__VictoryBPLibrary__LevelStreamInstanceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamInstanceInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamInstanceInfo, PackageNameToLoad, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamInstanceInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamInstanceInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamInstanceInfo, UnknownData_H2TV, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamInstanceInfo, LODIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamInstanceInfo, 0x0030);
		}

		// struct FVictoryInputAxis
		TEST_METHOD(ScriptStruct__VictoryBPLibrary__VictoryInputAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVictoryInputAxis, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVictoryInputAxis, KeyAsString, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVictoryInputAxis, Key, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVictoryInputAxis, Scale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVictoryInputAxis, UnknownData_E3K3, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVictoryInputAxis, 0x0040);
		}

		// struct FVictoryInput
		TEST_METHOD(ScriptStruct__VictoryBPLibrary__VictoryInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVictoryInput, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVictoryInput, Key, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVictoryInput, KeyAsString, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVictoryInput, UnknownData_HWDD, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVictoryInput, 0x0040);
		}

		// struct FVictorySubtitleCue
		TEST_METHOD(ScriptStruct__VictoryBPLibrary__VictorySubtitleCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVictorySubtitleCue, SubtitleText, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVictorySubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVictorySubtitleCue, UnknownData_NAWZ, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVictorySubtitleCue, 0x0020);
		}

		// struct FNiagaraCompileHash
		TEST_METHOD(ScriptStruct__NiagaraCore__NiagaraCompileHash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHash, DataHash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHash, 0x0010);
		}

		// struct FStructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_YNJN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_W146, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_SR6R, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// struct FStructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0003);
		}

		// struct FStructSerializerSetTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerSetTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StrSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, IntSet, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, NameSet, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StructSet, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerSetTestStruct, 0x0140);
		}

		// struct FStructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SubClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Object, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, WeakObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ClassPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPath, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x00A0);
		}

		// struct FStructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, String, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Text, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_MQW9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector4, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_2LSP, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Quat, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Color, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_RPEM, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x0090);
		}

		// struct FStructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, ByteArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_68KN, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StructArray, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0060);
		}

		// struct FStructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStruct, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x0140);
		}

		// struct FStructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_QH52, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_7MK8, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Maps, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Sets, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x0450);
		}

		// struct FStructSerializerByteArray
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerByteArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_41S1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, ByteArray, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_RH5K, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Int8Array, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_KYSE, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerByteArray, 0x0038);
		}

		// struct FPIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// struct FPlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, Platform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, bAllowCrossplay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_0YSE, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0050);
		}

		// struct FPartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_632Q, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, RemovedPartyMembers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0050);
		}

		// struct FSpectatorReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__SpectatorReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, SpectatorId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, Spectator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpectatorReservation, 0x0078);
		}

		// struct FBlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_HKZ4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x0108);
		}

		// struct FInAppPurchaseReceiptInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo2, 0x0030);
		}

		// struct FOnlineProxyStoreOffer
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__OnlineProxyStoreOffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, OfferId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, LongDescription, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPriceText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPrice, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_UMXH, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, PriceText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, NumericPrice, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_Z2GG, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, CurrencyCode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ReleaseDate, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ExpirationDate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DiscountType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_5G2Q, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DynamicFields, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOnlineProxyStoreOffer, 0x0110);
		}

		// struct FInAppPurchaseRestoreInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseRestoreInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo2, 0x0030);
		}

		// struct FInAppPurchaseReceiptInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo, 0x0030);
		}

		// struct FInAppPurchaseProductInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, UnknownData_D4KW, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, ReceiptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DynamicFields, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo2, 0x00F8);
		}

		// struct FInAppPurchaseProductRequest2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductRequest2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, UnknownData_I9XG, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest2, 0x0018);
		}

		// struct FKey
		TEST_METHOD(ScriptStruct__InputCore__Key)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_LTV5, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// struct FLandscapeProxyMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProxyMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, UnknownData_YXZ5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProxyMaterialOverride, 0x0010);
		}

		// struct FLandscapeComponentMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeComponentMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, UnknownData_SWC3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeComponentMaterialOverride, 0x0010);
		}

		// struct FWeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_8K2D, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// struct FGrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, OverrideMaterials, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_8X6W, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLOD, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_XDAL, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, LightingChannels, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bCastDynamicShadow, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bKeepInstanceBufferCPUCopy, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_H686, 0x0053);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0058);
		}

		// struct FLandscapeMaterialTextureStreamingInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeMaterialTextureStreamingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TextureName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeMaterialTextureStreamingInfo, 0x000C);
		}

		// struct FLandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_IFYX, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// struct FLandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerLeft, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerRight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffLeft, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffRight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0070);
		}

		// struct FLandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_PMKR, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// struct FGrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Input, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_H371, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0028);
		}

		// struct FLayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_96IQ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_AVBS, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_UK6I, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0048);
		}

		// struct FPhysicalMaterialInput
		TEST_METHOD(ScriptStruct__Landscape__PhysicalMaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, UnknownData_MVCE, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalMaterialInput, 0x0020);
		}

		// struct FLandscapeLayerBrush
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerBrush, UnknownData_C89S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerBrush, 0x0001);
		}

		// struct FLandscapeLayer
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bVisible, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bLocked, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_QIMP, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, HeightmapAlpha, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapAlpha, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, BlendMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_Q05Y, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Brushes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapLayerAllocationBlend, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayer, 0x0088);
		}

		// struct FHeightmapData
		TEST_METHOD(ScriptStruct__Landscape__HeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeightmapData, Texture, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeightmapData, 0x0008);
		}

		// struct FWeightmapData
		TEST_METHOD(ScriptStruct__Landscape__WeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, Textures, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, LayerAllocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, TextureUsages, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapData, 0x0030);
		}

		// struct FLandscapeLayerComponentData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, HeightmapData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, WeightmapData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerComponentData, 0x0038);
		}

		// struct FLandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, LayerContributionTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DirtyTexture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0038);
		}

		// struct FGizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_EYP9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// struct FLandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0010);
		}

		// struct FLandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_SWZ2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// struct FLandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// struct FLandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_6U0S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// struct FForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_4GT5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// struct FForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_ZOVP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// struct FForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_TQG2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// struct FLandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_NTN3, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_H9WI, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_YC79, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// struct FEyeTrackerStereoGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerStereoGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeOrigin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeDirection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, FixationPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, ConfidenceValue, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerStereoGazeData, 0x0040);
		}

		// struct FEyeTrackerGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, FixationPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, ConfidenceValue, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerGazeData, 0x0028);
		}

		// struct FJsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JsonString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_5SRU, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// struct FST_RegionPing
		TEST_METHOD(UserDefinedStruct__ST_RegionPing__ST_RegionPing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_RegionPing, Region_16_64CCDF4949B4F0CFEE5545AD78C9252D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_RegionPing, UnknownData_GYGW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_RegionPing, PingUrl_13_C6E17C0845B839B33CC93086A0FA43FA, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_RegionPing, Stopwatch_9_D06431374A9CC7D48EEBA4A44B376E32, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_RegionPing, Ping_7_B068B96D41F1B0EEF2B1A59E23F88095, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FST_RegionPing, 0x0020);
		}

		// struct FWheelSetup
		TEST_METHOD(ScriptStruct__PhysXVehicles__WheelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, WheelClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, AdditionalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, bDisableSteering, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, UnknownData_BDKR, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelSetup, 0x0020);
		}

		// struct FReplicatedVehicleState
		TEST_METHOD(ScriptStruct__PhysXVehicles__ReplicatedVehicleState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, SteeringInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, ThrottleInput, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, BrakeInput, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, HandbrakeInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, CurrentGear, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedVehicleState, 0x0014);
		}

		// struct FVehicleInputRate
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleInputRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, RiseRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, FallRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleInputRate, 0x0008);
		}

		// struct FTireConfigMaterialFriction
		TEST_METHOD(ScriptStruct__PhysXVehicles__TireConfigMaterialFriction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, UnknownData_5VBM, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireConfigMaterialFriction, 0x0010);
		}

		// struct FVehicleDifferential4WData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleDifferential4WData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, DifferentialType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, UnknownData_A8AU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontRearSplit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontLeftRightSplit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearLeftRightSplit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, CentreBias, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearBias, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDifferential4WData, 0x001C);
		}

		// struct FVehicleGearData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleGearData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, Ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleGearData, 0x000C);
		}

		// struct FVehicleTransmissionData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleTransmissionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, bUseGearAutoBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_FJHP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearSwitchTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearAutoBoxLatency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, FinalRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, NeutralGearUpRatio, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ClutchStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_GNBW, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTransmissionData, 0x0030);
		}

		// struct FAnimNode_WheelHandler : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__PhysXVehicles__AnimNode_WheelHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WheelHandler, UnknownData_DM7I, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_WheelHandler, 0x00E0);
		}

		// struct FVehicleAnimInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleAnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleAnimInstanceProxy, UnknownData_6ZE4, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleAnimInstanceProxy, 0x0770);
		}

		// struct FVehicleEngineData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleEngineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MaxRPM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MOI, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateFullThrottle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchEngaged, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchDisengaged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, UnknownData_DJ1U, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineData, 0x00A0);
		}

		// struct FOverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, EndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}

		// struct FClothConstraintSetupNv
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeNv__ClothConstraintSetupNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetupNv, 0x0010);
		}

		// struct FDatasmithCameraLookatTrackingSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLookatTrackingSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, UnknownData_UDW8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, ActorToTrack, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLookatTrackingSettingsTemplate, 0x0030);
		}

		// struct FDatasmithCameraFilmbackSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFilmbackSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorHeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFilmbackSettingsTemplate, 0x0008);
		}

		// struct FDatasmithCameraLensSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLensSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLensSettingsTemplate, MaxFStop, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLensSettingsTemplate, 0x0004);
		}

		// struct FDatasmithCameraFocusSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFocusSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, UnknownData_VABR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, ManualFocusDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFocusSettingsTemplate, 0x0008);
		}

		// struct FDatasmithPostProcessSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithPostProcessSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_QEYZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_3Z8X, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, WhiteTemp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, VignetteIntensity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, FilmWhitePoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, AutoExposureMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_YLT9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraISO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraShutterSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, DepthOfFieldFstop, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithPostProcessSettingsTemplate, 0x0040);
		}

		// struct FDatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, ChordTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, MaxEdgeLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, NormalTolerance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, StitchingTechnique, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, UnknownData_V338, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithTessellationOptions, 0x0010);
		}

		// struct FDatasmithAssetImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithAssetImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithAssetImportOptions, PackagePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithAssetImportOptions, 0x0008);
		}

		// struct FDatasmithStaticMeshImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMeshImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MinLightmapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MaxLightmapResolution, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bGenerateLightmapUVs, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bRemoveDegenerates, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMeshImportOptions, 0x0004);
		}

		// struct FDatasmithReimportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithReimportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bUpdateActors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bRespawnDeletedActors, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithReimportOptions, 0x0002);
		}

		// struct FDatasmithStaticParameterSetTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticParameterSetTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticParameterSetTemplate, StaticSwitchParameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticParameterSetTemplate, 0x0050);
		}

		// struct FDatasmithMeshSectionInfoTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoTemplate, MaterialIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoTemplate, 0x0004);
		}

		// struct FDatasmithMeshBuildSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshBuildSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, UnknownData_EK4C, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, DstLightmapIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshBuildSettingsTemplate, 0x0010);
		}

		// struct FDatasmithStaticMaterialTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialInterface, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMaterialTemplate, 0x0010);
		}

		// struct FDatasmithRetessellationOptions : public FDatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithRetessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithRetessellationOptions, RetessellationRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithRetessellationOptions, UnknownData_O8CQ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithRetessellationOptions, 0x0014);
		}

		// struct FDatasmithImportBaseOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithImportBaseOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, SceneHandling, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeGeometry, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeMaterial, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeLight, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeCamera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeAnimation, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, UnknownData_G9LB, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, AssetOptions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, StaticMeshOptions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithImportBaseOptions, 0x0014);
		}

		// struct FDatasmithMeshSectionInfoMapTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoMapTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoMapTemplate, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoMapTemplate, 0x0050);
		}

		// struct FCapturedPropSegment
		TEST_METHOD(ScriptStruct__VariantManagerContent__CapturedPropSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, UnknownData_ZO8A, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, ComponentName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPropSegment, 0x0028);
		}

		// struct FVariantDependency
		TEST_METHOD(ScriptStruct__VariantManagerContent__VariantDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, VariantSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, Variant, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, bEnabled, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, UnknownData_8OP9, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVariantDependency, 0x0058);
		}

		// struct FFunctionCaller
		TEST_METHOD(ScriptStruct__VariantManagerContent__FunctionCaller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionCaller, FunctionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionCaller, 0x0008);
		}

		// struct FChaosDestructionEvent
		TEST_METHOD(ScriptStruct__ChaosNiagara__ChaosDestructionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Velocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, AngularVelocity, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ParticleID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Time, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Type, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDestructionEvent, 0x0044);
		}

		// struct FFoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_QZZ5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_BZYS, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// struct FFoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_8N5D, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, Type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// struct FProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Scale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_JUYJ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0050);
		}

		// struct FCameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_CDZ6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_TK20, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_LT6V, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0050);
		}

		// struct FCameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// struct FCameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, DiaphragmBladeCount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0018);
		}

		// struct FCameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_871F, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0038);
		}

		// struct FCameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_EYEE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_2K7M, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_JBQE, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_MJ1M, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0058);
		}

		// struct FNamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_4V13, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// struct FNamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// struct FNetAnalyticsDataConfig
		TEST_METHOD(ScriptStruct__NetCore__NetAnalyticsDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, bEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, UnknownData_NWY9, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetAnalyticsDataConfig, 0x000C);
		}

		// struct FSimulationStageMetaData
		TEST_METHOD(ScriptStruct__NiagaraShader__SimulationStageMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, SimulationStageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, IterationSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, UnknownData_SAFT, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, OutputDestinations, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MinStage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MaxStage, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulationStageMetaData, 0x0030);
		}

		// struct FNiagaraDataInterfaceGeneratedFunction
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGeneratedFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGeneratedFunction, UnknownData_NSL1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGeneratedFunction, 0x0028);
		}

		// struct FNiagaraDataInterfaceGPUParamInfo
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGPUParamInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DataInterfaceHLSLSymbol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DIClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, GeneratedFunctions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGPUParamInfo, 0x0030);
		}

		// struct FNiagaraCompileEvent
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraCompileEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Severity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, UnknownData_35A2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, NodeGuid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, PinGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, StackGuids, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileEvent, 0x0048);
		}

		// struct FMovieSceneMediaPlayerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaPlayerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, MediaSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, SectionStartFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, bLoop, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, UnknownData_8ZJG, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaPlayerPropertySectionTemplate, 0x0048);
		}

		// struct FMovieSceneMediaSectionParams
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSoundComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaPlayer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionStartFrame, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionEndFrame, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, bLooping, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, UnknownData_RF6W, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, StartFrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionParams, 0x0030);
		}

		// struct FMovieSceneMediaSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionTemplate, 0x0050);
		}

		// struct FImageWriteOptions
		TEST_METHOD(ScriptStruct__ImageWriteQueue__ImageWriteOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_GFOD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, OnComplete, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, CompressionQuality, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bOverwriteFile, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bAsync, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_0TBK, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageWriteOptions, 0x0060);
		}

		// struct FMaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDiscardQualityDuringCook, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisablePreintegratedGF, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDisableMaterialNormalCalculation, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileShadowQuality, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0009);
		}

		// struct FConfigActionKeyMapping : public FInputActionKeyMapping
		TEST_METHOD(ScriptStruct__AutoSettings__ConfigActionKeyMapping)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConfigActionKeyMapping, 0x0028);
		}

		// struct FConfigAxisKeyMapping : public FInputAxisKeyMapping
		TEST_METHOD(ScriptStruct__AutoSettings__ConfigAxisKeyMapping)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConfigAxisKeyMapping, 0x0028);
		}

		// struct FMappingGroupLink
		TEST_METHOD(ScriptStruct__AutoSettings__MappingGroupLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMappingGroupLink, MappingGroups, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMappingGroupLink, 0x0010);
		}

		// struct FKeyScale
		TEST_METHOD(ScriptStruct__AutoSettings__KeyScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyScale, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyScale, Scale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyScale, UnknownData_HA38, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyScale, 0x0020);
		}

		// struct FAxisAssociation
		TEST_METHOD(ScriptStruct__AutoSettings__AxisAssociation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxisAssociation, AxisKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxisAssociation, AnalogKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxisAssociation, ButtonKeys, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxisAssociation, BooleanKeys, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxisAssociation, 0x0050);
		}

		// struct FSettingOption
		TEST_METHOD(ScriptStruct__AutoSettings__SettingOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingOption, Label, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingOption, Value, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettingOption, 0x0028);
		}

		// struct FInputMappingGroup
		TEST_METHOD(ScriptStruct__AutoSettings__InputMappingGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMappingGroup, ActionMappings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMappingGroup, AxisMappings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMappingGroup, UnboundActionMappings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMappingGroup, UnboundAxisMappings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputMappingGroup, 0x0040);
		}

		// struct FInputMappingLayout
		TEST_METHOD(ScriptStruct__AutoSettings__InputMappingLayout)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMappingLayout, MappingGroups, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputMappingLayout, 0x0010);
		}

		// struct FInputMappingPreset
		TEST_METHOD(ScriptStruct__AutoSettings__InputMappingPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMappingPreset, PresetTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMappingPreset, bUseDefaultMappings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMappingPreset, UnknownData_7KOT, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMappingPreset, InputLayout, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMappingPreset, MappingGroups, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputMappingPreset, 0x0030);
		}

		// struct FKeyIconPair
		TEST_METHOD(ScriptStruct__AutoSettings__KeyIconPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyIconPair, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyIconPair, Icon, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyIconPair, 0x0020);
		}

		// struct FKeyIconSet
		TEST_METHOD(ScriptStruct__AutoSettings__KeyIconSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyIconSet, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyIconSet, Icons, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyIconSet, 0x0030);
		}

		// struct FKeyFriendlyName
		TEST_METHOD(ScriptStruct__AutoSettings__KeyFriendlyName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyFriendlyName, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyFriendlyName, FriendlyName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyFriendlyName, 0x0030);
		}

		// struct FKeyGroup
		TEST_METHOD(ScriptStruct__AutoSettings__KeyGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyGroup, KeyGroupTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyGroup, bUseGamepadKeys, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyGroup, bUseNonGamepadKeys, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyGroup, UnknownData_J8AR, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyGroup, Keys, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyGroup, 0x0020);
		}

		// struct FPlayerInputMappings
		TEST_METHOD(ScriptStruct__AutoSettings__PlayerInputMappings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInputMappings, PlayerId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInputMappings, PlayerIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInputMappings, BasePresetTag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInputMappings, UnknownData_BZBP, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInputMappings, MappingOverrides, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInputMappings, Custom, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInputMappings, UnknownData_CWB6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInputMappings, Preset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInputMappings, PlayerKeyGroup, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerInputMappings, 0x0070);
		}

		// struct FAutoSettingData
		TEST_METHOD(ScriptStruct__AutoSettings__AutoSettingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoSettingData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoSettingData, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoSettingData, Tags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoSettingData, 0x0038);
		}

		// struct FSubmixEffectDynamicProcessorFilterSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicProcessorFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, UnknownData_LZK3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, Cutoff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, GainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicProcessorFilterSettings, 0x000C);
		}

		// struct FSubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LinkMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_2RLS, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, Ratio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ExternalSubmix, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_3BF5, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyGainDb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyHighshelf, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyLowshelf, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_FZTY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0050);
		}

		// struct FSubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_Q59W, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// struct FSubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// struct FSubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypassEarlyReflections, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_KHLB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypassLateReflections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_GIE3, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DryLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypass, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_BYZR, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0040);
		}

		// struct FVaRestCallResponse
		TEST_METHOD(ScriptStruct__VaRest__VaRestCallResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestCallResponse, Request, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestCallResponse, Callback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestCallResponse, UnknownData_JQOG, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVaRestCallResponse, 0x0028);
		}

		// struct FVaRestURL
		TEST_METHOD(ScriptStruct__VaRest__VaRestURL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestURL, Valid, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestURL, Portal, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVaRestURL, 0x0068);
		}

		// struct FST_Option
		TEST_METHOD(UserDefinedStruct__ST_Option__ST_Option)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Option, Label_3_C8817C974AD087B6ABEF9D91A826B4D1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Option, Value_6_570477F044A4BD292888D9820D5EC764, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FST_Option, 0x0028);
		}

		// struct FMovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_BQNJ, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// struct FMovieSceneTrackEvaluationFieldEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvaluationFieldEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Range, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, ForcedTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Flags, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, UnknownData_FJCF, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, LegacySortOrder, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvaluationFieldEntry, 0x0020);
		}

		// struct FMovieSceneTrackEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationField, Entries, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvaluationField, 0x0010);
		}

		// struct FMovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// struct FMovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_68I9, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_R2QR, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutDuration, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// struct FMovieSceneFrameRange
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFrameRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFrameRange, UnknownData_F9F0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFrameRange, 0x0010);
		}

		// struct FOptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// struct FMovieSceneEntitySystemGraphNodes
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraphNodes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNodes, UnknownData_Z8B7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraphNodes, 0x0038);
		}

		// struct FMovieSceneEntitySystemGraph
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, UnknownData_88EZ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, Nodes, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, UnknownData_CBZF, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraph, 0x0138);
		}

		// struct FMovieSceneTrackInstanceInput
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceInput, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceInput, UnknownData_A5W4, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceInput, 0x0010);
		}

		// struct FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_8ZJN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_VFNQ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSectionPtr, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_42TW, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTangentData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTangentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangentWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, TangentWeightMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, UnknownData_7CAM, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentData, 0x0014);
		}

		// struct FMovieSceneFloatValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Tangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, InterpMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, TangentMode, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, PaddingByte, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, UnknownData_9PZD, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValue, 0x001C);
		}

		// struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyHandleMap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyHandleMap, 0x0060);
		}

		// struct FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneChannel, UnknownData_SSV7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneChannel, 0x0008);
		}

		// struct FMovieSceneFloatChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PreInfinityExtrap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PostInfinityExtrap, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_7LY0, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, bHasDefaultValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_050O, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, KeyHandles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, TickResolution, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannel, 0x00A0);
		}

		// struct FMovieSceneIntegerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneIntegerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, bHasDefaultValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_X6X5, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_2VGP, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerChannel, 0x0090);
		}

		// struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// struct FMovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0018);
		}

		// struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0038);
		}

		// struct FTrackInstanceInputComponent
		TEST_METHOD(ScriptStruct__MovieScene__TrackInstanceInputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, OutputIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, UnknownData_G0K8, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackInstanceInputComponent, 0x0010);
		}

		// struct FMovieSceneTrackInstanceComponent
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceComponent, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceComponent, TrackInstanceClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceComponent, 0x0010);
		}

		// struct FEasingComponentData
		TEST_METHOD(ScriptStruct__MovieScene__EasingComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEasingComponentData, Section, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEasingComponentData, 0x0008);
		}

		// struct FMovieScenePropertyBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, PropertyPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, bCanUseClassLookup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, UnknownData_PTBC, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertyBinding, 0x0014);
		}

		// struct FMovieSceneSectionGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionGroup, Sections, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionGroup, 0x0010);
		}

		// struct FMovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// struct FMovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// struct FMovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, PinnedNodes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewStart, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkStart, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkEnd, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, MarkedFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x00F0);
		}

		// struct FMovieSceneTimecodeSource
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimecodeSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, DeltaFrame, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimecodeSource, 0x0018);
		}

		// struct FMovieSceneByteChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneByteChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_FLR5, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_IN2J, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneByteChannel, 0x0098);
		}

		// struct FMovieSceneEntitySystemGraphNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNode, UnknownData_MLZG, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNode, System, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraphNode, 0x0028);
		}

		// struct FMovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_XG7T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// struct FMovieSceneSegmentIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegmentIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegmentIdentifier, IdentifierIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegmentIdentifier, 0x0004);
		}

		// struct FMovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// struct FMovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// struct FMovieSceneEvaluationOperand
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationOperand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, SequenceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationOperand, 0x0014);
		}

		// struct FMovieSceneSubSectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, ObjectBindingId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Flags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, UnknownData_GVST, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionData, 0x001C);
		}

		// struct FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_44EM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyTimeStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, UnknownData_RRHO, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyTimeStruct, 0x0028);
		}

		// struct FGeneratedMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__GeneratedMovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedMovieSceneKeyStruct, UnknownData_P5VP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeneratedMovieSceneKeyStruct, 0x0050);
		}

		// struct FMovieSceneObjectPathChannelKeyValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannelKeyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, SoftPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, HardPtr, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannelKeyValue, 0x0030);
		}

		// struct FMovieSceneObjectPathChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, PropertyClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, UnknownData_9Z5L, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannel, 0x00C0);
		}

		// struct FMovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_XQXT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0058);
		}

		// struct FSectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_LGSC, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// struct FMovieSceneSubSequenceTreeEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceTreeEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceTreeEntry, UnknownData_AKQZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceTreeEntry, 0x0008);
		}

		// struct FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceData, UnknownData_U9FC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceData, 0x0008);
		}

		// struct FMovieSceneSequencePlaybackParams
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, Frame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UnknownData_HSWI, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, MarkedFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, PositionType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UpdateMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UnknownData_RYZD, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackParams, 0x0028);
		}

		// struct FMovieSceneWarpCounter
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneWarpCounter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWarpCounter, WarpCounts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWarpCounter, 0x0010);
		}

		// struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__TestMovieSceneEvalTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTrackDisplayOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackDisplayOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackDisplayOptions, UnknownData_SQLI, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackDisplayOptions, 0x0004);
		}

		// struct FMovieSceneTrackInstanceEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceEntry, BoundObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceEntry, TrackInstance, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceEntry, 0x0010);
		}

		// struct FMovieSceneSequenceLoopCount
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceLoopCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceLoopCount, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceLoopCount, 0x0004);
		}

		// struct FMovieSceneSequenceReplProperties
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceReplProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownStatus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, UnknownData_LB0Q, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownNumLoops, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceReplProperties, 0x0010);
		}

		// struct FMovieSceneMarkedFrame
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneMarkedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, UnknownData_MX5T, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, Label, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarkedFrame, 0x0018);
		}

		// struct FMovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_HLIM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, SubSectionRanges, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// struct FMovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_C52A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0088);
		}

		// struct FMovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_QH8X, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// struct FMovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_B231, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, SourceTrack, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_HA92, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_W5FZ, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x0078);
		}

		// struct FMovieSceneEvaluationTemplateSerialNumber
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplateSerialNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplateSerialNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplateSerialNumber, 0x0004);
		}

		// struct FMovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_M9F7, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SequenceSignature, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateSerialNumber, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_BBJH, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x0160);
		}

		// struct FMovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_Q76G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, StartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_7ZPW, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0014);
		}

		// struct FMovieSceneRootEvaluationTemplateInstance
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneRootEvaluationTemplateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, WeakRootSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, CompiledDataManager, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_MZG0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, EntitySystemLinker, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_Z58G, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, DirectorInstances, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_X88H, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneRootEvaluationTemplateInstance, 0x00E8);
		}

		// struct FMovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// struct FMovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartFrameOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, bCanLoop, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, UnknownData_KRM2, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, EndFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, FirstLoopStartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PrerollTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostrollTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0024);
		}

		// struct FMovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, SpawnTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Tags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bContinuouslyRespawn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bEvaluateTracksWhenNotSpawned, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_V1DI, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_FKJE, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_UKZO, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, LevelName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_JC3W, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0090);
		}

		// struct FMovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0048);
		}

		// struct FMovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_FRP1, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// struct FMovieSceneObjectBindingIDs
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingIDs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingIDs, IDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingIDs, 0x0010);
		}

		// struct FMovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_VIA0, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// struct FMovieSceneBoolChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBoolChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_3NLL, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_6I97, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolChannel, 0x0090);
		}

		// struct FMovieSceneSubSequenceTree
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceTree, UnknownData_GANR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceTree, 0x0060);
		}

		// struct FMovieSceneSequenceInstanceDataPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceDataPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceDataPtr, UnknownData_JXWL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceDataPtr, 0x0018);
		}

		// struct FMovieSceneEvaluationFieldEntityTree
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityTree, UnknownData_YQJR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityTree, 0x0060);
		}

		// struct FMovieSceneEvaluationFieldEntityKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityKey, EntityOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityKey, EntityID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityKey, 0x000C);
		}

		// struct FMovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x0008);
		}

		// struct FMovieSceneSequenceCompilerMaskStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceCompilerMaskStruct)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceCompilerMaskStruct, 0x0001);
		}

		// struct FMovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// struct FMovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, SetupIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, TearDownIndex, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// struct FMovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0020);
		}

		// struct FMovieSceneFieldEntry_EvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFieldEntry_EvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, TrackPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, NumChildren, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, UnknownData_C1Z8, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFieldEntry_EvaluationTrack, 0x000C);
		}

		// struct FMovieSceneFieldEntry_ChildTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFieldEntry_ChildTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, ChildIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, Flags, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, UnknownData_A080, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, ForcedTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFieldEntry_ChildTemplate, 0x0008);
		}

		// struct FMovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, TrackLUT, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SectionLUT, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0030);
		}

		// struct FMovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// struct FMovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_A3XM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// struct FMovieSceneTimeTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeTransform, 0x000C);
		}

		// struct FMovieSceneTimeWarping
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeWarping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, End, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeWarping, 0x0008);
		}

		// struct FMovieSceneNestedSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneNestedSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, Warping, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNestedSequenceTransform, 0x0014);
		}

		// struct FMovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, UnknownData_WNJG, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, NestedTransforms, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x0020);
		}

		// struct FMovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, TickResolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PlayRange, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, FullPlayRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnwarpedPlayRange, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, bHasHierarchicalEasing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_5J8G, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, InstanceData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_CK9M, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SubSectionSignature, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, OuterToInnerTransform, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x00E8);
		}

		// struct FMovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, RootNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Tree, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x0118);
		}

		// struct FMovieSceneEvaluationFieldEntity
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntity, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntity, SharedMetaDataIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntity, 0x0010);
		}

		// struct FMovieSceneEvaluationFieldEntityMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, ForcedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, UnknownData_WY9M, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, UnknownData_NY99, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityMetaData, 0x000C);
		}

		// struct FMovieSceneEvaluationFieldSharedEntityMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSharedEntityMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSharedEntityMetaData, ObjectBindingId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSharedEntityMetaData, 0x0010);
		}

		// struct FMovieSceneEntityComponentField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntityComponentField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, PersistentEntityTree, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, OneShotEntityTree, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, Entities, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, EntityMetaData, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, SharedMetaData, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntityComponentField, 0x00F0);
		}

		// struct FST_HUDColor
		TEST_METHOD(UserDefinedStruct__ST_HUDColor__ST_HUDColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_HUDColor, Color_2_DB894F7D46F2CDCCD1CCBFAA9D883F29, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FST_HUDColor, 0x0010);
		}

		// struct FSoundCueCrossfadeInfo
		TEST_METHOD(ScriptStruct__SoundCueTemplates__SoundCueCrossfadeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundCueCrossfadeInfo, DistanceInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundCueCrossfadeInfo, UnknownData_HG5M, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundCueCrossfadeInfo, Sound, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundCueCrossfadeInfo, 0x0020);
		}

		// struct FSoundCueTemplateQualitySettings
		TEST_METHOD(ScriptStruct__SoundCueTemplates__SoundCueTemplateQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundCueTemplateQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundCueTemplateQualitySettings, MaxConcatenatedVariations, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundCueTemplateQualitySettings, MaxRandomizedVariations, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundCueTemplateQualitySettings, MaxMixVariations, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundCueTemplateQualitySettings, UnknownData_IZXJ, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundCueTemplateQualitySettings, 0x0028);
		}

		// struct FMediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, URL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// struct FMediaSoundComponentSpectralData
		TEST_METHOD(ScriptStruct__MediaAssets__MediaSoundComponentSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, Magnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaSoundComponentSpectralData, 0x0008);
		}

		// struct FSynth1PatchCable
		TEST_METHOD(ScriptStruct__Synthesis__Synth1PatchCable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Destination, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, UnknownData_Z2FG, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth1PatchCable, 0x0008);
		}

		// struct FEpicSynth1Patch
		TEST_METHOD(ScriptStruct__Synthesis__EpicSynth1Patch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, UnknownData_HSG1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchCables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEpicSynth1Patch, 0x0018);
		}

		// struct FModularSynthPreset : public FTableRowBase
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_EOLH, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_Q6M1, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Gain, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Octave, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Semitones, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Cents, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1PulseWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Type, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_SCLR, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Gain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Octave, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Semitones, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Cents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2PulseWidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Portamento, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_A20A, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Spread, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Pan, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Frequency, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Gain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Type, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Mode, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1PatchType, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_LL8H, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Frequency, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Gain, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Type, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Mode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2PatchType, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_NMQV, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, GainDb, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, AttackTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, DecayTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, SustainGain, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ReleaseTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvPatchType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvBiasPatchType, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_23VX, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_Y549, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDepth, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeAttackTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDecayTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeSustainGain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeReleaseTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_X1X6, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterFrequency, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterQ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterAlgorithm, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_HM3J, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_F4EI, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_0YLA, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayFeedback, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayWetlevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayRatio, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_BQJT, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusDepth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFeedback, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFrequency, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_8Y0A, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Patches, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPreset, 0x00E0);
		}

		// struct FModularSynthPresetBankEntry
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPresetBankEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, PresetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, Preset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPresetBankEntry, 0x00F0);
		}

		// struct FSourceEffectBitCrusherSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedSampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, UnknownData_FR02, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, SampleRateModulation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedBits, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, UnknownData_YNY7, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, BitModulation, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherSettings, 0x0030);
		}

		// struct FSourceEffectChorusSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Spread, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DepthModulation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, FrequencyModulation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, FeedbackModulation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetModulation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryModulation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, SpreadModulation, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusSettings, 0x0078);
		}

		// struct FSourceEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_TMXY, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_0TTY, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectDynamicsProcessorSettings, 0x0028);
		}

		// struct FSourceEffectEnvelopeFollowerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEnvelopeFollowerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, AttackTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, ReleaseTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, PeakMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, bIsAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, UnknownData_1MY6, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEnvelopeFollowerSettings, 0x000C);
		}

		// struct FSourceEffectEQBand
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, UnknownData_YP47, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQBand, 0x0010);
		}

		// struct FSourceEffectEQSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQSettings, 0x0010);
		}

		// struct FSourceEffectFilterAudioBusModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterAudioBusModulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, AudioBus, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeFollowerAttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeFollowerReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeGainMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, FilterParam, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, UnknownData_BNHO, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MinFrequencyModulation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MaxFrequencyModulation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MinResonanceModulation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MaxResonanceModulation, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterAudioBusModulationSettings, 0x0028);
		}

		// struct FSourceEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterCircuit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_BKHV, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, CutoffFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterQ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_XMLB, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, AudioBusModulation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterSettings, 0x0020);
		}

		// struct FSourceEffectFoldbackDistortionSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFoldbackDistortionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, InputGainDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, ThresholdDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, OutputGainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFoldbackDistortionSettings, 0x000C);
		}

		// struct FSourceEffectMidSideSpreaderSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectMidSideSpreaderSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, SpreadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, InputMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, OutputMode, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, bEqualPower, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, UnknownData_U78O, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectMidSideSpreaderSettings, 0x0008);
		}

		// struct FSourceEffectPannerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPannerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Spread, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Pan, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPannerSettings, 0x0008);
		}

		// struct FSourceEffectPhaserSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPhaserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, WetLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, LFOType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UseQuadraturePhase, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UnknownData_TKAG, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPhaserSettings, 0x0010);
		}

		// struct FSourceEffectRingModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectRingModulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, ModulatorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_2YJ8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Depth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, DryLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_IGCV, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, AudioBusModulator, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectRingModulationSettings, 0x0020);
		}

		// struct FSourceEffectSimpleDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectSimpleDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, SpeedOfSound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DelayAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DryAmount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, WetAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, Feedback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, UnknownData_VHW2, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectSimpleDelaySettings, 0x0018);
		}

		// struct FSourceEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectStereoDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_FKKA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DryLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, bFilterEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_GI02, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterFrequency, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterQ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectStereoDelaySettings, 0x0024);
		}

		// struct FSourceEffectWaveShaperSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectWaveShaperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, OutputGainDb, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectWaveShaperSettings, 0x0008);
		}

		// struct FSubmixEffectConvolutionReverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectConvolutionReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, NormalizationVolumeDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bBypass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bMixInputChannelFormatToImpulseResponseFormat, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bMixReverbOutputToOutputChannelFormat, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_1U4M, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bInvertRearChannelBleedPhase, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bSurroundRearChannelFlip, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_QCWR, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedAmount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_MMY4, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, ImpulseResponse, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, AllowHArdwareAcceleration, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_ACWQ, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectConvolutionReverbSettings, 0x0028);
		}

		// struct FSubmixEffectDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, DelayLength, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDelaySettings, 0x000C);
		}

		// struct FSubmixEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterAlgorithm, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, UnknownData_0IO9, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFilterSettings, 0x000C);
		}

		// struct FSubmixEffectFlexiverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFlexiverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, PreDelay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, DecayTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, RoomDampening, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, Complexity, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFlexiverbSettings, 0x0010);
		}

		// struct FDynamicsBandSettings
		TEST_METHOD(ScriptStruct__Synthesis__DynamicsBandSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, CrossoverTopFrequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, AttackTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, ReleaseTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, ThresholdDb, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, Ratio, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, KneeBandwidthDb, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, InputGainDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, OutputGainDb, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicsBandSettings, 0x0020);
		}

		// struct FSubmixEffectMultibandCompressorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectMultibandCompressorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, UnknownData_7Z38, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bLinkChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bFourPole, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, UnknownData_ME7W, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, Bands, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectMultibandCompressorSettings, 0x0020);
		}

		// struct FSubmixEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectStereoDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, UnknownData_8MZP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DryLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, bFilterEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, UnknownData_3M3C, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterFrequency, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterQ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectStereoDelaySettings, 0x0024);
		}

		// struct FTapDelayInfo
		TEST_METHOD(ScriptStruct__Synthesis__TapDelayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapLineMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, UnknownData_4OBS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, DelayLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, OutputChannel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, PanInDegrees, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapId, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTapDelayInfo, 0x0018);
		}

		// struct FSubmixEffectTapDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectTapDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, Taps, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectTapDelaySettings, 0x0018);
		}

		// struct FSynth2DSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__Synth2DSliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalThumbImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledThumbImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledBarImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BackgroundImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BarThickness, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, UnknownData_075H, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth2DSliderStyle, 0x02B8);
		}

		// struct FSynthKnobStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthKnobStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnob, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnobOverlay, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnob, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnobOverlay, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MinValueAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MaxValueAngle, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, KnobSize, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, UnknownData_I3UF, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthKnobStyle, 0x0238);
		}

		// struct FPatchId
		TEST_METHOD(ScriptStruct__Synthesis__PatchId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatchId, ID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPatchId, 0x0004);
		}

		// struct FSourceEffectBitCrusherBaseSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherBaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherBaseSettings, SampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherBaseSettings, BitDepth, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherBaseSettings, 0x0008);
		}

		// struct FSourceEffectChorusBaseSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusBaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Spread, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusBaseSettings, 0x0018);
		}

		// struct FSynthSlateStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthSlateStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, SizeType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, ColorStyle, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, UnknownData_4PGQ, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthSlateStyle, 0x0010);
		}

		// struct FInputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_DGWM, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// struct FVirtualKeyboardOptions
		TEST_METHOD(ScriptStruct__Slate__VirtualKeyboardOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualKeyboardOptions, bEnableAutocorrect, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualKeyboardOptions, 0x0001);
		}

		// struct FAnchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// struct FCustomizedToolMenuEntry
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, UnknownData_5TDG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuEntry, 0x0004);
		}

		// struct FCustomizedToolMenuSection
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, UnknownData_QD4V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuSection, 0x0004);
		}

		// struct FCustomizedToolMenuNameArray
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuNameArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuNameArray, Names, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuNameArray, 0x0010);
		}

		// struct FCustomizedToolMenu
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Entries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, EntryOrder, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, SectionOrder, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, UnknownData_EE7I, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenu, 0x01E8);
		}

		// struct FWidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// struct FNamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0010);
		}

		// struct FAnimationEventBinding
		TEST_METHOD(ScriptStruct__UMG__AnimationEventBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Delegate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, AnimationEvent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_6F7W, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UserTag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_YWW4, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationEventBinding, 0x0028);
		}

		// struct FDynamicPropertyPath : public FCachedPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0030);
		}

		// struct FAnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// struct FSlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_K3JM, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// struct FRadialBoxSettings
		TEST_METHOD(ScriptStruct__UMG__RadialBoxSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, bDistributeItemsEvenly, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, UnknownData_4RSI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, AngleBetweenItems, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, StartingAngle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialBoxSettings, 0x000C);
		}

		// struct FUserWidgetPool
		TEST_METHOD(ScriptStruct__UMG__UserWidgetPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, ActiveWidgets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, InactiveWidgets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, UnknownData_LEYZ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserWidgetPool, 0x0080);
		}

		// struct FShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0003);
		}

		// struct FMovieScene2DTransformMask
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformMask, 0x0004);
		}

		// struct FSlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// struct FWidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_AYS1, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0024);
		}

		// struct FBlueprintWidgetAnimationDelegateBinding
		TEST_METHOD(ScriptStruct__UMG__BlueprintWidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UnknownData_1GHR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, AnimationToBind, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, FunctionNameToBind, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UserTag, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintWidgetAnimationDelegateBinding, 0x001C);
		}

		// struct FDelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_SYUL, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0058);
		}

		// struct FWidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_M25S, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, CustomDelegate, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x0024);
		}

		// struct FEventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_EEXA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00B8);
		}

		// struct FPaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_Q52T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_EA59, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x02C0);
		}

		// struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0090);
		}

		// struct FRichTextStyleRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichTextStyleRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextStyleRow, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextStyleRow, 0x0278);
		}

		// struct FRichImageRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichImageRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichImageRow, Brush, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichImageRow, 0x0090);
		}

		// struct FWidgetComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__UMG__WidgetComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetComponentInstanceData, UnknownData_L28X, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetComponentInstanceData, 0x00C8);
		}

		// struct FChaosHandlerSet
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosHandlerSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, UnknownData_WEA6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, ChaosHandlers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosHandlerSet, 0x0058);
		}

		// struct FBreakEventCallbackWrapper
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__BreakEventCallbackWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreakEventCallbackWrapper, UnknownData_L5Q1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBreakEventCallbackWrapper, 0x0040);
		}

		// struct FChaosDebugSubstepControl
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosDebugSubstepControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bPause, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bSubstep, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bStep, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDebugSubstepControl, 0x0003);
		}

		// struct FChaosPhysicsCollisionInfo
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosPhysicsCollisionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Normal, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AccumulatedImpulse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Velocity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherVelocity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AngularVelocity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherAngularVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Mass, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherMass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, UnknownData_SQK9, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsCollisionInfo, 0x0070);
		}

		// struct FChaosBreakEvent
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosBreakEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Velocity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, AngularVelocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Mass, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakEvent, 0x0030);
		}

		// struct FSolverCollisionFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverCollisionFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, UnknownData_61RK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinImpulse, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionFilterSettings, 0x0010);
		}

		// struct FSolverBreakingFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverBreakingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, UnknownData_RHSD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingFilterSettings, 0x0010);
		}

		// struct FSolverTrailingFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverTrailingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, UnknownData_UVX4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingFilterSettings, 0x0010);
		}

		// struct FChaosSolverConfiguration
		TEST_METHOD(ScriptStruct__Chaos__ChaosSolverConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, Iterations, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionPairIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, PushOutIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionPushOutPairIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionMarginFraction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionMarginMax, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, JointPairIterations, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, JointPushOutPairIterations, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, ClusterConnectionFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, ClusterUnionConnectionType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateCollisionData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_QSWU, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionFilterSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateBreakData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_W9MG, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, BreakingFilterSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateTrailingData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_5BK4, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, TrailingFilterSettings, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateContactGraph, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_ZZIC, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosSolverConfiguration, 0x0068);
		}

		// struct FSolverBreakingData
		TEST_METHOD(ScriptStruct__Chaos__SolverBreakingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingData, 0x0030);
		}

		// struct FSolverCollisionData
		TEST_METHOD(ScriptStruct__Chaos__SolverCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AccumulatedImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Normal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass1, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass2, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndex, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndexMesh, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndexMesh, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionData, 0x006C);
		}

		// struct FRecordedFrame
		TEST_METHOD(ScriptStruct__Chaos__RecordedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, TransformIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, PreviousTransformIndices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, DisabledFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Collisions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Breakings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Trailings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Timestamp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, UnknownData_89CV, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedFrame, 0x00B8);
		}

		// struct FRecordedTransformTrack
		TEST_METHOD(ScriptStruct__Chaos__RecordedTransformTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedTransformTrack, Records, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedTransformTrack, 0x0010);
		}

		// struct FSolverTrailingData
		TEST_METHOD(ScriptStruct__Chaos__SolverTrailingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingData, 0x0030);
		}

		// struct FPlatformRuntimeAudioCompressionOverrides
		TEST_METHOD(ScriptStruct__AudioPlatformConfiguration__PlatformRuntimeAudioCompressionOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, bOverrideCompressionTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, UnknownData_P74L, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, DurationThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, MaxNumRandomBranches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, SoundCueQualityIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformRuntimeAudioCompressionOverrides, 0x0010);
		}

		// struct FPropertyPathSegment
		TEST_METHOD(ScriptStruct__PropertyPath__PropertyPathSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_X6BR, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_FYLJ, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0028);
		}

		// struct FCachedPropertyPath
		TEST_METHOD(ScriptStruct__PropertyPath__CachedPropertyPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, Segments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_EAJO, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, CachedFunction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_DWTZ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPropertyPath, 0x0030);
		}

		// struct FUdpMockMessage
		TEST_METHOD(ScriptStruct__UdpMessaging__UdpMockMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUdpMockMessage, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUdpMockMessage, 0x0010);
		}

		// struct FAdaptorPolygon2Group
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon2Group)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, UnknownData_7BSI, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon2Group, 0x0048);
		}

		// struct FAdaptorTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorTriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorTriangleID, 0x0004);
		}

		// struct FAdaptorPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, UnknownData_E0BS, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon, 0x0018);
		}

		// struct FPolygonGroupForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonGroupID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupForPolygon, 0x0008);
		}

		// struct FMeshElementAttributeValue
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeValue, UnknownData_35Q7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeValue, 0x0050);
		}

		// struct FMeshElementAttributeData
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, UnknownData_4O67, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeData, 0x0060);
		}

		// struct FMeshElementAttributeList
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeList, Attributes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeList, 0x0010);
		}

		// struct FPolygonGroupToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, PolygonGroupAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, OriginalPolygonGroupID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, UnknownData_23FJ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupToCreate, 0x0018);
		}

		// struct FVertexToMove
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, NewVertexPosition, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToMove, 0x0010);
		}

		// struct FVertexIndexAndInstanceID
		TEST_METHOD(ScriptStruct__EditableMesh__VertexIndexAndInstanceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, ContourIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, VertexInstanceID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexIndexAndInstanceID, 0x0008);
		}

		// struct FVertexInstancesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstancesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstancesForPolygonHole, VertexIndicesAndInstanceIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstancesForPolygonHole, 0x0010);
		}

		// struct FChangeVertexInstancesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__ChangeVertexInstancesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, UnknownData_CGBX, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PerimeterVertexIndicesAndInstanceIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, VertexIndicesAndInstanceIDsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChangeVertexInstancesForPolygon, 0x0028);
		}

		// struct FVertexAttributesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygonHole, VertexAttributeList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygonHole, 0x0010);
		}

		// struct FVertexAttributesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, UnknownData_63WX, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PerimeterVertexAttributeLists, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, VertexAttributeListsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygon, 0x0028);
		}

		// struct FAttributesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, UnknownData_6HGZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForEdge, 0x0018);
		}

		// struct FAttributesForVertexInstance
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertexInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, UnknownData_C4VV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertexInstance, 0x0018);
		}

		// struct FAttributesForVertex
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, UnknownData_ZSPO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertex, 0x0018);
		}

		// struct FVertexPair
		TEST_METHOD(ScriptStruct__EditableMesh__VertexPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexPair, 0x0008);
		}

		// struct FPolygonToSplit
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToSplit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, UnknownData_HZR8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, VertexPairsToSplitAt, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToSplit, 0x0018);
		}

		// struct FVertexAndAttributes
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAndAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, PolygonVertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAndAttributes, 0x0018);
		}

		// struct FPolygonToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_SPQC, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PerimeterVertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, OriginalPolygonID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonEdgeHardness, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_93WQ, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToCreate, 0x0020);
		}

		// struct FEdgeToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__EdgeToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, EdgeAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, OriginalEdgeID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, UnknownData_7485, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeToCreate, 0x0020);
		}

		// struct FVertexInstanceToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstanceToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_8R3W, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexInstanceAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, OriginalVertexInstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_Q29V, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceToCreate, 0x0020);
		}

		// struct FVertexToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, VertexAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, OriginalVertexID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, UnknownData_Z14A, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToCreate, 0x0018);
		}

		// struct FSubdividedWireEdge
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedWireEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex0PositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex1PositionIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, UnknownData_YDER, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedWireEdge, 0x000C);
		}

		// struct FSubdividedQuadVertex
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuadVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexPositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexBinormalSign, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuadVertex, 0x0034);
		}

		// struct FSubdividedQuad
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuad, 0x00D0);
		}

		// struct FSubdivisionLimitSection
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitSection, SubdividedQuads, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitSection, 0x0010);
		}

		// struct FSubdivisionLimitData
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, VertexPositions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, Sections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, SubdividedWireEdges, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitData, 0x0030);
		}

		// struct FRenderingPolygonGroup
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygonGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, UnknownData_MUYC, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygonGroup, 0x0048);
		}

		// struct FRenderingPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, UnknownData_V01I, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygon, 0x0018);
		}

		// struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaInputType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, bAlphaBoolEnabled, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_2GMQ, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaBoolBlend, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaCurveName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_NW33, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x00C8);
		}

		// struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_RU3F, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_UM8R, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x00E8);
		}

		// struct FAnimNode_AimOffsetLookAt : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_5S0J, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_1CX9, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x01C0);
		}

		// struct FRotationRetargetingInfo
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationRetargetingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_DMKV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, RotationComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_1R2B, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TwistAxis, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bUseAbsoluteAngle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_O8CI, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMinimum, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMaximum, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMinimum, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMaximum, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingType, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_213O, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, CustomCurve, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bFlipEasing, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_K79E, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingWeight, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bClamp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_F7K1, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationRetargetingInfo, 0x0130);
		}

		// struct FAnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_GNDE, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_8NUV, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x0048);
		}

		// struct FAnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_5KK2, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0024);
		}

		// struct FAnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0040);
		}

		// struct FAnimNode_AnimDynamics : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_3A24, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityOverride, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearAccScale, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearVelScale, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_DRMK, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_4V36, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_UFL5, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RetargetingSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_0UDF, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x0440);
		}

		// struct FAnimNode_ApplyAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_6X3T, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaInputType, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, bAlphaBoolEnabled, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_K3MT, 0x00C6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x00C8);
		}

		// struct FAngularRangeLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AngularRangeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, Bone, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularRangeLimit, 0x0028);
		}

		// struct FAnimNode_ApplyLimits : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyLimits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularRangeLimits, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularOffsets, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyLimits, 0x00E8);
		}

		// struct FBlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_OXZA, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x0024);
		}

		// struct FAnimNode_BlendBoneByChannel : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_DJJZ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_0Z7N, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_VGTQ, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x0068);
		}

		// struct FAnimNode_BlendListBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, TransitionType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_VWH0, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_5P64, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x0098);
		}

		// struct FAnimNode_BlendListByBool : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_02PU, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00A0);
		}

		// struct FAnimNode_BlendListByEnum : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_BC9H, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00B0);
		}

		// struct FAnimNode_BlendListByInt : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_K568, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00A0);
		}

		// struct FAnimNode_BlendSpaceEvaluator : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_ML6W, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x00F0);
		}

		// struct FAnimNode_BoneDrivenController : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ParameterName, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_TRB4, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0118);
		}

		// struct FSocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_WT9U, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_SL2I, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0040);
		}

		// struct FBoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_YDFS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_WPQD, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0060);
		}

		// struct FAnimNode_CCDIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CCDIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocationSpace, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_NN2K, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, TipBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RootBone, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, Precision, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, MaxIterations, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bStartFromTail, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bEnableRotationLimit, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_MF8N, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RotationLimitPerJoints, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CCDIK, 0x0180);
		}

		// struct FConstraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_EFTX, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x001C);
		}

		// struct FAnimNode_Constraint : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_0U8I, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x0108);
		}

		// struct FAnimNode_CopyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_2SA0, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x00F0);
		}

		// struct FAnimNode_CopyBoneDelta : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x00F8);
		}

		// struct FAnimNode_CopyPoseFromMesh : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bCopyCustomAttributes, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_0NL7, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, RootBoneToCopy, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_42JG, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x01D8);
		}

		// struct FAnimNode_CurveSource : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, UnknownData_Z1SQ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0040);
		}

		// struct FAnimNode_Fabrik : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_462B, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_QIL4, 0x018A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x0190);
		}

		// struct FAnimNode_HandIKRetargeting : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_NCAV, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0120);
		}

		// struct FAnimNode_LayeredBoneBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceScaleBlend, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_8YUH, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LODThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_M6Q2, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_N289, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00C0);
		}

		// struct FAnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, HingeRotationAxis, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x002C);
		}

		// struct FAnimNode_LegIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, UnknownData_VF20, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x00F8);
		}

		// struct FAnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_E6AR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x00A0);
		}

		// struct FIKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_O3FT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0038);
		}

		// struct FIKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_FG3T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x003C);
		}

		// struct FAnimNode_LookAt : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_C02Y, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_XTQ3, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_LRBL, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x01B0);
		}

		// struct FAnimNode_MakeDynamicAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_WBS4, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0038);
		}

		// struct FAnimNode_ModifyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_8OYO, 0x0102);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x0108);
		}

		// struct FAnimNode_ModifyCurve : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_2OBV, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_ALED, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0058);
		}

		// struct FAnimNode_MultiWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_SCQ6, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_UW0S, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0050);
		}

		// struct FAnimNode_ObserveBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_1E3O, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Rotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Scale, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x0100);
		}

		// struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_BZR6, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x0080);
		}

		// struct FAnimNode_PoseBlendNode : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_EY4J, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x00A0);
		}

		// struct FAnimNode_PoseByName : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_IWJJ, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x0098);
		}

		// struct FRBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, SolverType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_SOI7, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Radius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, bAutomaticRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, NormalizeMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_1I2C, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMax, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x002C);
		}

		// struct FPoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// struct FPoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DistanceMethod, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, FunctionType, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_OEV5, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_ZODY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bIsHidden, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_AE5R, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00C0);
		}

		// struct FAnimNode_PoseDriver : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_A2KM, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_9638, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, LODThreshold, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_23RH, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0138);
		}

		// struct FAnimNode_PoseSnapshot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Mode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_34O0, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x0090);
		}

		// struct FRandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_G569, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0050);
		}

		// struct FAnimNode_RandomPlayer : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_DS68, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_ZIC2, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0078);
		}

		// struct FAnimNode_MeshSpaceRefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0010);
		}

		// struct FAnimNode_RefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_R697, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0018);
		}

		// struct FAnimNode_ResetRoot : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ResetRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ResetRoot, UnknownData_3DG8, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ResetRoot, 0x00D8);
		}

		// struct FSimSpaceSettings
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SimSpaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MasterAlpha, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, VelocityScaleZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxLinearVelocity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxAngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxLinearAcceleration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxAngularAcceleration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearDrag, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearDragV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearVelocity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalAngularVelocity, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimSpaceSettings, 0x0040);
		}

		// struct FAnimNode_RigidBody : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_GW6K, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideWorldGravity, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ExternalForce, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearAccScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearVelScale, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentAppliedLinearAccClamp, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimSpaceSettings, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, CachedBoundsScale, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, BaseBoneRef, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverlapChannel, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimulationSpace, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bForceDisableCollisionBetweenConstraintBodies, 0x01FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_RFI3, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_DIM6, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, WorldSpaceMinimumScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, EvaluationResetTime, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_MSO4, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody, 0x0650);
		}

		// struct FAnimNode_RotateRootBone : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, PitchScaleBiasClamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, YawScaleBiasClamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_L4R4, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x00A0);
		}

		// struct FAnimNode_RotationMultiplier : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_54R1, 0x00EE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x00F0);
		}

		// struct FAnimNode_RotationOffsetBlendSpace : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaCurveName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_25JU, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaInputType, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_2RUK, 0x018E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x0190);
		}

		// struct FAnimNode_ScaleChainLength : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_7SGT, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_A7O7, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x0078);
		}

		// struct FAnimNode_SequenceEvaluator : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_GU9J, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_LUL0, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0050);
		}

		// struct FAnimNode_Slot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_BZBG, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0048);
		}

		// struct FAnimNode_SplineIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_KPNQ, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_DPSJ, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_RM67, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0270);
		}

		// struct FSplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0014);
		}

		// struct FAnimNode_SpringBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_9RJK, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_6IXV, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0128);
		}

		// struct FAnimNode_StateResult : public FAnimNode_Root
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_StateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateResult, 0x0030);
		}

		// struct FRotationLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMax, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationLimit, 0x0018);
		}

		// struct FAnimNode_Trail : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_IBD4, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_XC31, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, MaxDeltaTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScaleInputProcessor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationLimits, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationOffsets, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, PlanarLimits, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, LastBoneRotationAnimAlphaBlend, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_5VHB, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x0260);
		}

		// struct FReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0020);
		}

		// struct FAnimNode_TwistCorrectiveNode : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, Curve, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_422F, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x0138);
		}

		// struct FAnimNode_TwoBoneIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_DPZN, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_KIU5, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_IMKY, 0x01D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x01E0);
		}

		// struct FAnimNode_TwoWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_RWPR, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_U82Y, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x00C8);
		}

		// struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_7IMR, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x0A00);
		}

		// struct FPositionHistory
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PositionHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Positions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Range, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, UnknownData_WL8I, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPositionHistory, 0x0030);
		}

		// struct FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// struct FRBFTarget : public FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, ScaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_LB8U, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, DistanceMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, FunctionType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_VM7L, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x00A0);
		}

		// struct FCompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// struct FCaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// struct FMovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_5BVN, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, MovieExtension, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_70O4, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseCustomFrameRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_YS28, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, CustomFrameRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, Resolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUsePathTracer, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, PathTracerSamplePerPixel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_1W15, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0070);
		}

		// struct FFrameMetrics
		TEST_METHOD(ScriptStruct__MovieSceneCapture__FrameMetrics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, TotalElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameDelta, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, NumDroppedFrames, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameMetrics, 0x0010);
		}

		// struct FCapturedPixels
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixels, UnknownData_GSJ6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixels, 0x0010);
		}

		// struct FCapturedPixelsID
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixelsID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixelsID, Identifiers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixelsID, 0x0050);
		}

		// struct FMRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_1NC1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// struct FCustomMeshTriangle
		TEST_METHOD(ScriptStruct__CustomMeshComponent__CustomMeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomMeshTriangle, 0x0024);
		}

		// struct FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCacheAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_A4JW, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_4G6L, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCache, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheParams, 0x0040);
		}

		// struct FMovieSceneGeometryCacheSectionTemplateParameters : public FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplateParameters, 0x0048);
		}

		// struct FMovieSceneGeometryCacheSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplate, 0x0068);
		}

		// struct FTickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_0CIX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_00G0, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_OD2I, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0028);
		}

		// struct FActorComponentTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_91KO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0030);
		}

		// struct FGPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_UC59, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_OTTV, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// struct FDistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_AFR5, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0020);
		}

		// struct FFloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0020);
		}

		// struct FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0020);
		}

		// struct FRawDistributionVector : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0048);
		}

		// struct FRawDistributionFloat : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0030);
		}

		// struct FGPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_9C23, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_P47C, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_U42J, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_3F0A, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_8ADI, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_5J56, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x0280);
		}

		// struct FSimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_OXB5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, ReplicationBytes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0028);
		}

		// struct FChannelDefinition
		TEST_METHOD(ScriptStruct__Engine__ChannelDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, StaticChannelIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bTickOnCreate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bServerOpen, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bClientOpen, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialServer, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialClient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, UnknownData_WXP7, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChannelDefinition, 0x0028);
		}

		// struct FActorTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_QD44, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0030);
		}

		// struct FRepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// struct FVector_NetQuantize100 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// struct FActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_QEIW, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0018);
		}

		// struct FLightingChannels
		TEST_METHOD(ScriptStruct__Engine__LightingChannels)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingChannels, 0x0001);
		}

		// struct FCustomPrimitiveData
		TEST_METHOD(ScriptStruct__Engine__CustomPrimitiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPrimitiveData, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomPrimitiveData, 0x0010);
		}

		// struct FCollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// struct FResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_UGZ1, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x000C);
		}

		// struct FWalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_4VHG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_Y18D, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// struct FVector_NetQuantize : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// struct FVector_NetQuantizeNormal : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// struct FHitResult
		TEST_METHOD(ScriptStruct__Engine__HitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_CVBH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ElementIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_6DAV, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, MyBoneName, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x008C);
		}

		// struct FFindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_5JYQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0098);
		}

		// struct FAlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_XWJP, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_TOSY, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0030);
		}

		// struct FInputAlphaBoolBlend
		TEST_METHOD(ScriptStruct__Engine__InputAlphaBoolBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, bInitialized, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, UnknownData_BVDL, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, CustomCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, AlphaBlend, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAlphaBoolBlend, 0x0048);
		}

		// struct FInputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// struct FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_7SB9, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0010);
		}

		// struct FComponentSpacePoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0010);
		}

		// struct FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_VAGF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x0760);
		}

		// struct FTableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_OXZX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// struct FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_E97F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0010);
		}

		// struct FAnimNode_AssetPlayerBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupScope, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_JS56, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_29P0, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0038);
		}

		// struct FPoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0010);
		}

		// struct FPerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// struct FPoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_GHXU, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0038);
		}

		// struct FAnimNode_Root : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Root)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Group, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0030);
		}

		// struct FAnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_NN3F, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x000C);
		}

		// struct FActorComponentDuplicatedObjectData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentDuplicatedObjectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentDuplicatedObjectData, UnknownData_Z8AU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentDuplicatedObjectData, 0x0010);
		}

		// struct FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_WMLO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentCreationMethod, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_JI4E, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTypeSerializedIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SavedProperties, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UniqueTransientPackage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, DuplicatedObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedNames, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentInstanceData, 0x0068);
		}

		// struct FAnimNode_Inertialization : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Inertialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, UnknownData_XC85, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Inertialization, 0x0070);
		}

		// struct FInertializationPoseDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationPoseDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPoseDiff, UnknownData_PRCC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPoseDiff, 0x0028);
		}

		// struct FInertializationCurveDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationCurveDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationCurveDiff, UnknownData_B0WG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationCurveDiff, 0x0008);
		}

		// struct FInertializationBoneDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationBoneDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationBoneDiff, UnknownData_5JI6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationBoneDiff, 0x003C);
		}

		// struct FInertializationPose
		TEST_METHOD(ScriptStruct__Engine__InertializationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPose, UnknownData_GBZO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPose, 0x00A0);
		}

		// struct FAnimNode_CustomProperty : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_CustomProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, SourcePropertyNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, DestPropertyNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, TargetInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, UnknownData_ENQI, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CustomProperty, 0x0058);
		}

		// struct FAnimNode_LinkedAnimGraph : public FAnimNode_CustomProperty
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoseNames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InstanceClass, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, Tag, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_IY8V, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_7U8D, 0x009D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimGraph, 0x00A0);
		}

		// struct FAnimNode_LinkedAnimLayer : public FAnimNode_LinkedAnimGraph
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Interface, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Layer, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimLayer, 0x00B0);
		}

		// struct FCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__CustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, VariantType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, UnknownData_1EIM, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, UnknownData_ZPWS, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttribute, 0x0030);
		}

		// struct FCustomAttributePerBoneData
		TEST_METHOD(ScriptStruct__Engine__CustomAttributePerBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, BoneTreeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, UnknownData_UY5Z, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, Attributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttributePerBoneData, 0x0018);
		}

		// struct FDataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// struct FDataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// struct FRepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_G9IT, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// struct FSoundModulationDestinationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDestinationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, UnknownData_9WED, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, Modulator, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDestinationSettings, 0x0010);
		}

		// struct FSoundModulationDefaultSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDefaultSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, VolumeModulationDestination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, PitchModulationDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, HighpassModulationDestination, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, LowpassModulationDestination, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDefaultSettings, 0x0040);
		}

		// struct FSoundModulationDefaultRoutingSettings : public FSoundModulationDefaultSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDefaultRoutingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, VolumeRouting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, PitchRouting, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, HighpassRouting, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, LowpassRouting, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, UnknownData_YVQJ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDefaultRoutingSettings, 0x0048);
		}

		// struct FMaterialParameterInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Association, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, UnknownData_ZOB3, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Index, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterInfo, 0x0010);
		}

		// struct FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, bOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, UnknownData_0QL6, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterBase, 0x0024);
		}

		// struct FStaticSwitchParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, Value, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_3CFY, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticSwitchParameter, 0x0028);
		}

		// struct FInterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_GY21, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// struct FEditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// struct FBlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_7Q7Y, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// struct FCustomAttributeSetting
		TEST_METHOD(ScriptStruct__Engine__CustomAttributeSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributeSetting, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributeSetting, Meaning, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttributeSetting, 0x0020);
		}

		// struct FAnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// struct FBakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_C9OF, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// struct FBakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_IU68, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, LayerNodeIndices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_GF3E, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0058);
		}

		// struct FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// struct FAnimationTransitionBetweenStates : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_F3E5, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_C356, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// struct FCachedPoseIndices
		TEST_METHOD(ScriptStruct__Engine__CachedPoseIndices)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPoseIndices, OrderedSavedPoseNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPoseIndices, 0x0010);
		}

		// struct FExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_V0T9, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0008);
		}

		// struct FGraphAssetPlayerInformation
		TEST_METHOD(ScriptStruct__Engine__GraphAssetPlayerInformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphAssetPlayerInformation, PlayerNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphAssetPlayerInformation, 0x0010);
		}

		// struct FAnimGraphBlendOptions
		TEST_METHOD(ScriptStruct__Engine__AnimGraphBlendOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendOutTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGraphBlendOptions, 0x0008);
		}

		// struct FAnimBlueprintFunction
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Group, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, OutputPoseNodeIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_1XCN, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNodeIndices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_ZA9M, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, bImplemented, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_WE54, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunction, 0x0068);
		}

		// struct FAnimBlueprintFunctionData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunctionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, OutputPoseNodeProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputPoseNodeProperties, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputProperties, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunctionData, 0x0040);
		}

		// struct FSmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_0DA1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x000C);
		}

		// struct FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0018);
		}

		// struct FKeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_POUE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0060);
		}

		// struct FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_O0KO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0068);
		}

		// struct FRealCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__RealCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PreInfinityExtrap, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PostInfinityExtrap, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, UnknownData_X7UG, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRealCurve, 0x0070);
		}

		// struct FRichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_QGPF, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// struct FRichCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0080);
		}

		// struct FFloatCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0098);
		}

		// struct FRawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// struct FAnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_XFV3, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// struct FAnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// struct FAnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x000C);
		}

		// struct FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_VVPN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SlotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_2FGP, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// struct FCompositeSection : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, StartTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_PUE6, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, MetaData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0058);
		}

		// struct FBranchingPoint : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0040);
		}

		// struct FBranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_YN26, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// struct FTimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// struct FFilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// struct FBuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// struct FParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_9T7W, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// struct FCollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// struct FBodyInstance : public FBodyInstanceCore
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_Q12G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_NL7D, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_CHOR, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_B8CS, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_WN0L, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_RGRW, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_WDMH, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_TVHY, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0158);
		}

		// struct FVertexOffsetUsage
		TEST_METHOD(ScriptStruct__Engine__VertexOffsetUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexOffsetUsage, Usage, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexOffsetUsage, 0x0004);
		}

		// struct FSkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_CU0T, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0048);
		}

		// struct FMeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_YK6S, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// struct FBoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_TTEF, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// struct FPerPlatformFloat
		TEST_METHOD(ScriptStruct__Engine__PerPlatformFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformFloat, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformFloat, 0x0004);
		}

		// struct FSkeletalMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, UnknownData_LSV1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdPosition, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdTangentNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, MorphThresholdPosition, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshBuildSettings, 0x0014);
		}

		// struct FSkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TerminationCriterion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_WODU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfVertPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfTriangles, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfVerts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_0SJE, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_YODI, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, VolumeImportance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_ZY7A, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x003C);
		}

		// struct FBoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_3HYC, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0010);
		}

		// struct FPerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__PerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformInt, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformInt, 0x0004);
		}

		// struct FPerPlatformBool
		TEST_METHOD(ScriptStruct__Engine__PerPlatformBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformBool, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformBool, 0x0001);
		}

		// struct FSkeletalMeshSamplingRegionMaterialFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionMaterialFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionMaterialFilter, MaterialName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionMaterialFilter, 0x0008);
		}

		// struct FSkeletalMeshSamplingRegionBoneFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, UnknownData_4JT5, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshSamplingLODBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingLODBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingLODBuiltData, UnknownData_TMOC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingLODBuiltData, 0x0048);
		}

		// struct FSkeletalMeshSamplingRegionBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBuiltData, UnknownData_1WV8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBuiltData, 0x0078);
		}

		// struct FSkinWeightProfileInfo
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfile, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, UnknownData_ZN3A, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfileFromLODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileInfo, 0x0010);
		}

		// struct FRootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_Y6WS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_1LNJ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// struct FBlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// struct FSkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_AWXL, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0028);
		}

		// struct FRootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// struct FVector_NetQuantize10 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// struct FRootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_P3J8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_2A2F, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x0038);
		}

		// struct FPerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0014);
		}

		// struct FSkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BuildSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToPrioritize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, WeightOfPrioritization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_DMXG, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePoseOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SkinCacheUsage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_3QDD, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x00B8);
		}

		// struct FInstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0040);
		}

		// struct FRuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0088);
		}

		// struct FSoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendStage, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_SAPV, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_OX2G, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, CustomSendLevelCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x00B0);
		}

		// struct FAudioVolumeSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AudioVolumeSubmixSendSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, ListenerLocationState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, SourceLocationState, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, UnknownData_Z5R7, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, SubmixSends, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioVolumeSubmixSendSettings, 0x0018);
		}

		// struct FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_F7S7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, RestOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, Name, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_GJE7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, CollisionEnabled, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_E9BZ, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0030);
		}

		// struct FKSphylElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0050);
		}

		// struct FFOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Waveform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_DTFU, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// struct FROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// struct FNavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_YMC7, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// struct FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_CS84, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_OQBU, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_QVUU, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_7SJ2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0030);
		}

		// struct FNavigationLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0048);
		}

		// struct FParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_OSPA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_YEO1, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// struct FSkeletalMeshSamplingRegion
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, UnknownData_A2OU, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, MaterialFilters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, BoneFilters, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegion, 0x0030);
		}

		// struct FIntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// struct FIntegralCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_JY82, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0080);
		}

		// struct FBakedIntegerCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedIntegerCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedIntegerCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedIntegerCustomAttribute, IntCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedIntegerCustomAttribute, 0x0088);
		}

		// struct FImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// struct FEditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// struct FBuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// struct FBlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// struct FVOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// struct FCustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x000C);
		}

		// struct FRedirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// struct FMaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// struct FMaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// struct FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// struct FCollectionVectorParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// struct FInterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, Actors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0018);
		}

		// struct FCameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// struct FPurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// struct FNavigationSegmentLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0060);
		}

		// struct FNetworkEmulationProfileDescription
		TEST_METHOD(ScriptStruct__Engine__NetworkEmulationProfileDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ToolTip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetworkEmulationProfileDescription, 0x0020);
		}

		// struct FBeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_LYUE, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// struct FSkeletalMeshSamplingBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, RegionBuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingBuiltData, 0x0020);
		}

		// struct FSkeletalMeshSamplingInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, Regions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, BuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingInfo, 0x0030);
		}

		// struct FGeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// struct FSplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Version, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, UnknownData_Q60O, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0070);
		}

		// struct FSoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_5ZWH, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_VMCG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, RetriggerTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_1WH5, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleAttackTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_MLK6, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleReleaseTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VoiceStealReleaseTime, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0028);
		}

		// struct FSoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SourceBusSendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_F5W7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, AudioBus, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_FGC0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, CustomSendLevelCurve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x00B8);
		}

		// struct FDirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// struct FPrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, Priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_17RD, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x000C);
		}

		// struct FPrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_581S, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_7MPU, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_OMNL, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0088);
		}

		// struct FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_TLG6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_K0DU, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_4RWQ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00B0);
		}

		// struct FSoundAttenuationPluginSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, ReverbPluginSettingsArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationPluginSettings, 0x0030);
		}

		// struct FAttenuationSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AttenuationSubmixSendSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, UnknownData_3ZZJ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMin, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, ManualSubmixSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, CustomSubmixSendCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttenuationSubmixSendSettings, 0x00A8);
		}

		// struct FSoundAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_OISR, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, BinauralRadius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMethod, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_KS7R, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SubmixSendSettings, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMin, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMax, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMin, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMax, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualPriorityAttenuation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_BTGS, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomPriorityAttenuationCurve, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PluginSettings, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x03A0);
		}

		// struct FSingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_EOTM, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_JL6E, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// struct FAnimNotifyEventReference
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEventReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, UnknownData_CIII, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, NotifySource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEventReference, 0x0010);
		}

		// struct FAnimNotifyEvent : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_V0X0, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_3V2J, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_8CS9, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnFollower, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_CRXG, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_CW7E, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00B8);
		}

		// struct FAudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_J5JG, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_W2HN, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// struct FRepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_7P3D, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_L6GS, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_G0H7, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0098);
		}

		// struct FSimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_1TXJ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x00A0);
		}

		// struct FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0001);
		}

		// struct FNavAgentProperties : public FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_SA8A, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_G9DM, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0030);
		}

		// struct FNavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_1D1C, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0030);
		}

		// struct FStaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_80H6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x0090);
		}

		// struct FStreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// struct FLightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_214Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// struct FInstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_0BEZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// struct FLightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_V2HH, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0010);
		}

		// struct FMaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0010);
		}

		// struct FMaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0008);
		}

		// struct FStaticComponentMaskParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, R, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, G, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, B, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, A, 0x0027);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskParameter, 0x0028);
		}

		// struct FStaticTerrainLayerWeightParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticTerrainLayerWeightParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, WeightmapIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bWeightBasedBlend, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_DBGY, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticTerrainLayerWeightParameter, 0x002C);
		}

		// struct FMaterialLayersFunctions
		TEST_METHOD(ScriptStruct__Engine__MaterialLayersFunctions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Layers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Blends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, LayerStates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, KeyString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialLayersFunctions, 0x0040);
		}

		// struct FKBoxElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_BMMO, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0058);
		}

		// struct FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x000C);
		}

		// struct FCustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, UnknownData_THNV, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x001C);
		}

		// struct FChildActorAttachedActorInfo
		TEST_METHOD(ScriptStruct__Engine__ChildActorAttachedActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, SocketName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, RelativeTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorAttachedActorInfo, 0x0040);
		}

		// struct FSceneComponentInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SceneComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneComponentInstanceData, AttachedInstanceComponents, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneComponentInstanceData, 0x00B8);
		}

		// struct FChildActorComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ChildActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, AttachedActors, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, UnknownData_GH4D, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorComponentInstanceData, 0x00E8);
		}

		// struct FAutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_7SXR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_R9CF, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// struct FRuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x0208);
		}

		// struct FNamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x000C);
		}

		// struct FCurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// struct FEdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// struct FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_5O72, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SearchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// struct FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// struct FAnimNotifyArray
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyArray, Notifies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyArray, 0x0010);
		}

		// struct FAnimNotifyQueue
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnknownData_J1TH, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, AnimNotifies, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnfilteredMontageAnimNotifies, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyQueue, 0x0070);
		}

		// struct FStaticMaterialLayersParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticMaterialLayersParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_REQ5, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, Value, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterialLayersParameter, 0x0068);
		}

		// struct FStaticParameterSet
		TEST_METHOD(ScriptStruct__Engine__StaticParameterSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticSwitchParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticComponentMaskParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, TerrainLayerWeightParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, MaterialLayersParameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterSet, 0x0040);
		}

		// struct FBasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_2KMS, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// struct FPrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x001C);
		}

		// struct FPrimaryAssetRulesCustomOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesCustomOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterDirectory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, Rules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, UnknownData_IG5R, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesCustomOverride, 0x0038);
		}

		// struct FRigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_9G6J, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0010);
		}

		// struct FTransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// struct FTransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// struct FNetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// struct FVectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0020);
		}

		// struct FAnimNode_SingleNode : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_MRG0, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0030);
		}

		// struct FAnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_X5UU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// struct FAnimationState : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// struct FAnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_VDAC, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0038);
		}

		// struct FPerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// struct FAssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_X3HY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// struct FAtmospherePrecomputeInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeInstanceData, UnknownData_4V37, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeInstanceData, 0x0160);
		}

		// struct FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEffectParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEffectParameters, UnknownData_SQ5L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEffectParameters, 0x0008);
		}

		// struct FAudioReverbEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioReverbEffect, UnknownData_BQ8R, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioReverbEffect, 0x0048);
		}

		// struct FNavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_EYWU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// struct FGridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// struct FBPEditorBookmarkNode
		TEST_METHOD(ScriptStruct__Engine__BPEditorBookmarkNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, NodeGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, ParentGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, DisplayName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPEditorBookmarkNode, 0x0038);
		}

		// struct FEditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_1FSL, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0030);
		}

		// struct FBPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// struct FEdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsUObjectWrapper, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_F1U8, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x001C);
		}

		// struct FEdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_IMLG, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0058);
		}

		// struct FBPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// struct FBPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_TXWW, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00D0);
		}

		// struct FBlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_GHHX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// struct FCompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, bExcludeMonolithicHeaders, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_OKKP, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// struct FEventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_5AUW, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// struct FBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_0HTA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// struct FPointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_TUK6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0008);
		}

		// struct FDebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_SYW9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0190);
		}

		// struct FNodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_IA2Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// struct FAnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_VZS9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// struct FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkBaseJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmarkBaseJumpToSettings, UnknownData_HVRX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkBaseJumpToSettings, 0x0001);
		}

		// struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkJumpToSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkJumpToSettings, 0x0001);
		}

		// struct FBookmark2DJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__Bookmark2DJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmark2DJumpToSettings, UnknownData_NGS0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmark2DJumpToSettings, 0x0001);
		}

		// struct FCachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_GTVE, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0024);
		}

		// struct FCachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_D93U, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x001C);
		}

		// struct FCachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_VR19, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0018);
		}

		// struct FCachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_MZDS, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x001C);
		}

		// struct FCachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_VIOO, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// struct FCameraShakeDuration
		TEST_METHOD(ScriptStruct__Engine__CameraShakeDuration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, Type, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, UnknownData_S33G, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeDuration, 0x0008);
		}

		// struct FCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__CameraShakeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, BlendIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, BlendOut, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeInfo, 0x0010);
		}

		// struct FCameraShakeUpdateResult
		TEST_METHOD(ScriptStruct__Engine__CameraShakeUpdateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeUpdateResult, UnknownData_SVPF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeUpdateResult, 0x0020);
		}

		// struct FCameraShakeUpdateParams
		TEST_METHOD(ScriptStruct__Engine__CameraShakeUpdateParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeUpdateParams, UnknownData_Z6WN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeUpdateParams, 0x05F0);
		}

		// struct FDummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_BU09, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// struct FCanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// struct FWrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// struct FTextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// struct FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterNetworkSerializationPackedBits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterNetworkSerializationPackedBits, UnknownData_CS6I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterNetworkSerializationPackedBits, 0x0098);
		}

		// struct FCharacterMoveResponsePackedBits : public FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterMoveResponsePackedBits)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMoveResponsePackedBits, 0x0098);
		}

		// struct FCharacterServerMovePackedBits : public FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterServerMovePackedBits)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterServerMovePackedBits, 0x0098);
		}

		// struct FGraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// struct FRootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// struct FRootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_A093, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// struct FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_8U94, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_5N9U, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, StartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Duration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Settings, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_AVKF, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_FZL0, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x0098);
		}

		// struct FRootMotionSource_RadialForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_MQJ6, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_M452, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_94HH, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// struct FRootMotionSource_ConstantForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, Force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_HGS4, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// struct FCameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_L04D, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, BiasCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MeterMask, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, CalibrationConstant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_XXQA, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x0040);
		}

		// struct FGaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// struct FConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_ZE3T, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// struct FLensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_FZRC, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_7Q2P, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// struct FLensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_MK0C, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// struct FLensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_BJMR, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// struct FFilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// struct FColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// struct FColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_0YW5, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// struct FSceneViewExtensionIsActiveFunctor
		TEST_METHOD(ScriptStruct__Engine__SceneViewExtensionIsActiveFunctor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneViewExtensionIsActiveFunctor, UnknownData_3N7M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneViewExtensionIsActiveFunctor, 0x0050);
		}

		// struct FClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// struct FScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0024);
		}

		// struct FTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0028);
		}

		// struct FVectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0030);
		}

		// struct FBuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// struct FBuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// struct FMaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// struct FRuntimeVirtualTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__RuntimeVirtualTextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeVirtualTextureParameterValue, 0x0028);
		}

		// struct FStatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// struct FStatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_4XDC, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// struct FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_RQPS, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_N330, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_VS3E, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_XEAC, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// struct FInputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_6OYU, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// struct FInputActionSpeechMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionSpeechMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, SpeechKeyword, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionSpeechMapping, 0x0010);
		}

		// struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_BZIA, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// struct FCurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_MCRC, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// struct FCurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// struct FInterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_SIP1, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// struct FAnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_WNTU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_E7A6, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// struct FBoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_7RWO, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// struct FDirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0014);
		}

		// struct FEventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x000C);
		}

		// struct FPrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_CWUQ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// struct FInterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x000C);
		}

		// struct FParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// struct FSoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_MZRY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// struct FToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_VHIS, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// struct FVisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_3UCO, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// struct FLayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_7CUF, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// struct FReplicatedStaticActorDestructionInfo
		TEST_METHOD(ScriptStruct__Engine__ReplicatedStaticActorDestructionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, UnknownData_Z30Y, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, ObjClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedStaticActorDestructionInfo, 0x0038);
		}

		// struct FStreamingLevelsToConsider
		TEST_METHOD(ScriptStruct__Engine__StreamingLevelsToConsider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, StreamingLevels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, UnknownData_L2OI, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingLevelsToConsider, 0x0028);
		}

		// struct FLevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_26GI, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, GameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0078);
		}

		// struct FPSCPoolElem
		TEST_METHOD(ScriptStruct__Engine__PSCPoolElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, PSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, UnknownData_QZMU, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPoolElem, 0x0010);
		}

		// struct FPSCPool
		TEST_METHOD(ScriptStruct__Engine__PSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, UnknownData_BS80, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPool, 0x0038);
		}

		// struct FWorldPSCPool
		TEST_METHOD(ScriptStruct__Engine__WorldPSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, WorldParticleSystemPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, UnknownData_2G18, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldPSCPool, 0x0058);
		}

		// struct FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_1598, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// struct FLightmassPointLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// struct FComponentSync
		TEST_METHOD(ScriptStruct__Engine__ComponentSync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, SyncOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, UnknownData_6BKG, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSync, 0x000C);
		}

		// struct FLODMappingData
		TEST_METHOD(ScriptStruct__Engine__LODMappingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODMappingData, Mapping, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODMappingData, InverseMapping, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODMappingData, 0x0020);
		}

		// struct FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x000C);
		}

		// struct FScalarMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x000C);
		}

		// struct FVectorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x000C);
		}

		// struct FColorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x000C);
		}

		// struct FMaterialShadingModelField
		TEST_METHOD(ScriptStruct__Engine__MaterialShadingModelField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialShadingModelField, ShadingModelField, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialShadingModelField, 0x0002);
		}

		// struct FMaterialAttributesInput : public FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0010);
		}

		// struct FShadingModelMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ShadingModelMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShadingModelMaterialInput, 0x000C);
		}

		// struct FMaterialCachedParameterEntry
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameterEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, NameHashes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ParameterInfos, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ExpressionGuids, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, Overrides, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameterEntry, 0x0040);
		}

		// struct FMaterialCachedParameters
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeEntries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, ScalarValues, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, VectorValues, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, TextureValues, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontValues, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontPageValues, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeVirtualTextureValues, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameters, 0x01A0);
		}

		// struct FMaterialCachedExpressionData
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedExpressionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, Parameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ReferencedTextures, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, FunctionInfos, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ParameterCollectionInfos, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayers, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayerBlends, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, GrassTypes, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DynamicParameterNames, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, QualityLevelsUsed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, UnknownData_7NAA, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedExpressionData, 0x0228);
		}

		// struct FMaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_YWCW, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_Q7GK, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// struct FAnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupScope, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_210M, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x000C);
		}

		// struct FAnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_HS9V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0070);
		}

		// struct FAnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_7IVB, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// struct FMarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x0014);
		}

		// struct FBlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_FMFZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0078);
		}

		// struct FBlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_5RVH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_GBPQ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// struct FAnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_XEA7, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_HQWT, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordTransforms, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordCurves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_FL8O, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0014);
		}

		// struct FComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// struct FLocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// struct FNamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_QLM4, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// struct FNamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x000C);
		}

		// struct FNamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Name, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0014);
		}

		// struct FNamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x000C);
		}

		// struct FAnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// struct FAnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_OIHR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// struct FAnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_N8OJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// struct FStateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_HVT2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// struct FStateMachineStateDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineStateDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineStateDebugData, UnknownData_WW71, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineStateDebugData, 0x0010);
		}

		// struct FRootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// struct FAnimationErrorStats
		TEST_METHOD(ScriptStruct__Engine__AnimationErrorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationErrorStats, UnknownData_LKZC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationErrorStats, 0x0010);
		}

		// struct FVectorCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x0198);
		}

		// struct FTransformCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x04E0);
		}

		// struct FSlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_SCNQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_VB64, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x00E0);
		}

		// struct FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// struct FA2CSPose : public FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_O0IU, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// struct FAnimNode_LinkedInputPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedInputPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Graph, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, InputPose, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, UnknownData_HFHZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedInputPose, 0x0118);
		}

		// struct FAnimNode_SaveCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_DX2K, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x0158);
		}

		// struct FInputRange
		TEST_METHOD(ScriptStruct__Engine__InputRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRange, 0x0008);
		}

		// struct FInputScaleBiasClamp
		TEST_METHOD(ScriptStruct__Engine__InputScaleBiasClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bMapRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bClampResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInterpResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_97FJ, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, OutRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Bias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedIncreasing, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedDecreasing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_D2EN, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBiasClamp, 0x0030);
		}

		// struct FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateBasis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateScaleBiasClamp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_B2QM, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x0080);
		}

		// struct FAnimNode_StateMachine : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_66MR, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00B0);
		}

		// struct FAnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_OG6D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// struct FAnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_SXTD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_YB99, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00C8);
		}

		// struct FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_DN75, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_S945, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_T6CI, 0x00F2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x00F8);
		}

		// struct FAnimNode_TransitionResult : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_Q85O, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0028);
		}

		// struct FAnimNode_UseCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0028);
		}

		// struct FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0020);
		}

		// struct FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0020);
		}

		// struct FCompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// struct FCurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// struct FScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// struct FRotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// struct FTranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// struct FRawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// struct FAnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_VMRM, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x08B0);
		}

		// struct FPaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0020);
		}

		// struct FStaticMeshVertexColorLODData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshVertexColorLODData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, PaintedVertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, VertexBufferColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, UnknownData_XPE5, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshVertexColorLODData, 0x0028);
		}

		// struct FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_RG3Y, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, ComponentTransform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, VisibilityId, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_PWYI, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, LODParent, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentInstanceData, 0x0100);
		}

		// struct FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StaticMesh, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, VertexColorLODs, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, CachedStaticLighting, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StreamingTextureData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, UnknownData_38C1, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentInstanceData, 0x0140);
		}

		// struct FTextureFormatSettings
		TEST_METHOD(ScriptStruct__Engine__TextureFormatSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureFormatSettings, CompressionSettings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureFormatSettings, 0x0002);
		}

		// struct FTexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_V7PS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0030);
		}

		// struct FTextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_OGCQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0038);
		}

		// struct FTextureSourceBlock
		TEST_METHOD(ScriptStruct__Engine__TextureSourceBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeX, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumSlices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumMips, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSourceBlock, 0x0018);
		}

		// struct FStreamingRenderAssetPrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingRenderAssetPrimitiveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, RenderAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, UnknownData_84UF, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingRenderAssetPrimitiveInfo, 0x0030);
		}

		// struct FTTTrackId
		TEST_METHOD(ScriptStruct__Engine__TTTrackId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackId, TrackType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackId, TrackIndex, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackId, 0x0008);
		}

		// struct FTimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_AHGK, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// struct FUpdateLevelVisibilityLevelInfo
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelVisibilityLevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, Filename, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, UnknownData_UCVV, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelVisibilityLevelInfo, 0x0014);
		}

		// struct FEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_7VNS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0030);
		}

		// struct FStartPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_C8XI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0030);
		}

		// struct FLevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_KCY2, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// struct FLightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_K9W6, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapSphericalHarmonicSmoothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x004C);
		}

		// struct FFontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_U2AY, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0030);
		}

		// struct FInputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// struct FInputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_76G4, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// struct FInterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// struct FLocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0014);
		}

		// struct FBPComponentClassOverride
		TEST_METHOD(ScriptStruct__Engine__BPComponentClassOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPComponentClassOverride, 0x0010);
		}

		// struct FBlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, UnknownData_63NI, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// struct FBlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_PP3K, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bHasValidCookedData, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_AJHM, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0048);
		}

		// struct FWeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_YH0D, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// struct FWeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// struct FPostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_1L67, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_HSMS, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_3DXO, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_CSMP, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_09DO, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_WYBM, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BlueCorrection, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ExpandGamut, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ToneCurveAmount, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ChromaticAberrationStartOffset, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_RW6K, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraShutterSpeed, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraISO, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMinFstop, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBladeCount, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasBackup, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_SVTI, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_MMR8, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasCurve, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMeterMask, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureCalibrationConstant, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_XB4U, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionTemporalBlendWeight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_TSQ4, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOSamplesPerPixel, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOIntensity, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAORadius, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIType, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_4BR3, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIMaxBounces, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGISamplesPerPixel, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurTargetFPS, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ReflectionsType, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_9I1K, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxRoughness, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxBounces, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsSamplesPerPixel, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsShadows, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, TranslucencyType, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_ID0W, 0x0517);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyMaxRoughness, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyRefractionRays, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencySamplesPerPixel, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyShadows, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_ZNNR, 0x0526);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingMaxBounces, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingSamplesPerPixel, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_D0QZ, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x0550);
		}

		// struct FSoundWaveSpectralDataEntry
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, Magnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, NormalizedMagnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataEntry, 0x0008);
		}

		// struct FSoundWaveEnvelopeTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, TimeSec, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeTimeData, 0x0008);
		}

		// struct FSubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_ZI4I, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// struct FHardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0010);
		}

		// struct FMaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_3TFY, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TangentTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x0088);
		}

		// struct FMeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, VoxelSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnresolvedGeometryColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaxRayCastDist, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, NormalCalculationMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x00A8);
		}

		// struct FMeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, OutputUVs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, GutterSize, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_SMTD, 0x009F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x00A0);
		}

		// struct FHierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, OverrideDrawDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_SD4Z, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x0160);
		}

		// struct FDepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_68M9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// struct FFontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_GWUW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// struct FComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, PathToComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_9F5O, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0028);
		}

		// struct FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_2AQU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// struct FRadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// struct FRadialDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// struct FPointDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, UnknownData_51H8, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00B0);
		}

		// struct FMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_RZ74, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_RZNC, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0030);
		}

		// struct FPOV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// struct FAnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_PLF5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_XAAN, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_CJQI, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedUpdateFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedEvalFrames, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x0088);
		}

		// struct FAnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x000C);
		}

		// struct FAnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// struct FMTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// struct FOverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_3CSH, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_J40U, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// struct FSwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_O7R2, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// struct FLightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_25DH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_ARSQ, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// struct FBasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// struct FFractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// struct FRigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_JRGX, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// struct FCollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, bIsVelocityDeltaUnderThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, UnknownData_AA02, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0030);
		}

		// struct FRigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_ADSV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_K8EP, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// struct FForceFeedbackParameters
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bLooping, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bIgnoreTimeDilation, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bPlayWhilePaused, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, UnknownData_H0UW, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackParameters, 0x000C);
		}

		// struct FPredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// struct FSoundWaveSpectralTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, Data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, TimeSec, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, UnknownData_L023, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralTimeData, 0x0018);
		}

		// struct FBakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_ZSQW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// struct FTimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_E7JS, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// struct FTrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// struct FStringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_RNSU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// struct FSimpleCurveKey
		TEST_METHOD(ScriptStruct__Engine__SimpleCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurveKey, 0x0008);
		}

		// struct FSimpleCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__SimpleCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, InterpMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, UnknownData_Y1Y1, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurve, 0x0088);
		}

		// struct FBakedFloatCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedFloatCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedFloatCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedFloatCustomAttribute, FloatCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedFloatCustomAttribute, 0x0090);
		}

		// struct FStringCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0088);
		}

		// struct FBakedStringCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedStringCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStringCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStringCustomAttribute, StringCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStringCustomAttribute, 0x0090);
		}

		// struct FBakedCustomAttributePerBoneData
		TEST_METHOD(ScriptStruct__Engine__BakedCustomAttributePerBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, BoneTreeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, UnknownData_QG4S, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, StringAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, IntAttributes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, FloatAttributes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedCustomAttributePerBoneData, 0x0038);
		}

		// struct FAnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// struct FAssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// struct FAssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// struct FAtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// struct FAudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_2R3V, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// struct FReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, bApplyReverb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_06IT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbPluginEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0020);
		}

		// struct FInteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, bIsWorldSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_AC3W, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// struct FAudioVolumeSubmixOverrideSettings
		TEST_METHOD(ScriptStruct__Engine__AudioVolumeSubmixOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, SubmixEffectChain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, CrossfadeTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, UnknownData_JMXH, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioVolumeSubmixOverrideSettings, 0x0020);
		}

		// struct FEditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_Y2H7, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0020);
		}

		// struct FLaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// struct FBandwidthTestItem
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestItem, Kilobyte, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestItem, 0x0010);
		}

		// struct FBandwidthTestGenerator
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, ReplicatedBuffers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, UnknownData_WL5D, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestGenerator, 0x0020);
		}

		// struct FBoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_7EGT, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// struct FVirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0018);
		}

		// struct FSmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_FV77, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// struct FAnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// struct FBlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0014);
		}

		// struct FKTaperedCapsuleElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KTaperedCapsuleElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Length, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, UnknownData_LGQQ, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKTaperedCapsuleElem, 0x0058);
		}

		// struct FKSphereElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0040);
		}

		// struct FKConvexElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, IndexData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_GFIB, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_OKKX, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x00B0);
		}

		// struct FKAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, TaperedCapsuleElems, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_ATAV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0058);
		}

		// struct FBranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x000C);
		}

		// struct FInputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// struct FBuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0020);
		}

		// struct FActiveCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__ActiveCameraShakeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeInstance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeSource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveCameraShakeInfo, 0x0010);
		}

		// struct FPooledCameraShakes
		TEST_METHOD(ScriptStruct__Engine__PooledCameraShakes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPooledCameraShakes, PooledShakes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPooledCameraShakes, 0x0010);
		}

		// struct FDelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// struct FCollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_7Z2P, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_BJFX, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_945R, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0048);
		}

		// struct FDropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// struct FNodeItem
		TEST_METHOD(ScriptStruct__Engine__NodeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, ParentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, UnknownData_2WOF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeItem, 0x0040);
		}

		// struct FSoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LowPassFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, AttenuationDistanceScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_0AUJ, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_Y9NB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, ModulationSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LoadingBehavior, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_60GC, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, DefaultSubmix, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x0080);
		}

		// struct FPassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// struct FVector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0020);
		}

		// struct FFloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// struct FVectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// struct FFormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_SH8E, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_91Z5, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// struct FExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0008);
		}

		// struct FVector2MaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x000C);
		}

		// struct FBranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_N813, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// struct FPlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_H9PU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_0DMX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// struct FPlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_RTW7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// struct FDebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_74MB, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// struct FLatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// struct FTimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// struct FCollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x0008);
		}

		// struct FGenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// struct FUserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_G0YI, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// struct FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__Engine__KeyHandleLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleLookupTable, UnknownData_7LHP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleLookupTable, 0x0060);
		}

		// struct FExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, Function, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, ValueHandlerNodeProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_UYBH, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0050);
		}

		// struct FCollectionScalarParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x001C);
		}

		// struct FAudioEQEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_W9KQ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0040);
		}

		// struct FSoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, LowPassFilterFrequency, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_MWJC, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_E2MC, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0020);
		}

		// struct FQueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_E137, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_38CY, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, LifeTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// struct FAnimInstanceSubsystemData
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceSubsystemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceSubsystemData, UnknownData_00ZV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceSubsystemData, 0x0001);
		}

		// struct FAnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_646S, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_OGCG, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_VJML, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_516M, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Position, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Blend, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_CU5Q, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_M9X5, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x01B0);
		}

		// struct FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_398N, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_HAM1, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBiasClamp, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_M1U0, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x00D0);
		}

		// struct FScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_9EPD, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// struct FURL
		TEST_METHOD(ScriptStruct__Engine__URL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Valid, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0068);
		}

		// struct FFullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_MGHK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// struct FLevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_9ZI9, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// struct FNamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_78YZ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// struct FWorldContext
		TEST_METHOD(ScriptStruct__Engine__WorldContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_4QV6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_LOJX, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_5NYS, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_MEIS, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0288);
		}

		// struct FExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, FixedEV100, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_V5SM, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// struct FTickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_U93V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// struct FCanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// struct FMarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_3XHR, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// struct FSlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// struct FDialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// struct FDialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// struct FExponentialHeightFogData
		TEST_METHOD(ScriptStruct__Engine__ExponentialHeightFogData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightFalloff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExponentialHeightFogData, 0x000C);
		}

		// struct FFontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_DGSL, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// struct FFontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_CAZ1, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_IYD0, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_6THB, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_4WIO, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_5HQA, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_U010, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_76SG, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00B0);
		}

		// struct FForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_R5M2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0090);
		}

		// struct FHapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Amplitude, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x0110);
		}

		// struct FHLODProxyMesh
		TEST_METHOD(ScriptStruct__Engine__HLODProxyMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, LODActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_YS7M, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, StaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, Key, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODProxyMesh, 0x0030);
		}

		// struct FComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0020);
		}

		// struct FComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0078);
		}

		// struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_H4P3, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0018);
		}

		// struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0014);
		}

		// struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_TGGF, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// struct FCachedKeyToActionInfo
		TEST_METHOD(ScriptStruct__Engine__CachedKeyToActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, PlayerInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, UnknownData_G3WV, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedKeyToActionInfo, 0x0070);
		}

		// struct FInputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_XMW4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// struct FCustomOutput
		TEST_METHOD(ScriptStruct__Engine__CustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, OutputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, OutputType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, UnknownData_NRIY, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomOutput, 0x000C);
		}

		// struct FCustomDefine
		TEST_METHOD(ScriptStruct__Engine__CustomDefine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomDefine, 0x0020);
		}

		// struct FSourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, Preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_RR40, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// struct FSoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_0R1Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_WEE3, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// struct FDialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// struct FDistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// struct FModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_2BM6, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// struct FSplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// struct FStaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, ImportedMaterialSlotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_1YGG, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0030);
		}

		// struct FEquirectProps
		TEST_METHOD(ScriptStruct__Engine__EquirectProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftUVRect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightUVRect, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightBias, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquirectProps, 0x0048);
		}

		// struct FSubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SurfaceAlbedo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, WorldUnitScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, bEnableBurley, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, UnknownData_V0LQ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, BoundaryColorBleed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ExtinctionScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, NormalScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatteringDistribution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, IOR, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, LobeMix, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, TransmissionTintColor, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x008C);
		}

		// struct FTimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0014);
		}

		// struct FTimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_2ODP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0040);
		}

		// struct FTimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_570L, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0040);
		}

		// struct FTimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_8QNK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0040);
		}

		// struct FTimeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_JEAD, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_CE5L, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x0098);
		}

		// struct FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_VP5W, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_KXDE, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0018);
		}

		// struct FTTEventTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0028);
		}

		// struct FTTPropertyTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTPropertyTrack, PropertyName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTPropertyTrack, 0x0020);
		}

		// struct FTTFloatTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0028);
		}

		// struct FTTVectorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0028);
		}

		// struct FTTLinearColorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0028);
		}

		// struct FTouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// struct FVirtualTextureBuildSettings
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileBorderSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressCrunch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressZlib, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, UnknownData_1BGH, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureBuildSettings, 0x000C);
		}

		// struct FVirtualTextureSpacePoolConfig
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureSpacePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MinTileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MaxTileSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, Formats, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, SizeInMegabyte, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, bAllowSizeScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_JZ51, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, ScalabilityGroup, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_BM6B, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureSpacePoolConfig, 0x0028);
		}

		// struct FVoiceSettings
		TEST_METHOD(ScriptStruct__Engine__VoiceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, ComponentToAttachTo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, AttenuationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, SourceEffectChain, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceSettings, 0x0018);
		}

		// struct FPreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0038);
		}

		// struct FPreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// struct FSpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0038);
		}

		// struct FQuartzPulseOverrideStep
		TEST_METHOD(ScriptStruct__Engine__QuartzPulseOverrideStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, NumberOfPulses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, PulseDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, UnknownData_K1GY, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzPulseOverrideStep, 0x0008);
		}

		// struct FClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_DUFZ, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_9IHH, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0078);
		}

		// struct FSkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_BMXJ, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_MFJ1, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0058);
		}

		// struct FBoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_NDSA, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0014);
		}

		// struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_A2BO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0030);
		}

		// struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_K9JB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0030);
		}

		// struct FNameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// struct FRigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// struct FBoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// struct FParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// struct FCustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// struct FBlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// struct FGameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0010);
		}

		// struct FClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_B8FH, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x003C);
		}

		// struct FPluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// struct FStructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0010);
		}

		// struct FNetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0018);
		}

		// struct FDebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_OIVH, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// struct FCullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// struct FDebugCameraControllerSettingsViewModeIndex
		TEST_METHOD(ScriptStruct__Engine__DebugCameraControllerSettingsViewModeIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_5LUX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, ViewModeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_6450, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugCameraControllerSettingsViewModeIndex, 0x0010);
		}

		// struct FDebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_WML7, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_IFCR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_V24J, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// struct FRollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_KE22, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_4SRP, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Level, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_DPZZ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, ObjReferences, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x00B0);
		}

		// struct FMulticastRecordOptions
		TEST_METHOD(ScriptStruct__Engine__MulticastRecordOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, FuncPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bServerSkip, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bClientSkip, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, UnknownData_Q2Z7, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMulticastRecordOptions, 0x0018);
		}

		// struct FTextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_FD5M, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smaller, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smallest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_VEI8, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_UVK6, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smaller, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smallest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalLODBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalMaxLODSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_M01Z, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipLoadOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DuplicateNonOptionalMips, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_4MYW, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Downscale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DownscaleOptions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_BEXF, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, VirtualTextureTileCountBias, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, VirtualTextureTileSizeBias, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x0064);
		}

		// struct FOrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_L3S3, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// struct FEmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_0A9R, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_6RVJ, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_888M, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0048);
		}

		// struct FParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// struct FGPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_WRAK, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_03M3, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_B9AW, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// struct FParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_WDLP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// struct FLODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// struct FNamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// struct FQuartzTimeSignature
		TEST_METHOD(ScriptStruct__Engine__QuartzTimeSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, NumBeats, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, BeatType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, UnknownData_LN1X, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, OptionalPulseOverride, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzTimeSignature, 0x0018);
		}

		// struct FQuartzClockSettings
		TEST_METHOD(ScriptStruct__Engine__QuartzClockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, TimeSignature, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, bIgnoreLevelChange, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, UnknownData_260Y, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzClockSettings, 0x0020);
		}

		// struct FQuartzQuantizationBoundary
		TEST_METHOD(ScriptStruct__Engine__QuartzQuantizationBoundary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, Quantization, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, UnknownData_UMKH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, Multiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, CountingReferencePoint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, UnknownData_RLZ1, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzQuantizationBoundary, 0x000C);
		}

		// struct FQuartzTransportTimeStamp
		TEST_METHOD(ScriptStruct__Engine__QuartzTransportTimeStamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTransportTimeStamp, UnknownData_F8PI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzTransportTimeStamp, 0x000C);
		}

		// struct FLevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_2RLP, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// struct FCompressedRichCurve
		TEST_METHOD(ScriptStruct__Engine__CompressedRichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedRichCurve, UnknownData_QS31, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedRichCurve, 0x0018);
		}

		// struct FRootMotionSource_JumpForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_77CM, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_M854, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_BMHJ, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_C8Y3, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// struct FReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// struct FSkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// struct FSkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x003C);
		}

		// struct FSkinWeightProfileManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileManagerTickFunction, UnknownData_S802, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileManagerTickFunction, 0x0030);
		}

		// struct FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedSkyLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, LightGuid, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, AverageBrightness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, UnknownData_2F9M, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedSkyLightInstanceData, 0x0170);
		}

		// struct FSmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_KCPD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0070);
		}

		// struct FCurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_CSBY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0018);
		}

		// struct FSoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_WCEV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// struct FSoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_O5RZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// struct FSoundSubmixSpectralAnalysisBandSettings
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSpectralAnalysisBandSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, BandFrequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, AttackTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, ReleaseTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, QFactor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSpectralAnalysisBandSettings, 0x0010);
		}

		// struct FSoundWaveEnvelopeDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, Envelope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, PlaybackTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, SoundWave, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeDataPerSound, 0x0010);
		}

		// struct FSoundWaveSpectralData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, Magnitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, NormalizedMagnitude, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralData, 0x000C);
		}

		// struct FSoundWaveSpectralDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SpectralData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, PlaybackTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, UnknownData_46ML, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SoundWave, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataPerSound, 0x0020);
		}

		// struct FStreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_S1PA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// struct FSplineInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, bSplineHasBeenEdited, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, UnknownData_9GZC, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurves, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurvesPreUCS, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineInstanceData, 0x01A0);
		}

		// struct FSplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, InputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_W5RH, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// struct FSplineMeshInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartPos, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndPos, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartTangent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndTangent, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshInstanceData, 0x00E8);
		}

		// struct FMaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_G6QL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// struct FAssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_XO8R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// struct FMeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bVisibleInRayTracing, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bForceOpaque, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// struct FMeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// struct FMeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentVertices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TerminationCriterion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_OBTD, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// struct FStaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_0N1H, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, SourceImportFilename, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// struct FStaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_4YWW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_QA75, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_3X4S, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// struct FExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// struct FEditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_WHRQ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// struct FConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_F0XJ, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// struct FLinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_5F97, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// struct FMinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, DesiredFOV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_7K5H, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_SBX4, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_G1AO, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_6XQD, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x05E0);
		}

		// struct FCameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_UFTV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x05F0);
		}

		// struct FTViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_854Y, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_VR03, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x0600);
		}

		// struct FParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_GAMB, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_0VE3, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0080);
		}

		// struct FSolverIterations
		TEST_METHOD(ScriptStruct__Engine__SolverIterations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, FixedTimeStep, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverPushOutIterations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointPushOutIterations, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionPushOutIterations, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverIterations, 0x001C);
		}

		// struct FPhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_T79Q, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0024);
		}

		// struct FPhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x002C);
		}

		// struct FConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// struct FConstraintInstanceBase
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstanceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstanceBase, UnknownData_F0KL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstanceBase, 0x0018);
		}

		// struct FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_9H7B, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// struct FLinearConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, Limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_AFIZ, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// struct FConeConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_X9U1, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// struct FTwistConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_9HF8, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// struct FAngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_GTL7, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// struct FConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearAlpha, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularAlpha, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_KFSV, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x010C);
		}

		// struct FConstraintInstance : public FConstraintInstanceBase
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_ZB94, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_BU64, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01C0);
		}

		// struct FPhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x0114);
		}

		// struct FRigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingExtrapolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingLimit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerLinearDifference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerAngularDifference, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxRestoredStateError, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxLinearHardSnapDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PositionLerp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngleLerp, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearVelocityCoefficient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularVelocityCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationDistanceSq, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSimilarity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x0034);
		}

		// struct FPhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_FRH1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x000C);
		}

		// struct FBroadphaseSettings
		TEST_METHOD(ScriptStruct__Engine__BroadphaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnClient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOuterBounds, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, UnknownData_0C4S, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPBounds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPOuterBounds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPNumSubdivs, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBroadphaseSettings, 0x0040);
		}

		// struct FChaosPhysicsSettings
		TEST_METHOD(ScriptStruct__Engine__ChaosPhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DefaultThreadingModel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadTickMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadBufferMode, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsSettings, 0x0003);
		}

		// struct FEngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, Enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_S64G, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// struct FKeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_9CJU, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// struct FPoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, TrackToBufferIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0070);
		}

		// struct FPoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// struct FPreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0028);
		}

		// struct FCollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x0008);
		}

		// struct FNode
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_HKJZ, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// struct FBoneFilter
		TEST_METHOD(ScriptStruct__Engine__BoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, bExcludeSelf, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, UnknownData_7O05, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, BoneName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneFilterActionOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_GUCG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BonesToPrioritize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, WeightOfPrioritization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_7BUT, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BakePose, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ReductionSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_NOXT, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0080);
		}

		// struct FTentDistribution
		TEST_METHOD(ScriptStruct__Engine__TentDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipAltitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, Width, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTentDistribution, 0x000C);
		}

		// struct FPredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, HitResult, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00B8);
		}

		// struct FPredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, LaunchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_93YS, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_4MC1, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_63NU, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_199L, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// struct FActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_64HJ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// struct FClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MinInstanceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MaxInstanceScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0040);
		}

		// struct FClusterNode_DEPRECATED
		TEST_METHOD(ScriptStruct__Engine__ClusterNode_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode_DEPRECATED, 0x0028);
		}

		// struct FHLODISMComponentDesc
		TEST_METHOD(ScriptStruct__Engine__HLODISMComponentDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, StaticMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, Material, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, Instances, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODISMComponentDesc, 0x0020);
		}

		// struct FImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_D7TL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_O6R4, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// struct FInstancedStaticMeshLightMapInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshLightMapInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, MapBuildDataIds, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshLightMapInstanceData, 0x0040);
		}

		// struct FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, StaticMesh, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, CachedStaticLighting, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMCustomData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_0Y9J, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, InstancingRandomSeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_65RP, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshComponentInstanceData, 0x0150);
		}

		// struct FInterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// struct FCameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// struct FSubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_3X3X, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// struct FSupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_786H, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// struct FVectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_Z83L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// struct FFloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_83SM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// struct FDrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_TLTC, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// struct FLatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_KMD8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x0060);
		}

		// struct FLevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_5IBH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_3DX5, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x0127);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_SUSI, 0x012A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x012C);
		}

		// struct FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_BTME, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// struct FDynamicTextureInstance : public FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_BLVQ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// struct FPrecomputedLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_CG67, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, LightGuid, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, PreviewShadowMapChannel, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_FXZV, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedLightInstanceData, 0x0110);
		}

		// struct FBatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_MPFR, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// struct FBatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_T52Y, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// struct FClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_7YOV, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// struct FParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_K72N, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// struct FStaticComponentMaskValue
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, B, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskValue, 0x0004);
		}

		// struct FParameterChannelNames
		TEST_METHOD(ScriptStruct__Engine__ParameterChannelNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterChannelNames, 0x0060);
		}

		// struct FFunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0020);
		}

		// struct FFunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, UnknownData_LKLA, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0030);
		}

		// struct FScalarParameterAtlasInstanceData
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterAtlasInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, bIsUsedAsAtlasPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, UnknownData_8OA8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Curve, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Atlas, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterAtlasInstanceData, 0x0058);
		}

		// struct FMemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_0X5Y, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// struct FMeshInstancingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshInstancingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ActorClassToUse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, InstanceReplacementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, MeshReplacementMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bSkipMeshesWithVertexColors, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bUseHLODVolumes, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_MDCF, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ISMComponentToUse, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancingSettings, 0x0018);
		}

		// struct FNameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x000C);
		}

		// struct FNameCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0078);
		}

		// struct FNavDataConfig : public FNavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavDataClass, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0078);
		}

		// struct FPacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMaxSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMinSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMax, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLoss, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktJitter, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x0034);
		}

		// struct FFastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_PBYG, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, ArrayReplicationKey, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_1XGN, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, DeltaFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_79FE, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x0108);
		}

		// struct FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// struct FParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// struct FBeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x000C);
		}

		// struct FParticleSystemWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemWorldManagerTickFunction, UnknownData_NSW5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemWorldManagerTickFunction, 0x0030);
		}

		// struct FParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_MZW7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// struct FParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_OG06, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// struct FFreezablePerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__FreezablePerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreezablePerPlatformInt, UnknownData_9DL3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFreezablePerPlatformInt, 0x0004);
		}

		// struct FViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_VJHI, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_OZ8K, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// struct FUpdateLevelStreamingLevelStatus
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelStreamingLevelStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, UnknownData_VEIL, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelStreamingLevelStatus, 0x0010);
		}

		// struct FPlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_IXB1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_R1K4, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// struct FJoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0014);
		}

		// struct FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_EE4M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// struct FGuid
		TEST_METHOD(ScriptStruct__CoreUObject__Guid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// struct FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// struct FVector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// struct FVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// struct FTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// struct FPlane : public FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Plane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// struct FRotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// struct FQuat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// struct FPackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// struct FPackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// struct FPackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// struct FIntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// struct FIntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// struct FColor
		TEST_METHOD(ScriptStruct__CoreUObject__Color)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// struct FLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// struct FBox
		TEST_METHOD(ScriptStruct__CoreUObject__Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_THNB, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// struct FBox2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_CH2A, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// struct FBoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// struct FOrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// struct FMatrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// struct FInterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_PHZW, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// struct FInterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_3YPU, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// struct FInterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_XP15, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// struct FInterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_DW4H, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// struct FInterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_D6EN, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// struct FInterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_3BGW, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// struct FInterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_BKLI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_WAFO, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// struct FInterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_Z60P, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// struct FInterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_Z5G8, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// struct FInterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_1LH5, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// struct FInterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_8SNT, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// struct FInterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_RXOH, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// struct FTransform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_SUMT, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_1HF9, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// struct FRandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, Seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// struct FDateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_EE2X, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// struct FFrameNumber
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumber, 0x0004);
		}

		// struct FFrameRate
		TEST_METHOD(ScriptStruct__CoreUObject__FrameRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Numerator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Denominator, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameRate, 0x0008);
		}

		// struct FFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__FrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, SubFrame, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTime, 0x0008);
		}

		// struct FQualifiedFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__QualifiedFrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Rate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQualifiedFrameTime, 0x0010);
		}

		// struct FTimecode
		TEST_METHOD(ScriptStruct__CoreUObject__Timecode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Hours, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Minutes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Seconds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Frames, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, bDropFrameFormat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, UnknownData_R50O, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimecode, 0x0014);
		}

		// struct FTimespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_33Z9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// struct FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0018);
		}

		// struct FSoftClassPath : public FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0018);
		}

		// struct FPrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x0008);
		}

		// struct FPrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0010);
		}

		// struct FFallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_YQY5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// struct FFloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_MBM4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// struct FFloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// struct FInt32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_WNIF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// struct FInt32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// struct FFrameNumberRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumberRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, UnknownData_P3ZP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumberRangeBound, 0x0008);
		}

		// struct FFrameNumberRange
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumberRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumberRange, 0x0010);
		}

		// struct FFloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// struct FInt32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// struct FPolyglotTextData
		TEST_METHOD(ScriptStruct__CoreUObject__PolyglotTextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_1DBB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeCulture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Namespace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, LocalizedStrings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, bIsMinimalPatch, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_I87I, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, CachedText, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolyglotTextData, 0x00B8);
		}

		// struct FAutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_B5CD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Artifact, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0038);
		}

		// struct FAutomationExecutionEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationExecutionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, LineNumber, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, UnknownData_SGB4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationExecutionEntry, 0x0058);
		}

		// struct FARFilter
		TEST_METHOD(ScriptStruct__CoreUObject__ARFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_LIPZ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_VMPS, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00F0);
		}

		// struct FAssetBundleEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AssetBundleEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0028);
		}

		// struct FAssetBundleData
		TEST_METHOD(ScriptStruct__CoreUObject__AssetBundleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// struct FAssetData
		TEST_METHOD(ScriptStruct__CoreUObject__AssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_J1HG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0050);
		}

		// struct FLowEntryRegexCaptureGroup
		TEST_METHOD(ScriptStruct__LowEntryExtendedStandardLibrary__LowEntryRegexCaptureGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexCaptureGroup, CaptureGroupNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexCaptureGroup, BeginIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexCaptureGroup, EndIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexCaptureGroup, UnknownData_TUVZ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexCaptureGroup, Match, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLowEntryRegexCaptureGroup, 0x0020);
		}

		// struct FLowEntryRegexMatch
		TEST_METHOD(ScriptStruct__LowEntryExtendedStandardLibrary__LowEntryRegexMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexMatch, MatchNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexMatch, BeginIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexMatch, EndIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexMatch, UnknownData_8SAA, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexMatch, Match, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexMatch, CaptureGroups, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLowEntryRegexMatch, 0x0030);
		}

		// struct FNamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// struct FNamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// struct FInAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_FUNL, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// struct FInAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// struct FInAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_G10N, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// struct FSphericalPontoon
		TEST_METHOD(ScriptStruct__Water__SphericalPontoon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, CenterSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, RelativeLocation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, Radius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, LocalForce, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, CenterLocation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, SocketRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, Offset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, UnknownData_QBNV, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, WaterHeight, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, WaterDepth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, ImmersionDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, WaterPlaneLocation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, WaterPlaneNormal, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, WaterSurfacePosition, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, WaterVelocity, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, WaterBodyIndex, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, UnknownData_4O1E, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSphericalPontoon, CurrentWaterBody, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSphericalPontoon, 0x0140);
		}

		// struct FBuoyancyData
		TEST_METHOD(ScriptStruct__Water__BuoyancyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, Pontoons, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, BuoyancyCoefficient, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, BuoyancyDamp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, BuoyancyDamp2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, BuoyancyRampMinVelocity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, BuoyancyRampMaxVelocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, BuoyancyRampMax, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, MaxBuoyantForce, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, WaterShorePushFactor, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, WaterVelocityStrength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, MaxWaterForce, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, DragCoefficient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, DragCoefficient2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, AngularDragCoefficient, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, MaxDragSpeed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, bApplyDragForcesInWater, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuoyancyData, UnknownData_HAUL, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuoyancyData, 0x0050);
		}

		// struct FGerstnerWaveOctave
		TEST_METHOD(ScriptStruct__Water__GerstnerWaveOctave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWaveOctave, NumWaves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWaveOctave, AmplitudeScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWaveOctave, MainDirection, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWaveOctave, SpreadAngle, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWaveOctave, bUniformSpread, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWaveOctave, UnknownData_GN33, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGerstnerWaveOctave, 0x0014);
		}

		// struct FGerstnerWave
		TEST_METHOD(ScriptStruct__Water__GerstnerWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWave, WaveLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWave, Amplitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWave, Steepness, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWave, Direction, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWave, WaveVector, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWave, WaveSpeed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWave, WKA, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWave, Q, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGerstnerWave, PhaseOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGerstnerWave, 0x0030);
		}

		// struct FWaterCurveSettings
		TEST_METHOD(ScriptStruct__Water__WaterCurveSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterCurveSettings, bUseCurveChannel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterCurveSettings, UnknownData_W9J7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterCurveSettings, ElevationCurveAsset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterCurveSettings, ChannelEdgeOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterCurveSettings, ChannelDepth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterCurveSettings, CurveRampWidth, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterCurveSettings, UnknownData_ROX5, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaterCurveSettings, 0x0020);
		}

		// struct FWaterSplineCurveDefaults
		TEST_METHOD(ScriptStruct__Water__WaterSplineCurveDefaults)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterSplineCurveDefaults, DefaultDepth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterSplineCurveDefaults, DefaultWidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterSplineCurveDefaults, DefaultVelocity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterSplineCurveDefaults, DefaultAudioIntensity, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaterSplineCurveDefaults, 0x0010);
		}

		// struct FWaterFalloffSettings
		TEST_METHOD(ScriptStruct__Water__WaterFalloffSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterFalloffSettings, FalloffMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterFalloffSettings, UnknownData_T3NX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterFalloffSettings, FalloffAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterFalloffSettings, FalloffWidth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterFalloffSettings, EdgeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterFalloffSettings, ZOffset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaterFalloffSettings, 0x0014);
		}

		// struct FWaterBrushEffectBlurring
		TEST_METHOD(ScriptStruct__Water__WaterBrushEffectBlurring)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectBlurring, bBlurShape, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectBlurring, UnknownData_SHGB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectBlurring, Radius, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaterBrushEffectBlurring, 0x0008);
		}

		// struct FWaterBrushEffectCurlNoise
		TEST_METHOD(ScriptStruct__Water__WaterBrushEffectCurlNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectCurlNoise, Curl1Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectCurlNoise, Curl2Amount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectCurlNoise, Curl1Tiling, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectCurlNoise, Curl2Tiling, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaterBrushEffectCurlNoise, 0x0010);
		}

		// struct FWaterBrushEffectSmoothBlending
		TEST_METHOD(ScriptStruct__Water__WaterBrushEffectSmoothBlending)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectSmoothBlending, InnerSmoothDistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectSmoothBlending, OuterSmoothDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaterBrushEffectSmoothBlending, 0x0008);
		}

		// struct FWaterBrushEffectTerracing
		TEST_METHOD(ScriptStruct__Water__WaterBrushEffectTerracing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectTerracing, TerraceAlpha, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectTerracing, TerraceSpacing, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectTerracing, TerraceSmoothness, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectTerracing, MaskLength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectTerracing, MaskStartOffset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaterBrushEffectTerracing, 0x0014);
		}

		// struct FWaterBrushEffectDisplacement
		TEST_METHOD(ScriptStruct__Water__WaterBrushEffectDisplacement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectDisplacement, DisplacementHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectDisplacement, DisplacementTiling, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectDisplacement, Texture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectDisplacement, Midpoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectDisplacement, Channel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectDisplacement, WeightmapInfluence, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaterBrushEffectDisplacement, 0x0028);
		}

		// struct FWaterBrushEffects
		TEST_METHOD(ScriptStruct__Water__WaterBrushEffects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffects, Blurring, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffects, CurlNoise, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffects, Displacement, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffects, SmoothBlending, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffects, Terracing, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffects, UnknownData_LO8Y, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaterBrushEffects, 0x0060);
		}

		// struct FWaterBodyHeightmapSettings
		TEST_METHOD(ScriptStruct__Water__WaterBodyHeightmapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBodyHeightmapSettings, BlendMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBodyHeightmapSettings, bInvertShape, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBodyHeightmapSettings, UnknownData_NHNP, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBodyHeightmapSettings, FalloffSettings, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBodyHeightmapSettings, Effects, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBodyHeightmapSettings, Priority, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBodyHeightmapSettings, UnknownData_O9EX, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaterBodyHeightmapSettings, 0x0080);
		}

		// struct FWaterBodyWeightmapSettings
		TEST_METHOD(ScriptStruct__Water__WaterBodyWeightmapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBodyWeightmapSettings, FalloffWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBodyWeightmapSettings, EdgeOffset, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBodyWeightmapSettings, ModulationTexture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBodyWeightmapSettings, TextureTiling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBodyWeightmapSettings, TextureInfluence, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBodyWeightmapSettings, Midpoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBodyWeightmapSettings, FinalOpacity, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaterBodyWeightmapSettings, 0x0020);
		}

		// struct FWaterBrushEffectCurves
		TEST_METHOD(ScriptStruct__Water__WaterBrushEffectCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectCurves, bUseCurveChannel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectCurves, UnknownData_0AFG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectCurves, ElevationCurveAsset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectCurves, ChannelEdgeOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectCurves, ChannelDepth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectCurves, CurveRampWidth, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaterBrushEffectCurves, UnknownData_CKM4, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaterBrushEffectCurves, 0x0020);
		}

		// struct FUnderwaterPostProcessSettings
		TEST_METHOD(ScriptStruct__Water__UnderwaterPostProcessSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnderwaterPostProcessSettings, bEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnderwaterPostProcessSettings, UnknownData_8PAQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnderwaterPostProcessSettings, Priority, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnderwaterPostProcessSettings, BlendRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnderwaterPostProcessSettings, BlendWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnderwaterPostProcessSettings, PostProcessSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnderwaterPostProcessSettings, UnderwaterPostProcessMaterial, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnderwaterPostProcessSettings, UnknownData_8SWI, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUnderwaterPostProcessSettings, 0x0570);
		}

		// struct FPlayFabError
		TEST_METHOD(ScriptStruct__PlayFab__PlayFabError)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabError, HasError, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabError, UnknownData_BD6S, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabError, ErrorCode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabError, ErrorName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabError, ErrorMessage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabError, ErrorDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabError, 0x0038);
		}

		// struct FPlayFabBaseModel
		TEST_METHOD(ScriptStruct__PlayFab__PlayFabBaseModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBaseModel, responseError, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabBaseModel, responseData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabBaseModel, 0x0040);
		}

		// struct FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__PlayFabResultCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabResultCommon, Request, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabResultCommon, 0x0008);
		}

		// struct FAdminEmptyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminEmptyResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminEmptyResponse, 0x0008);
		}

		// struct FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__PlayFabRequestCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabRequestCommon, AuthenticationContext, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabRequestCommon, 0x0008);
		}

		// struct FAdminAbortTaskInstanceRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAbortTaskInstanceRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAbortTaskInstanceRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAbortTaskInstanceRequest, TaskInstanceId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAbortTaskInstanceRequest, 0x0020);
		}

		// struct FAdminAddLocalizedNewsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddLocalizedNewsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddLocalizedNewsResult, 0x0008);
		}

		// struct FAdminAddLocalizedNewsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddLocalizedNewsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddLocalizedNewsRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddLocalizedNewsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddLocalizedNewsRequest, Language, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddLocalizedNewsRequest, NewsId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddLocalizedNewsRequest, Title, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddLocalizedNewsRequest, 0x0050);
		}

		// struct FAdminAddNewsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddNewsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddNewsResult, NewsId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddNewsResult, 0x0018);
		}

		// struct FAdminAddNewsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddNewsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddNewsRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddNewsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddNewsRequest, Timestamp, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddNewsRequest, Title, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddNewsRequest, 0x0040);
		}

		// struct FAdminAddPlayerTagResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddPlayerTagResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddPlayerTagResult, 0x0008);
		}

		// struct FAdminAddPlayerTagRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddPlayerTagRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddPlayerTagRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddPlayerTagRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddPlayerTagRequest, TagName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddPlayerTagRequest, 0x0030);
		}

		// struct FAdminAddServerBuildResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddServerBuildResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, ActiveRegions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, BuildId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, CommandLineTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, Comment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, ExecutablePath, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, MaxGamesPerHost, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, MinFreeGameSlots, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, Status, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, UnknownData_N1V5, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, Timestamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildResult, TitleId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddServerBuildResult, 0x0088);
		}

		// struct FAdminAddServerBuildRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddServerBuildRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, ActiveRegions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, BuildId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, CommandLineTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, Comment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, CustomTags, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, ExecutablePath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, MaxGamesPerHost, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddServerBuildRequest, MinFreeGameSlots, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddServerBuildRequest, 0x0068);
		}

		// struct FAdminModifyUserVirtualCurrencyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminModifyUserVirtualCurrencyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyUserVirtualCurrencyResult, Balance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyUserVirtualCurrencyResult, BalanceChange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyUserVirtualCurrencyResult, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyUserVirtualCurrencyResult, VirtualCurrency, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminModifyUserVirtualCurrencyResult, 0x0030);
		}

		// struct FAdminAddUserVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddUserVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddUserVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddUserVirtualCurrencyRequest, UnknownData_TUPO, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddUserVirtualCurrencyRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddUserVirtualCurrencyRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddUserVirtualCurrencyRequest, VirtualCurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddUserVirtualCurrencyRequest, 0x0038);
		}

		// struct FAdminBlankResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminBlankResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminBlankResult, 0x0008);
		}

		// struct FAdminAddVirtualCurrencyTypesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminAddVirtualCurrencyTypesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminAddVirtualCurrencyTypesRequest, VirtualCurrencies, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminAddVirtualCurrencyTypesRequest, 0x0018);
		}

		// struct FAdminBanUsersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminBanUsersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminBanUsersResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminBanUsersResult, 0x0018);
		}

		// struct FAdminBanUsersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminBanUsersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminBanUsersRequest, Bans, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminBanUsersRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminBanUsersRequest, 0x0020);
		}

		// struct FAdminCheckLimitedEditionItemAvailabilityResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCheckLimitedEditionItemAvailabilityResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCheckLimitedEditionItemAvailabilityResult, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCheckLimitedEditionItemAvailabilityResult, UnknownData_TLR8, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCheckLimitedEditionItemAvailabilityResult, 0x0010);
		}

		// struct FAdminCheckLimitedEditionItemAvailabilityRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCheckLimitedEditionItemAvailabilityRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCheckLimitedEditionItemAvailabilityRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCheckLimitedEditionItemAvailabilityRequest, ItemId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCheckLimitedEditionItemAvailabilityRequest, 0x0028);
		}

		// struct FAdminCreateTaskResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreateTaskResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateTaskResult, TaskId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreateTaskResult, 0x0018);
		}

		// struct FAdminCreateActionsOnPlayerSegmentTaskRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreateActionsOnPlayerSegmentTaskRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, IsActive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, UnknownData_H3XO, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, Name, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, Parameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, Schedule, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreateActionsOnPlayerSegmentTaskRequest, 0x0050);
		}

		// struct FAdminCreateCloudScriptTaskRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreateCloudScriptTaskRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateCloudScriptTaskRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateCloudScriptTaskRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateCloudScriptTaskRequest, IsActive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateCloudScriptTaskRequest, UnknownData_UQ6J, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateCloudScriptTaskRequest, Name, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateCloudScriptTaskRequest, Parameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateCloudScriptTaskRequest, Schedule, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreateCloudScriptTaskRequest, 0x0050);
		}

		// struct FAdminCreateInsightsScheduledScalingTaskRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreateInsightsScheduledScalingTaskRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateInsightsScheduledScalingTaskRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateInsightsScheduledScalingTaskRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateInsightsScheduledScalingTaskRequest, IsActive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateInsightsScheduledScalingTaskRequest, UnknownData_1NIP, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateInsightsScheduledScalingTaskRequest, Name, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateInsightsScheduledScalingTaskRequest, Parameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateInsightsScheduledScalingTaskRequest, Schedule, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreateInsightsScheduledScalingTaskRequest, 0x0050);
		}

		// struct FAdminCreateOpenIdConnectionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreateOpenIdConnectionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateOpenIdConnectionRequest, ClientId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateOpenIdConnectionRequest, ClientSecret, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateOpenIdConnectionRequest, ConnectionId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateOpenIdConnectionRequest, IgnoreNonce, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateOpenIdConnectionRequest, UnknownData_1AO3, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateOpenIdConnectionRequest, IssuerDiscoveryUrl, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateOpenIdConnectionRequest, IssuerInformation, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreateOpenIdConnectionRequest, 0x0058);
		}

		// struct FAdminCreatePlayerSharedSecretResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreatePlayerSharedSecretResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerSharedSecretResult, SecretKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreatePlayerSharedSecretResult, 0x0018);
		}

		// struct FAdminCreatePlayerSharedSecretRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreatePlayerSharedSecretRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerSharedSecretRequest, FriendlyName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreatePlayerSharedSecretRequest, 0x0018);
		}

		// struct FAdminCreatePlayerStatisticDefinitionResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreatePlayerStatisticDefinitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerStatisticDefinitionResult, Statistic, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreatePlayerStatisticDefinitionResult, 0x0010);
		}

		// struct FAdminCreatePlayerStatisticDefinitionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreatePlayerStatisticDefinitionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerStatisticDefinitionRequest, AggregationMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerStatisticDefinitionRequest, UnknownData_FU91, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerStatisticDefinitionRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerStatisticDefinitionRequest, StatisticName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerStatisticDefinitionRequest, VersionChangeInterval, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreatePlayerStatisticDefinitionRequest, UnknownData_B1UB, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreatePlayerStatisticDefinitionRequest, 0x0030);
		}

		// struct FAdminCreateSegmentResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreateSegmentResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateSegmentResponse, ErrorMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateSegmentResponse, SegmentId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreateSegmentResponse, 0x0028);
		}

		// struct FAdminCreateSegmentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminCreateSegmentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminCreateSegmentRequest, SegmentModel, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminCreateSegmentRequest, 0x0010);
		}

		// struct FAdminDeleteMasterPlayerAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteMasterPlayerAccountResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteMasterPlayerAccountResult, JobReceiptId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteMasterPlayerAccountResult, TitleIds, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteMasterPlayerAccountResult, 0x0028);
		}

		// struct FAdminDeletePlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeletePlayerResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeletePlayerResult, 0x0008);
		}

		// struct FAdminDeletePlayerSharedSecretResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeletePlayerSharedSecretResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeletePlayerSharedSecretResult, 0x0008);
		}

		// struct FAdminDeleteSegmentsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteSegmentsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteSegmentsResponse, ErrorMessage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteSegmentsResponse, 0x0018);
		}

		// struct FAdminDeleteStoreResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteStoreResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteStoreResult, 0x0008);
		}

		// struct FAdminDeleteTitleResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteTitleResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteTitleResult, 0x0008);
		}

		// struct FAdminDeleteTitleDataOverrideResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteTitleDataOverrideResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteTitleDataOverrideResult, 0x0008);
		}

		// struct FAdminExportMasterPlayerDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminExportMasterPlayerDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminExportMasterPlayerDataResult, JobReceiptId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminExportMasterPlayerDataResult, 0x0018);
		}

		// struct FAdminGetActionsOnPlayersInSegmentTaskInstanceResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetActionsOnPlayersInSegmentTaskInstanceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetActionsOnPlayersInSegmentTaskInstanceResult, Parameter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetActionsOnPlayersInSegmentTaskInstanceResult, Summary, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetActionsOnPlayersInSegmentTaskInstanceResult, 0x0018);
		}

		// struct FAdminGetAllSegmentsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetAllSegmentsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetAllSegmentsResult, Segments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetAllSegmentsResult, 0x0018);
		}

		// struct FAdminGetCatalogItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetCatalogItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCatalogItemsResult, Catalog, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetCatalogItemsResult, 0x0018);
		}

		// struct FAdminGetCloudScriptRevisionResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetCloudScriptRevisionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionResult, CreatedAt, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionResult, Files, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionResult, IsPublished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionResult, UnknownData_SH3L, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionResult, Revision, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionResult, Version, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionResult, UnknownData_8D9K, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetCloudScriptRevisionResult, 0x0038);
		}

		// struct FAdminGetCloudScriptTaskInstanceResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetCloudScriptTaskInstanceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptTaskInstanceResult, Parameter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptTaskInstanceResult, Summary, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetCloudScriptTaskInstanceResult, 0x0018);
		}

		// struct FAdminGetCloudScriptVersionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetCloudScriptVersionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptVersionsResult, Versions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetCloudScriptVersionsResult, 0x0018);
		}

		// struct FAdminGetContentListResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetContentListResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetContentListResult, Contents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetContentListResult, ItemCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetContentListResult, TotalSize, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetContentListResult, 0x0020);
		}

		// struct FAdminGetContentUploadUrlResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetContentUploadUrlResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetContentUploadUrlResult, URL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetContentUploadUrlResult, 0x0018);
		}

		// struct FAdminGetDataReportResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetDataReportResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetDataReportResult, DownloadUrl, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetDataReportResult, 0x0018);
		}

		// struct FAdminGetMatchmakerGameInfoResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetMatchmakerGameInfoResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, BuildVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, EndTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, LobbyId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, Mode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, Players, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, Region, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, UnknownData_NJY5, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, ServerIPV4Address, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, ServerIPV6Address, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, ServerPort, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, UnknownData_ER3B, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, ServerPublicDNSName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, StartTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoResult, TitleId, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetMatchmakerGameInfoResult, 0x00B8);
		}

		// struct FAdminGetMatchmakerGameModesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetMatchmakerGameModesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameModesResult, GameModes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetMatchmakerGameModesResult, 0x0018);
		}

		// struct FAdminGetPlayedTitleListResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayedTitleListResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayedTitleListResult, TitleIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayedTitleListResult, 0x0018);
		}

		// struct FAdminGetPlayerIdFromAuthTokenResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerIdFromAuthTokenResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerIdFromAuthTokenResult, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerIdFromAuthTokenResult, 0x0018);
		}

		// struct FAdminGetPlayerProfileResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerProfileResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerProfileResult, PlayerProfile, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerProfileResult, 0x0010);
		}

		// struct FAdminGetPlayerSegmentsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerSegmentsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerSegmentsResult, Segments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerSegmentsResult, 0x0018);
		}

		// struct FAdminGetPlayerSharedSecretsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerSharedSecretsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerSharedSecretsResult, SharedSecrets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerSharedSecretsResult, 0x0018);
		}

		// struct FAdminGetPlayersInSegmentResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayersInSegmentResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentResult, ContinuationToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentResult, PlayerProfiles, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentResult, ProfilesInSegment, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentResult, UnknownData_BRKV, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayersInSegmentResult, 0x0030);
		}

		// struct FAdminGetPlayerStatisticDefinitionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerStatisticDefinitionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerStatisticDefinitionsResult, Statistics, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerStatisticDefinitionsResult, 0x0018);
		}

		// struct FAdminGetPlayerStatisticVersionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerStatisticVersionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerStatisticVersionsResult, StatisticVersions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerStatisticVersionsResult, 0x0018);
		}

		// struct FAdminGetPlayerTagsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerTagsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerTagsResult, PlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerTagsResult, Tags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerTagsResult, 0x0028);
		}

		// struct FAdminGetPolicyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPolicyResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPolicyResponse, PolicyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPolicyResponse, PolicyVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPolicyResponse, UnknownData_IORR, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPolicyResponse, Statements, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPolicyResponse, 0x0030);
		}

		// struct FAdminGetPublisherDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPublisherDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPublisherDataResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPublisherDataResult, 0x0010);
		}

		// struct FAdminGetRandomResultTablesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetRandomResultTablesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetRandomResultTablesResult, Tables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetRandomResultTablesResult, 0x0010);
		}

		// struct FAdminGetSegmentsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetSegmentsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetSegmentsResponse, ErrorMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetSegmentsResponse, Segments, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetSegmentsResponse, 0x0028);
		}

		// struct FAdminGetServerBuildInfoResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetServerBuildInfoResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, ActiveRegions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, BuildId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, Comment, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, ErrorMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, MaxGamesPerHost, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, MinFreeGameSlots, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, Status, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, UnknownData_95BH, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, Timestamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoResult, TitleId, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetServerBuildInfoResult, 0x0078);
		}

		// struct FAdminGetServerBuildUploadURLResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetServerBuildUploadURLResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildUploadURLResult, URL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetServerBuildUploadURLResult, 0x0018);
		}

		// struct FAdminGetStoreItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetStoreItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsResult, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsResult, MarketingData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsResult, Source, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsResult, UnknownData_WLRP, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsResult, Store, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsResult, StoreId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetStoreItemsResult, 0x0048);
		}

		// struct FAdminGetTaskInstancesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetTaskInstancesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTaskInstancesResult, Summaries, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetTaskInstancesResult, 0x0018);
		}

		// struct FAdminGetTasksResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetTasksResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTasksResult, Tasks, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetTasksResult, 0x0018);
		}

		// struct FAdminGetTitleDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetTitleDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTitleDataResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetTitleDataResult, 0x0010);
		}

		// struct FAdminLookupUserAccountInfoResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminLookupUserAccountInfoResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminLookupUserAccountInfoResult, UserInfo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminLookupUserAccountInfoResult, 0x0010);
		}

		// struct FAdminGetUserBansResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetUserBansResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserBansResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetUserBansResult, 0x0018);
		}

		// struct FAdminGetUserDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetUserDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataResult, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataResult, DataVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataResult, UnknownData_55HG, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataResult, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetUserDataResult, 0x0028);
		}

		// struct FAdminGetUserInventoryResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetUserInventoryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserInventoryResult, Inventory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserInventoryResult, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserInventoryResult, VirtualCurrency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserInventoryResult, VirtualCurrencyRechargeTimes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetUserInventoryResult, 0x0038);
		}

		// struct FAdminGrantItemsToUsersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGrantItemsToUsersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGrantItemsToUsersResult, ItemGrantResults, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGrantItemsToUsersResult, 0x0018);
		}

		// struct FAdminIncrementLimitedEditionItemAvailabilityResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminIncrementLimitedEditionItemAvailabilityResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminIncrementLimitedEditionItemAvailabilityResult, 0x0008);
		}

		// struct FAdminIncrementPlayerStatisticVersionResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminIncrementPlayerStatisticVersionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementPlayerStatisticVersionResult, StatisticVersion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminIncrementPlayerStatisticVersionResult, 0x0010);
		}

		// struct FAdminListOpenIdConnectionResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminListOpenIdConnectionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminListOpenIdConnectionResponse, Connections, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminListOpenIdConnectionResponse, 0x0018);
		}

		// struct FAdminListBuildsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminListBuildsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminListBuildsResult, Builds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminListBuildsResult, 0x0018);
		}

		// struct FAdminListVirtualCurrencyTypesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminListVirtualCurrencyTypesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminListVirtualCurrencyTypesResult, VirtualCurrencies, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminListVirtualCurrencyTypesResult, 0x0018);
		}

		// struct FAdminModifyMatchmakerGameModesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminModifyMatchmakerGameModesResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminModifyMatchmakerGameModesResult, 0x0008);
		}

		// struct FAdminModifyServerBuildResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminModifyServerBuildResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, ActiveRegions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, BuildId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, CommandLineTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, Comment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, ExecutablePath, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, MaxGamesPerHost, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, MinFreeGameSlots, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, Status, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, UnknownData_BBUE, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, Timestamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildResult, TitleId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminModifyServerBuildResult, 0x0088);
		}

		// struct FAdminRefundPurchaseResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRefundPurchaseResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRefundPurchaseResponse, PurchaseStatus, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRefundPurchaseResponse, 0x0018);
		}

		// struct FAdminRemovePlayerTagResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRemovePlayerTagResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRemovePlayerTagResult, 0x0008);
		}

		// struct FAdminRemoveServerBuildResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRemoveServerBuildResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRemoveServerBuildResult, 0x0008);
		}

		// struct FAdminResetCharacterStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResetCharacterStatisticsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResetCharacterStatisticsResult, 0x0008);
		}

		// struct FAdminResetPasswordResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResetPasswordResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResetPasswordResult, 0x0008);
		}

		// struct FAdminResetUserStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResetUserStatisticsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResetUserStatisticsResult, 0x0008);
		}

		// struct FAdminResolvePurchaseDisputeResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResolvePurchaseDisputeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResolvePurchaseDisputeResponse, PurchaseStatus, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResolvePurchaseDisputeResponse, 0x0018);
		}

		// struct FAdminRevokeAllBansForUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeAllBansForUserResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeAllBansForUserResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeAllBansForUserResult, 0x0018);
		}

		// struct FAdminRevokeBansResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeBansResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeBansResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeBansResult, 0x0018);
		}

		// struct FAdminRevokeInventoryResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeInventoryResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeInventoryResult, 0x0008);
		}

		// struct FAdminRevokeInventoryItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeInventoryItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeInventoryItemsResult, Errors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeInventoryItemsResult, 0x0018);
		}

		// struct FAdminRunTaskResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRunTaskResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRunTaskResult, TaskInstanceId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRunTaskResult, 0x0018);
		}

		// struct FAdminSendAccountRecoveryEmailResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSendAccountRecoveryEmailResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSendAccountRecoveryEmailResult, 0x0008);
		}

		// struct FAdminUpdateCatalogItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateCatalogItemsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateCatalogItemsResult, 0x0008);
		}

		// struct FAdminSetPlayerSecretResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetPlayerSecretResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetPlayerSecretResult, 0x0008);
		}

		// struct FAdminSetPublishedRevisionResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetPublishedRevisionResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetPublishedRevisionResult, 0x0008);
		}

		// struct FAdminSetPublisherDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetPublisherDataResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetPublisherDataResult, 0x0008);
		}

		// struct FAdminUpdateStoreItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateStoreItemsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateStoreItemsResult, 0x0008);
		}

		// struct FAdminSetTitleDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetTitleDataResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetTitleDataResult, 0x0008);
		}

		// struct FAdminSetTitleDataAndOverridesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetTitleDataAndOverridesResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetTitleDataAndOverridesResult, 0x0008);
		}

		// struct FAdminSetupPushNotificationResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetupPushNotificationResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetupPushNotificationResult, ARN, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetupPushNotificationResult, 0x0018);
		}

		// struct FAdminUpdateBansResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateBansResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateBansResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateBansResult, 0x0018);
		}

		// struct FAdminUpdateCloudScriptResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateCloudScriptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCloudScriptResult, Revision, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCloudScriptResult, Version, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateCloudScriptResult, 0x0010);
		}

		// struct FAdminUpdatePlayerSharedSecretResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdatePlayerSharedSecretResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdatePlayerSharedSecretResult, 0x0008);
		}

		// struct FAdminUpdatePlayerStatisticDefinitionResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdatePlayerStatisticDefinitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerStatisticDefinitionResult, Statistic, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdatePlayerStatisticDefinitionResult, 0x0010);
		}

		// struct FAdminUpdatePolicyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdatePolicyResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyResponse, PolicyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyResponse, Statements, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdatePolicyResponse, 0x0028);
		}

		// struct FAdminUpdateRandomResultTablesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateRandomResultTablesResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateRandomResultTablesResult, 0x0008);
		}

		// struct FAdminUpdateSegmentResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateSegmentResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateSegmentResponse, ErrorMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateSegmentResponse, SegmentId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateSegmentResponse, 0x0028);
		}

		// struct FAdminUpdateUserDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateUserDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataResult, DataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataResult, UnknownData_BD0J, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateUserDataResult, 0x0010);
		}

		// struct FAdminUpdateUserTitleDisplayNameResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateUserTitleDisplayNameResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserTitleDisplayNameResult, DisplayName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateUserTitleDisplayNameResult, 0x0018);
		}

		// struct FAdminDeleteContentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteContentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteContentRequest, Key, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteContentRequest, 0x0018);
		}

		// struct FAdminDeleteMasterPlayerAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteMasterPlayerAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteMasterPlayerAccountRequest, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteMasterPlayerAccountRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteMasterPlayerAccountRequest, 0x0028);
		}

		// struct FAdminDeleteOpenIdConnectionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteOpenIdConnectionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteOpenIdConnectionRequest, ConnectionId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteOpenIdConnectionRequest, 0x0018);
		}

		// struct FAdminDeletePlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeletePlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeletePlayerRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeletePlayerRequest, 0x0018);
		}

		// struct FAdminDeletePlayerSharedSecretRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeletePlayerSharedSecretRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeletePlayerSharedSecretRequest, SecretKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeletePlayerSharedSecretRequest, 0x0018);
		}

		// struct FAdminDeleteSegmentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteSegmentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteSegmentRequest, SegmentId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteSegmentRequest, 0x0018);
		}

		// struct FAdminDeleteStoreRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteStoreRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteStoreRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteStoreRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteStoreRequest, StoreId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteStoreRequest, 0x0030);
		}

		// struct FAdminDeleteTaskRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteTaskRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteTaskRequest, Identifier, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteTaskRequest, 0x0010);
		}

		// struct FAdminDeleteTitleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteTitleRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteTitleRequest, 0x0008);
		}

		// struct FAdminDeleteTitleDataOverrideRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminDeleteTitleDataOverrideRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminDeleteTitleDataOverrideRequest, OverrideLabel, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminDeleteTitleDataOverrideRequest, 0x0018);
		}

		// struct FAdminExportMasterPlayerDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminExportMasterPlayerDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminExportMasterPlayerDataRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminExportMasterPlayerDataRequest, 0x0018);
		}

		// struct FAdminGetTaskInstanceRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetTaskInstanceRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTaskInstanceRequest, TaskInstanceId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetTaskInstanceRequest, 0x0018);
		}

		// struct FAdminGetAllSegmentsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetAllSegmentsRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetAllSegmentsRequest, 0x0008);
		}

		// struct FAdminGetCatalogItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetCatalogItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCatalogItemsRequest, CatalogVersion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetCatalogItemsRequest, 0x0018);
		}

		// struct FAdminGetCloudScriptRevisionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetCloudScriptRevisionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionRequest, Revision, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetCloudScriptRevisionRequest, Version, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetCloudScriptRevisionRequest, 0x0010);
		}

		// struct FAdminGetCloudScriptVersionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetCloudScriptVersionsRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetCloudScriptVersionsRequest, 0x0008);
		}

		// struct FAdminGetContentListRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetContentListRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetContentListRequest, Prefix, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetContentListRequest, 0x0018);
		}

		// struct FAdminGetContentUploadUrlRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetContentUploadUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetContentUploadUrlRequest, ContentType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetContentUploadUrlRequest, Key, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetContentUploadUrlRequest, 0x0028);
		}

		// struct FAdminGetDataReportRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetDataReportRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetDataReportRequest, Day, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetDataReportRequest, Month, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetDataReportRequest, ReportName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetDataReportRequest, Year, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetDataReportRequest, UnknownData_SP4K, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetDataReportRequest, 0x0028);
		}

		// struct FAdminGetMatchmakerGameInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetMatchmakerGameInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameInfoRequest, LobbyId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetMatchmakerGameInfoRequest, 0x0018);
		}

		// struct FAdminGetMatchmakerGameModesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetMatchmakerGameModesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetMatchmakerGameModesRequest, BuildVersion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetMatchmakerGameModesRequest, 0x0018);
		}

		// struct FAdminGetPlayedTitleListRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayedTitleListRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayedTitleListRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayedTitleListRequest, 0x0018);
		}

		// struct FAdminGetPlayerIdFromAuthTokenRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerIdFromAuthTokenRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerIdFromAuthTokenRequest, Token, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerIdFromAuthTokenRequest, TokenType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerIdFromAuthTokenRequest, UnknownData_BWNE, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerIdFromAuthTokenRequest, 0x0020);
		}

		// struct FAdminGetPlayerProfileRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerProfileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerProfileRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerProfileRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerProfileRequest, ProfileConstraints, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerProfileRequest, 0x0028);
		}

		// struct FAdminGetPlayersSegmentsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayersSegmentsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersSegmentsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersSegmentsRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayersSegmentsRequest, 0x0020);
		}

		// struct FAdminGetPlayerSharedSecretsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerSharedSecretsRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerSharedSecretsRequest, 0x0008);
		}

		// struct FAdminGetPlayersInSegmentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayersInSegmentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentRequest, ContinuationToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentRequest, MaxBatchSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentRequest, SecondsToLive, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayersInSegmentRequest, SegmentId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayersInSegmentRequest, 0x0038);
		}

		// struct FAdminGetPlayerStatisticDefinitionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerStatisticDefinitionsRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerStatisticDefinitionsRequest, 0x0008);
		}

		// struct FAdminGetPlayerStatisticVersionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerStatisticVersionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerStatisticVersionsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerStatisticVersionsRequest, StatisticName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerStatisticVersionsRequest, 0x0020);
		}

		// struct FAdminGetPlayerTagsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPlayerTagsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerTagsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerTagsRequest, Namespace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPlayerTagsRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPlayerTagsRequest, 0x0030);
		}

		// struct FAdminGetPolicyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPolicyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPolicyRequest, PolicyName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPolicyRequest, 0x0018);
		}

		// struct FAdminGetPublisherDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetPublisherDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetPublisherDataRequest, Keys, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetPublisherDataRequest, 0x0018);
		}

		// struct FAdminGetRandomResultTablesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetRandomResultTablesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetRandomResultTablesRequest, CatalogVersion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetRandomResultTablesRequest, 0x0018);
		}

		// struct FAdminGetSegmentsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetSegmentsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetSegmentsRequest, SegmentIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetSegmentsRequest, 0x0018);
		}

		// struct FAdminGetServerBuildInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetServerBuildInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildInfoRequest, BuildId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetServerBuildInfoRequest, 0x0018);
		}

		// struct FAdminGetServerBuildUploadURLRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetServerBuildUploadURLRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetServerBuildUploadURLRequest, BuildId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetServerBuildUploadURLRequest, 0x0018);
		}

		// struct FAdminGetStoreItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetStoreItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetStoreItemsRequest, StoreId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetStoreItemsRequest, 0x0028);
		}

		// struct FAdminGetTaskInstancesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetTaskInstancesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTaskInstancesRequest, StartedAtRangeFrom, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTaskInstancesRequest, StartedAtRangeTo, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTaskInstancesRequest, StatusFilter, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTaskInstancesRequest, UnknownData_KBHU, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTaskInstancesRequest, TaskIdentifier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetTaskInstancesRequest, 0x0038);
		}

		// struct FAdminGetTasksRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetTasksRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTasksRequest, Identifier, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetTasksRequest, 0x0010);
		}

		// struct FAdminGetTitleDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetTitleDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTitleDataRequest, Keys, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetTitleDataRequest, OverrideLabel, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetTitleDataRequest, 0x0028);
		}

		// struct FAdminLookupUserAccountInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminLookupUserAccountInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminLookupUserAccountInfoRequest, Email, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminLookupUserAccountInfoRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminLookupUserAccountInfoRequest, TitleDisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminLookupUserAccountInfoRequest, Username, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminLookupUserAccountInfoRequest, 0x0048);
		}

		// struct FAdminGetUserBansRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetUserBansRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserBansRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetUserBansRequest, 0x0018);
		}

		// struct FAdminGetUserDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetUserDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataRequest, IfChangedFromDataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataRequest, UnknownData_79NS, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataRequest, Keys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserDataRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetUserDataRequest, 0x0030);
		}

		// struct FAdminGetUserInventoryRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGetUserInventoryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserInventoryRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGetUserInventoryRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGetUserInventoryRequest, 0x0020);
		}

		// struct FAdminGrantItemsToUsersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminGrantItemsToUsersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGrantItemsToUsersRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGrantItemsToUsersRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminGrantItemsToUsersRequest, ItemGrants, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminGrantItemsToUsersRequest, 0x0030);
		}

		// struct FAdminIncrementLimitedEditionItemAvailabilityRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminIncrementLimitedEditionItemAvailabilityRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementLimitedEditionItemAvailabilityRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementLimitedEditionItemAvailabilityRequest, UnknownData_7VI0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementLimitedEditionItemAvailabilityRequest, CatalogVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementLimitedEditionItemAvailabilityRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementLimitedEditionItemAvailabilityRequest, ItemId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminIncrementLimitedEditionItemAvailabilityRequest, 0x0038);
		}

		// struct FAdminIncrementPlayerStatisticVersionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminIncrementPlayerStatisticVersionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementPlayerStatisticVersionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminIncrementPlayerStatisticVersionRequest, StatisticName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminIncrementPlayerStatisticVersionRequest, 0x0020);
		}

		// struct FAdminListOpenIdConnectionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminListOpenIdConnectionRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminListOpenIdConnectionRequest, 0x0008);
		}

		// struct FAdminListBuildsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminListBuildsRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminListBuildsRequest, 0x0008);
		}

		// struct FAdminListVirtualCurrencyTypesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminListVirtualCurrencyTypesRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminListVirtualCurrencyTypesRequest, 0x0008);
		}

		// struct FAdminModifyMatchmakerGameModesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminModifyMatchmakerGameModesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyMatchmakerGameModesRequest, BuildVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyMatchmakerGameModesRequest, GameModes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminModifyMatchmakerGameModesRequest, 0x0028);
		}

		// struct FAdminModifyServerBuildRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminModifyServerBuildRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, ActiveRegions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, BuildId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, CommandLineTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, Comment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, CustomTags, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, ExecutablePath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, MaxGamesPerHost, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, MinFreeGameSlots, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminModifyServerBuildRequest, Timestamp, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminModifyServerBuildRequest, 0x0078);
		}

		// struct FAdminRefundPurchaseRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRefundPurchaseRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRefundPurchaseRequest, OrderID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRefundPurchaseRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRefundPurchaseRequest, Reason, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRefundPurchaseRequest, 0x0038);
		}

		// struct FAdminRemovePlayerTagRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRemovePlayerTagRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRemovePlayerTagRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRemovePlayerTagRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRemovePlayerTagRequest, TagName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRemovePlayerTagRequest, 0x0030);
		}

		// struct FAdminRemoveServerBuildRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRemoveServerBuildRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRemoveServerBuildRequest, BuildId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRemoveServerBuildRequest, 0x0018);
		}

		// struct FAdminRemoveVirtualCurrencyTypesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRemoveVirtualCurrencyTypesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRemoveVirtualCurrencyTypesRequest, VirtualCurrencies, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRemoveVirtualCurrencyTypesRequest, 0x0018);
		}

		// struct FAdminResetCharacterStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResetCharacterStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetCharacterStatisticsRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetCharacterStatisticsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetCharacterStatisticsRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResetCharacterStatisticsRequest, 0x0030);
		}

		// struct FAdminResetPasswordRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResetPasswordRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetPasswordRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetPasswordRequest, Password, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetPasswordRequest, Token, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResetPasswordRequest, 0x0030);
		}

		// struct FAdminResetUserStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResetUserStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetUserStatisticsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResetUserStatisticsRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResetUserStatisticsRequest, 0x0020);
		}

		// struct FAdminResolvePurchaseDisputeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminResolvePurchaseDisputeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResolvePurchaseDisputeRequest, OrderID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResolvePurchaseDisputeRequest, Outcome, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResolvePurchaseDisputeRequest, UnknownData_XYW3, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResolvePurchaseDisputeRequest, PlayFabId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminResolvePurchaseDisputeRequest, Reason, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminResolvePurchaseDisputeRequest, 0x0040);
		}

		// struct FAdminRevokeAllBansForUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeAllBansForUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeAllBansForUserRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeAllBansForUserRequest, 0x0018);
		}

		// struct FAdminRevokeBansRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeBansRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeBansRequest, BanIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeBansRequest, 0x0018);
		}

		// struct FAdminRevokeInventoryItemRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeInventoryItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeInventoryItemRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeInventoryItemRequest, ItemInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeInventoryItemRequest, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeInventoryItemRequest, 0x0038);
		}

		// struct FAdminRevokeInventoryItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRevokeInventoryItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRevokeInventoryItemsRequest, Items, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRevokeInventoryItemsRequest, 0x0018);
		}

		// struct FAdminRunTaskRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminRunTaskRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRunTaskRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminRunTaskRequest, Identifier, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminRunTaskRequest, 0x0018);
		}

		// struct FAdminSendAccountRecoveryEmailRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSendAccountRecoveryEmailRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSendAccountRecoveryEmailRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSendAccountRecoveryEmailRequest, Email, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSendAccountRecoveryEmailRequest, EmailTemplateId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSendAccountRecoveryEmailRequest, 0x0030);
		}

		// struct FAdminUpdateCatalogItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateCatalogItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCatalogItemsRequest, Catalog, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCatalogItemsRequest, CatalogVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCatalogItemsRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCatalogItemsRequest, SetAsDefaultCatalog, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCatalogItemsRequest, UnknownData_F5HQ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateCatalogItemsRequest, 0x0038);
		}

		// struct FAdminSetPlayerSecretRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetPlayerSecretRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetPlayerSecretRequest, PlayerSecret, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetPlayerSecretRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetPlayerSecretRequest, 0x0028);
		}

		// struct FAdminSetPublishedRevisionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetPublishedRevisionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetPublishedRevisionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetPublishedRevisionRequest, Revision, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetPublishedRevisionRequest, Version, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetPublishedRevisionRequest, 0x0018);
		}

		// struct FAdminSetPublisherDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetPublisherDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetPublisherDataRequest, Key, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetPublisherDataRequest, Value, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetPublisherDataRequest, 0x0028);
		}

		// struct FAdminUpdateStoreItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateStoreItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateStoreItemsRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateStoreItemsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateStoreItemsRequest, MarketingData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateStoreItemsRequest, Store, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateStoreItemsRequest, StoreId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateStoreItemsRequest, 0x0048);
		}

		// struct FAdminSetTitleDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetTitleDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetTitleDataRequest, Key, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetTitleDataRequest, Value, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetTitleDataRequest, 0x0028);
		}

		// struct FAdminSetTitleDataAndOverridesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetTitleDataAndOverridesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetTitleDataAndOverridesRequest, KeyValues, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetTitleDataAndOverridesRequest, OverrideLabel, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetTitleDataAndOverridesRequest, 0x0028);
		}

		// struct FAdminSetupPushNotificationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSetupPushNotificationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetupPushNotificationRequest, Credential, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetupPushNotificationRequest, Key, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetupPushNotificationRequest, Name, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetupPushNotificationRequest, OverwriteOldARN, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetupPushNotificationRequest, Platform, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSetupPushNotificationRequest, UnknownData_PPXQ, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSetupPushNotificationRequest, 0x0040);
		}

		// struct FAdminSubtractUserVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminSubtractUserVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSubtractUserVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSubtractUserVirtualCurrencyRequest, UnknownData_H74E, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSubtractUserVirtualCurrencyRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSubtractUserVirtualCurrencyRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminSubtractUserVirtualCurrencyRequest, VirtualCurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminSubtractUserVirtualCurrencyRequest, 0x0038);
		}

		// struct FAdminUpdateBansRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateBansRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateBansRequest, Bans, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateBansRequest, 0x0018);
		}

		// struct FAdminUpdateCloudScriptRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateCloudScriptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCloudScriptRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCloudScriptRequest, DeveloperPlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCloudScriptRequest, Files, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCloudScriptRequest, Publish, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateCloudScriptRequest, UnknownData_R19B, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateCloudScriptRequest, 0x0038);
		}

		// struct FAdminUpdateOpenIdConnectionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateOpenIdConnectionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateOpenIdConnectionRequest, ClientId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateOpenIdConnectionRequest, ClientSecret, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateOpenIdConnectionRequest, ConnectionId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateOpenIdConnectionRequest, IssuerDiscoveryUrl, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateOpenIdConnectionRequest, IssuerInformation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateOpenIdConnectionRequest, 0x0050);
		}

		// struct FAdminUpdatePlayerSharedSecretRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdatePlayerSharedSecretRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerSharedSecretRequest, Disabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerSharedSecretRequest, UnknownData_03EA, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerSharedSecretRequest, FriendlyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerSharedSecretRequest, SecretKey, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdatePlayerSharedSecretRequest, 0x0030);
		}

		// struct FAdminUpdatePlayerStatisticDefinitionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdatePlayerStatisticDefinitionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerStatisticDefinitionRequest, AggregationMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerStatisticDefinitionRequest, UnknownData_BZHZ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerStatisticDefinitionRequest, StatisticName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerStatisticDefinitionRequest, VersionChangeInterval, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePlayerStatisticDefinitionRequest, UnknownData_TK3O, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdatePlayerStatisticDefinitionRequest, 0x0028);
		}

		// struct FAdminUpdatePolicyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdatePolicyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyRequest, OverwritePolicy, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyRequest, UnknownData_84ZL, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyRequest, PolicyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyRequest, PolicyVersion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyRequest, UnknownData_JQSA, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdatePolicyRequest, Statements, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdatePolicyRequest, 0x0038);
		}

		// struct FAdminUpdateRandomResultTablesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateRandomResultTablesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateRandomResultTablesRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateRandomResultTablesRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateRandomResultTablesRequest, Tables, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateRandomResultTablesRequest, 0x0030);
		}

		// struct FAdminUpdateSegmentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateSegmentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateSegmentRequest, SegmentModel, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateSegmentRequest, 0x0010);
		}

		// struct FAdminUpdateTaskRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateTaskRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, Identifier, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, IsActive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, UnknownData_FM2B, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, Parameter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, Schedule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, Type, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateTaskRequest, UnknownData_0CC3, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateTaskRequest, 0x0060);
		}

		// struct FAdminUpdateUserDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateUserDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataRequest, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataRequest, KeysToRemove, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataRequest, Permission, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataRequest, UnknownData_BPUJ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserDataRequest, PlayFabId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateUserDataRequest, 0x0040);
		}

		// struct FAdminUpdateUserInternalDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateUserInternalDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserInternalDataRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserInternalDataRequest, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserInternalDataRequest, KeysToRemove, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserInternalDataRequest, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateUserInternalDataRequest, 0x0038);
		}

		// struct FAdminUpdateUserTitleDisplayNameRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AdminUpdateUserTitleDisplayNameRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserTitleDisplayNameRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserTitleDisplayNameRequest, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdminUpdateUserTitleDisplayNameRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdminUpdateUserTitleDisplayNameRequest, 0x0030);
		}

		// struct FAuthenticationGetEntityTokenResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AuthenticationGetEntityTokenResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationGetEntityTokenResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationGetEntityTokenResponse, EntityToken, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationGetEntityTokenResponse, TokenExpiration, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAuthenticationGetEntityTokenResponse, 0x0030);
		}

		// struct FAuthenticationValidateEntityTokenResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__AuthenticationValidateEntityTokenResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationValidateEntityTokenResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationValidateEntityTokenResponse, IdentifiedDeviceType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationValidateEntityTokenResponse, IdentityProvider, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationValidateEntityTokenResponse, UnknownData_PQS5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationValidateEntityTokenResponse, Lineage, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAuthenticationValidateEntityTokenResponse, 0x0020);
		}

		// struct FAuthenticationGetEntityTokenRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AuthenticationGetEntityTokenRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationGetEntityTokenRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationGetEntityTokenRequest, Entity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAuthenticationGetEntityTokenRequest, 0x0018);
		}

		// struct FAuthenticationValidateEntityTokenRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__AuthenticationValidateEntityTokenRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationValidateEntityTokenRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationValidateEntityTokenRequest, EntityToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAuthenticationValidateEntityTokenRequest, 0x0020);
		}

		// struct FClientAcceptTradeResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAcceptTradeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAcceptTradeResponse, Trade, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAcceptTradeResponse, 0x0010);
		}

		// struct FClientAcceptTradeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAcceptTradeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAcceptTradeRequest, AcceptedInventoryInstanceIds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAcceptTradeRequest, OfferingPlayerId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAcceptTradeRequest, TradeId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAcceptTradeRequest, 0x0038);
		}

		// struct FClientAddFriendResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddFriendResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddFriendResult, Created, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddFriendResult, UnknownData_IUZ3, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddFriendResult, 0x0010);
		}

		// struct FClientAddFriendRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddFriendRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddFriendRequest, FriendEmail, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddFriendRequest, FriendPlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddFriendRequest, FriendTitleDisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddFriendRequest, FriendUsername, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddFriendRequest, 0x0048);
		}

		// struct FClientAddGenericIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddGenericIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddGenericIDResult, 0x0008);
		}

		// struct FClientAddGenericIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddGenericIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddGenericIDRequest, GenericId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddGenericIDRequest, 0x0010);
		}

		// struct FClientAddOrUpdateContactEmailResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddOrUpdateContactEmailResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddOrUpdateContactEmailResult, 0x0008);
		}

		// struct FClientAddOrUpdateContactEmailRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddOrUpdateContactEmailRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddOrUpdateContactEmailRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddOrUpdateContactEmailRequest, EmailAddress, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddOrUpdateContactEmailRequest, 0x0020);
		}

		// struct FClientAddSharedGroupMembersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddSharedGroupMembersResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddSharedGroupMembersResult, 0x0008);
		}

		// struct FClientAddSharedGroupMembersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddSharedGroupMembersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddSharedGroupMembersRequest, PlayFabIds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddSharedGroupMembersRequest, SharedGroupId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddSharedGroupMembersRequest, 0x0028);
		}

		// struct FClientAddUsernamePasswordResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddUsernamePasswordResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUsernamePasswordResult, Username, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddUsernamePasswordResult, 0x0018);
		}

		// struct FClientAddUsernamePasswordRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddUsernamePasswordRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUsernamePasswordRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUsernamePasswordRequest, Email, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUsernamePasswordRequest, Password, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUsernamePasswordRequest, Username, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddUsernamePasswordRequest, 0x0040);
		}

		// struct FClientModifyUserVirtualCurrencyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientModifyUserVirtualCurrencyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientModifyUserVirtualCurrencyResult, Balance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientModifyUserVirtualCurrencyResult, BalanceChange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientModifyUserVirtualCurrencyResult, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientModifyUserVirtualCurrencyResult, VirtualCurrency, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientModifyUserVirtualCurrencyResult, 0x0030);
		}

		// struct FClientAddUserVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAddUserVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUserVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUserVirtualCurrencyRequest, UnknownData_Q908, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUserVirtualCurrencyRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAddUserVirtualCurrencyRequest, VirtualCurrency, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAddUserVirtualCurrencyRequest, 0x0028);
		}

		// struct FClientAndroidDevicePushNotificationRegistrationResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAndroidDevicePushNotificationRegistrationResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAndroidDevicePushNotificationRegistrationResult, 0x0008);
		}

		// struct FClientAndroidDevicePushNotificationRegistrationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAndroidDevicePushNotificationRegistrationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAndroidDevicePushNotificationRegistrationRequest, ConfirmationMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAndroidDevicePushNotificationRegistrationRequest, DeviceToken, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAndroidDevicePushNotificationRegistrationRequest, SendPushNotificationConfirmation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAndroidDevicePushNotificationRegistrationRequest, UnknownData_MSV4, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAndroidDevicePushNotificationRegistrationRequest, 0x0030);
		}

		// struct FClientAttributeInstallResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAttributeInstallResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAttributeInstallResult, 0x0008);
		}

		// struct FClientAttributeInstallRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientAttributeInstallRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAttributeInstallRequest, Adid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientAttributeInstallRequest, Idfa, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientAttributeInstallRequest, 0x0028);
		}

		// struct FClientCancelTradeResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientCancelTradeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCancelTradeResponse, Trade, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientCancelTradeResponse, 0x0010);
		}

		// struct FClientCancelTradeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientCancelTradeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCancelTradeRequest, TradeId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientCancelTradeRequest, 0x0018);
		}

		// struct FClientConfirmPurchaseResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConfirmPurchaseResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConfirmPurchaseResult, Items, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConfirmPurchaseResult, OrderID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConfirmPurchaseResult, PurchaseDate, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConfirmPurchaseResult, 0x0038);
		}

		// struct FClientConfirmPurchaseRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConfirmPurchaseRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConfirmPurchaseRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConfirmPurchaseRequest, OrderID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConfirmPurchaseRequest, 0x0020);
		}

		// struct FClientConsumeItemResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumeItemResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemResult, ItemInstanceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemResult, RemainingUses, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemResult, UnknownData_KL84, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumeItemResult, 0x0020);
		}

		// struct FClientConsumeItemRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumeItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemRequest, ConsumeCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemRequest, UnknownData_FEF9, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeItemRequest, ItemInstanceId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumeItemRequest, 0x0038);
		}

		// struct FClientConsumeMicrosoftStoreEntitlementsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumeMicrosoftStoreEntitlementsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeMicrosoftStoreEntitlementsResponse, Items, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumeMicrosoftStoreEntitlementsResponse, 0x0018);
		}

		// struct FClientConsumeMicrosoftStoreEntitlementsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumeMicrosoftStoreEntitlementsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeMicrosoftStoreEntitlementsRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeMicrosoftStoreEntitlementsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeMicrosoftStoreEntitlementsRequest, MarketplaceSpecificData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumeMicrosoftStoreEntitlementsRequest, 0x0028);
		}

		// struct FClientConsumePS5EntitlementsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumePS5EntitlementsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePS5EntitlementsResult, Items, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumePS5EntitlementsResult, 0x0018);
		}

		// struct FClientConsumePS5EntitlementsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumePS5EntitlementsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePS5EntitlementsRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePS5EntitlementsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePS5EntitlementsRequest, MarketplaceSpecificData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumePS5EntitlementsRequest, 0x0028);
		}

		// struct FClientConsumePSNEntitlementsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumePSNEntitlementsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePSNEntitlementsResult, ItemsGranted, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumePSNEntitlementsResult, 0x0018);
		}

		// struct FClientConsumePSNEntitlementsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumePSNEntitlementsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePSNEntitlementsRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePSNEntitlementsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePSNEntitlementsRequest, ServiceLabel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumePSNEntitlementsRequest, UnknownData_AN2S, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumePSNEntitlementsRequest, 0x0028);
		}

		// struct FClientConsumeXboxEntitlementsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumeXboxEntitlementsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeXboxEntitlementsResult, Items, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumeXboxEntitlementsResult, 0x0018);
		}

		// struct FClientConsumeXboxEntitlementsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientConsumeXboxEntitlementsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeXboxEntitlementsRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeXboxEntitlementsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientConsumeXboxEntitlementsRequest, XboxToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientConsumeXboxEntitlementsRequest, 0x0030);
		}

		// struct FClientCreateSharedGroupResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientCreateSharedGroupResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCreateSharedGroupResult, SharedGroupId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientCreateSharedGroupResult, 0x0018);
		}

		// struct FClientCreateSharedGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientCreateSharedGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCreateSharedGroupRequest, SharedGroupId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientCreateSharedGroupRequest, 0x0018);
		}

		// struct FClientExecuteCloudScriptResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientExecuteCloudScriptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, APIRequestsIssued, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, UnknownData_ZP71, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, Error, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, ExecutionTimeSeconds, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, UnknownData_N68D, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, FunctionName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, FunctionResult, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, FunctionResultTooLarge, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, UnknownData_Z98E, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, HttpRequestsIssued, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, Logs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, LogsTooLarge, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, UnknownData_J6HG, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, MemoryConsumedBytes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, ProcessorTimeSeconds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptResult, Revision, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientExecuteCloudScriptResult, 0x0060);
		}

		// struct FClientGetAccountInfoResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetAccountInfoResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAccountInfoResult, AccountInfo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetAccountInfoResult, 0x0010);
		}

		// struct FClientGetAdPlacementsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetAdPlacementsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAdPlacementsResult, AdPlacements, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetAdPlacementsResult, 0x0018);
		}

		// struct FClientListUsersCharactersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientListUsersCharactersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientListUsersCharactersResult, Characters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientListUsersCharactersResult, 0x0018);
		}

		// struct FClientGetCatalogItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCatalogItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCatalogItemsResult, Catalog, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCatalogItemsResult, 0x0018);
		}

		// struct FClientGetCharacterDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataResult, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataResult, Data, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataResult, DataVersion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataResult, UnknownData_9BID, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterDataResult, 0x0028);
		}

		// struct FClientGetCharacterInventoryResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterInventoryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterInventoryResult, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterInventoryResult, Inventory, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterInventoryResult, VirtualCurrency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterInventoryResult, VirtualCurrencyRechargeTimes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterInventoryResult, 0x0038);
		}

		// struct FClientGetCharacterLeaderboardResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterLeaderboardResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterLeaderboardResult, Leaderboard, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterLeaderboardResult, 0x0018);
		}

		// struct FClientGetCharacterStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterStatisticsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterStatisticsResult, CharacterStatistics, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterStatisticsResult, 0x0010);
		}

		// struct FClientGetContentDownloadUrlResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetContentDownloadUrlResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetContentDownloadUrlResult, URL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetContentDownloadUrlResult, 0x0018);
		}

		// struct FClientCurrentGamesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientCurrentGamesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesResult, GameCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesResult, UnknownData_11KS, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesResult, Games, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesResult, PlayerCount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesResult, UnknownData_NT5N, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientCurrentGamesResult, 0x0028);
		}

		// struct FClientGetLeaderboardResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardResult, Leaderboard, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardResult, NextReset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardResult, Version, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardResult, UnknownData_D8ND, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardResult, 0x0030);
		}

		// struct FClientGetFriendLeaderboardAroundPlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetFriendLeaderboardAroundPlayerResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerResult, Leaderboard, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerResult, NextReset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerResult, Version, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerResult, UnknownData_105L, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetFriendLeaderboardAroundPlayerResult, 0x0030);
		}

		// struct FClientGetFriendsListResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetFriendsListResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendsListResult, Friends, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetFriendsListResult, 0x0018);
		}

		// struct FClientGameServerRegionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGameServerRegionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGameServerRegionsResult, Regions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGameServerRegionsResult, 0x0018);
		}

		// struct FClientGetLeaderboardAroundCharacterResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardAroundCharacterResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundCharacterResult, Leaderboard, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardAroundCharacterResult, 0x0018);
		}

		// struct FClientGetLeaderboardAroundPlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardAroundPlayerResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerResult, Leaderboard, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerResult, NextReset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerResult, Version, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerResult, UnknownData_MF5X, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardAroundPlayerResult, 0x0030);
		}

		// struct FClientGetLeaderboardForUsersCharactersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardForUsersCharactersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardForUsersCharactersResult, Leaderboard, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardForUsersCharactersResult, 0x0018);
		}

		// struct FClientGetPaymentTokenResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPaymentTokenResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPaymentTokenResult, OrderID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPaymentTokenResult, ProviderToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPaymentTokenResult, 0x0028);
		}

		// struct FClientGetPhotonAuthenticationTokenResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPhotonAuthenticationTokenResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPhotonAuthenticationTokenResult, PhotonCustomAuthenticationToken, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPhotonAuthenticationTokenResult, 0x0018);
		}

		// struct FClientGetPlayerCombinedInfoResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerCombinedInfoResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerCombinedInfoResult, InfoResultPayload, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerCombinedInfoResult, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerCombinedInfoResult, 0x0020);
		}

		// struct FClientGetPlayerProfileResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerProfileResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerProfileResult, PlayerProfile, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerProfileResult, 0x0010);
		}

		// struct FClientGetPlayerSegmentsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerSegmentsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerSegmentsResult, Segments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerSegmentsResult, 0x0018);
		}

		// struct FClientGetPlayerStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerStatisticsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerStatisticsResult, Statistics, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerStatisticsResult, 0x0018);
		}

		// struct FClientGetPlayerStatisticVersionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerStatisticVersionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerStatisticVersionsResult, StatisticVersions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerStatisticVersionsResult, 0x0018);
		}

		// struct FClientGetPlayerTagsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerTagsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTagsResult, PlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTagsResult, Tags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerTagsResult, 0x0028);
		}

		// struct FClientGetPlayerTradesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerTradesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTradesResponse, AcceptedTrades, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTradesResponse, OpenedTrades, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerTradesResponse, 0x0028);
		}

		// struct FClientGetPlayFabIDsFromFacebookIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromFacebookIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromFacebookIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromFacebookIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromFacebookInstantGamesIdsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromGameCenterIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromGameCenterIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromGameCenterIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromGameCenterIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromGenericIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromGenericIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromGenericIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromGenericIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromGoogleIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromGoogleIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromGoogleIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromGoogleIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromKongregateIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromKongregateIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromKongregateIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromKongregateIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromPSNAccountIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromPSNAccountIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromPSNAccountIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromPSNAccountIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromSteamIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromSteamIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromSteamIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromSteamIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromTwitchIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromTwitchIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromTwitchIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromTwitchIDsResult, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromXboxLiveIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromXboxLiveIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromXboxLiveIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromXboxLiveIDsResult, 0x0018);
		}

		// struct FClientGetPublisherDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPublisherDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPublisherDataResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPublisherDataResult, 0x0010);
		}

		// struct FClientGetPurchaseResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPurchaseResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPurchaseResult, OrderID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPurchaseResult, PaymentProvider, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPurchaseResult, PurchaseDate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPurchaseResult, TransactionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPurchaseResult, TransactionStatus, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPurchaseResult, 0x0058);
		}

		// struct FClientGetSharedGroupDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetSharedGroupDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetSharedGroupDataResult, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetSharedGroupDataResult, Members, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetSharedGroupDataResult, 0x0020);
		}

		// struct FClientGetStoreItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetStoreItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsResult, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsResult, MarketingData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsResult, Source, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsResult, UnknownData_TRVZ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsResult, Store, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsResult, StoreId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetStoreItemsResult, 0x0048);
		}

		// struct FClientGetTimeResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTimeResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTimeResult, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTimeResult, 0x0018);
		}

		// struct FClientGetTitleDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTitleDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitleDataResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTitleDataResult, 0x0010);
		}

		// struct FClientGetTitleNewsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTitleNewsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitleNewsResult, News, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTitleNewsResult, 0x0018);
		}

		// struct FClientGetTitlePublicKeyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTitlePublicKeyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitlePublicKeyResult, RSAPublicKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTitlePublicKeyResult, 0x0018);
		}

		// struct FClientGetTradeStatusResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTradeStatusResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTradeStatusResponse, Trade, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTradeStatusResponse, 0x0010);
		}

		// struct FClientGetUserDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetUserDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserDataResult, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserDataResult, DataVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserDataResult, UnknownData_5B9S, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetUserDataResult, 0x0018);
		}

		// struct FClientGetUserInventoryResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetUserInventoryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserInventoryResult, Inventory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserInventoryResult, VirtualCurrency, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserInventoryResult, VirtualCurrencyRechargeTimes, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetUserInventoryResult, 0x0028);
		}

		// struct FClientGetWindowsHelloChallengeResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetWindowsHelloChallengeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetWindowsHelloChallengeResponse, Challenge, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetWindowsHelloChallengeResponse, 0x0018);
		}

		// struct FClientGrantCharacterToUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGrantCharacterToUserResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserResult, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserResult, CharacterType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserResult, Result, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserResult, UnknownData_AYY8, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGrantCharacterToUserResult, 0x0030);
		}

		// struct FClientLinkAndroidDeviceIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkAndroidDeviceIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkAndroidDeviceIDResult, 0x0008);
		}

		// struct FClientEmptyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientEmptyResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientEmptyResult, 0x0008);
		}

		// struct FClientLinkCustomIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkCustomIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkCustomIDResult, 0x0008);
		}

		// struct FClientLinkFacebookAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkFacebookAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkFacebookAccountResult, 0x0008);
		}

		// struct FClientLinkFacebookInstantGamesIdResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkFacebookInstantGamesIdResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkFacebookInstantGamesIdResult, 0x0008);
		}

		// struct FClientLinkGameCenterAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkGameCenterAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkGameCenterAccountResult, 0x0008);
		}

		// struct FClientLinkGoogleAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkGoogleAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkGoogleAccountResult, 0x0008);
		}

		// struct FClientLinkIOSDeviceIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkIOSDeviceIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkIOSDeviceIDResult, 0x0008);
		}

		// struct FClientLinkKongregateAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkKongregateAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkKongregateAccountResult, 0x0008);
		}

		// struct FClientLinkNintendoSwitchDeviceIdResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkNintendoSwitchDeviceIdResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkNintendoSwitchDeviceIdResult, 0x0008);
		}

		// struct FClientLinkPSNAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkPSNAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkPSNAccountResult, 0x0008);
		}

		// struct FClientLinkSteamAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkSteamAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkSteamAccountResult, 0x0008);
		}

		// struct FClientLinkTwitchAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkTwitchAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkTwitchAccountResult, 0x0008);
		}

		// struct FClientLinkWindowsHelloAccountResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkWindowsHelloAccountResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkWindowsHelloAccountResponse, 0x0008);
		}

		// struct FClientLinkXboxAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkXboxAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkXboxAccountResult, 0x0008);
		}

		// struct FPlayFabLoginResultCommon : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__PlayFabLoginResultCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayFabLoginResultCommon, AuthenticationContext, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayFabLoginResultCommon, 0x0010);
		}

		// struct FClientLoginResult : public FPlayFabLoginResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, EntityToken, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, InfoResultPayload, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, LastLoginTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, NewlyCreated, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, UnknownData_MC03, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, PlayFabId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, SessionTicket, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, SettingsForUser, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginResult, TreatmentAssignment, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginResult, 0x0068);
		}

		// struct FClientMatchmakeResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientMatchmakeResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, Expires, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, LobbyId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, PollWaitTimeMS, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, UnknownData_XRNO, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, ServerIPV4Address, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, ServerIPV6Address, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, ServerPort, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, UnknownData_HLDA, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, ServerPublicDNSName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, Status, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, UnknownData_3R1J, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeResult, Ticket, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientMatchmakeResult, 0x0080);
		}

		// struct FClientOpenTradeResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientOpenTradeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientOpenTradeResponse, Trade, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientOpenTradeResponse, 0x0010);
		}

		// struct FClientPayForPurchaseResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientPayForPurchaseResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, CreditApplied, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, UnknownData_IUQN, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, OrderID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, ProviderData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, ProviderToken, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, PurchaseConfirmationPageURL, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, PurchaseCurrency, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, PurchasePrice, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, Status, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, UnknownData_B6NN, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, VCAmount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseResult, VirtualCurrency, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientPayForPurchaseResult, 0x0078);
		}

		// struct FClientPurchaseItemResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientPurchaseItemResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemResult, Items, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientPurchaseItemResult, 0x0018);
		}

		// struct FClientRedeemCouponResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRedeemCouponResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRedeemCouponResult, GrantedItems, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRedeemCouponResult, 0x0018);
		}

		// struct FClientEmptyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientEmptyResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientEmptyResponse, 0x0008);
		}

		// struct FClientRegisterForIOSPushNotificationResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRegisterForIOSPushNotificationResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRegisterForIOSPushNotificationResult, 0x0008);
		}

		// struct FClientRegisterPlayFabUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRegisterPlayFabUserResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserResult, EntityToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserResult, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserResult, SessionTicket, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserResult, SettingsForUser, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserResult, Username, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRegisterPlayFabUserResult, 0x0048);
		}

		// struct FClientRemoveContactEmailResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveContactEmailResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveContactEmailResult, 0x0008);
		}

		// struct FClientRemoveFriendResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveFriendResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveFriendResult, 0x0008);
		}

		// struct FClientRemoveGenericIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveGenericIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveGenericIDResult, 0x0008);
		}

		// struct FClientRemoveSharedGroupMembersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveSharedGroupMembersResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveSharedGroupMembersResult, 0x0008);
		}

		// struct FClientReportAdActivityResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientReportAdActivityResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReportAdActivityResult, 0x0008);
		}

		// struct FClientReportPlayerClientResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientReportPlayerClientResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportPlayerClientResult, SubmissionsRemaining, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportPlayerClientResult, UnknownData_57OE, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReportPlayerClientResult, 0x0010);
		}

		// struct FClientRestoreIOSPurchasesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRestoreIOSPurchasesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRestoreIOSPurchasesResult, Fulfillments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRestoreIOSPurchasesResult, 0x0018);
		}

		// struct FClientRewardAdActivityResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRewardAdActivityResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityResult, AdActivityEventId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityResult, DebugResults, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityResult, PlacementId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityResult, PlacementName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityResult, PlacementViewsRemaining, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityResult, PlacementViewsResetMinutes, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityResult, RewardResults, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRewardAdActivityResult, 0x0058);
		}

		// struct FClientSendAccountRecoveryEmailResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientSendAccountRecoveryEmailResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientSendAccountRecoveryEmailResult, 0x0008);
		}

		// struct FClientSetFriendTagsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientSetFriendTagsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientSetFriendTagsResult, 0x0008);
		}

		// struct FClientSetPlayerSecretResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientSetPlayerSecretResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientSetPlayerSecretResult, 0x0008);
		}

		// struct FClientStartGameResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientStartGameResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, Expires, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, LobbyId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, Password, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, ServerIPV4Address, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, ServerIPV6Address, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, ServerPort, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, UnknownData_4Q1N, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, ServerPublicDNSName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameResult, Ticket, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientStartGameResult, 0x0080);
		}

		// struct FClientStartPurchaseResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientStartPurchaseResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseResult, Contents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseResult, OrderID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseResult, PaymentOptions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseResult, VirtualCurrencyBalances, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientStartPurchaseResult, 0x0040);
		}

		// struct FClientUnlinkAndroidDeviceIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkAndroidDeviceIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkAndroidDeviceIDResult, 0x0008);
		}

		// struct FClientUnlinkCustomIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkCustomIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkCustomIDResult, 0x0008);
		}

		// struct FClientUnlinkFacebookAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkFacebookAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkFacebookAccountResult, 0x0008);
		}

		// struct FClientUnlinkFacebookInstantGamesIdResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkFacebookInstantGamesIdResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkFacebookInstantGamesIdResult, 0x0008);
		}

		// struct FClientUnlinkGameCenterAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkGameCenterAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkGameCenterAccountResult, 0x0008);
		}

		// struct FClientUnlinkGoogleAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkGoogleAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkGoogleAccountResult, 0x0008);
		}

		// struct FClientUnlinkIOSDeviceIDResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkIOSDeviceIDResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkIOSDeviceIDResult, 0x0008);
		}

		// struct FClientUnlinkKongregateAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkKongregateAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkKongregateAccountResult, 0x0008);
		}

		// struct FClientUnlinkNintendoSwitchDeviceIdResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkNintendoSwitchDeviceIdResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkNintendoSwitchDeviceIdResult, 0x0008);
		}

		// struct FClientUnlinkPSNAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkPSNAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkPSNAccountResult, 0x0008);
		}

		// struct FClientUnlinkSteamAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkSteamAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkSteamAccountResult, 0x0008);
		}

		// struct FClientUnlinkTwitchAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkTwitchAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkTwitchAccountResult, 0x0008);
		}

		// struct FClientUnlinkWindowsHelloAccountResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkWindowsHelloAccountResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkWindowsHelloAccountResponse, 0x0008);
		}

		// struct FClientUnlinkXboxAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkXboxAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkXboxAccountResult, 0x0008);
		}

		// struct FClientUnlockContainerItemResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlockContainerItemResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemResult, GrantedItems, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemResult, UnlockedItemInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemResult, UnlockedWithItemInstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemResult, VirtualCurrency, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlockContainerItemResult, 0x0040);
		}

		// struct FClientUpdateCharacterDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateCharacterDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataResult, DataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataResult, UnknownData_WYWO, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateCharacterDataResult, 0x0010);
		}

		// struct FClientUpdateCharacterStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateCharacterStatisticsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateCharacterStatisticsResult, 0x0008);
		}

		// struct FClientUpdatePlayerStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdatePlayerStatisticsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdatePlayerStatisticsResult, 0x0008);
		}

		// struct FClientUpdateSharedGroupDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateSharedGroupDataResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateSharedGroupDataResult, 0x0008);
		}

		// struct FClientUpdateUserDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateUserDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserDataResult, DataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserDataResult, UnknownData_TJUW, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateUserDataResult, 0x0010);
		}

		// struct FClientUpdateUserTitleDisplayNameResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateUserTitleDisplayNameResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserTitleDisplayNameResult, DisplayName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateUserTitleDisplayNameResult, 0x0018);
		}

		// struct FClientValidateAmazonReceiptResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateAmazonReceiptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptResult, Fulfillments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateAmazonReceiptResult, 0x0018);
		}

		// struct FClientValidateGooglePlayPurchaseResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateGooglePlayPurchaseResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseResult, Fulfillments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateGooglePlayPurchaseResult, 0x0018);
		}

		// struct FClientValidateIOSReceiptResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateIOSReceiptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateIOSReceiptResult, Fulfillments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateIOSReceiptResult, 0x0018);
		}

		// struct FClientValidateWindowsReceiptResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateWindowsReceiptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateWindowsReceiptResult, Fulfillments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateWindowsReceiptResult, 0x0018);
		}

		// struct FClientWriteEventResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientWriteEventResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteEventResponse, EventId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientWriteEventResponse, 0x0018);
		}

		// struct FClientExecuteCloudScriptRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientExecuteCloudScriptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptRequest, FunctionName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptRequest, FunctionParameter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptRequest, GeneratePlayStreamEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptRequest, RevisionSelection, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptRequest, UnknownData_15CS, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientExecuteCloudScriptRequest, SpecificRevision, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientExecuteCloudScriptRequest, 0x0030);
		}

		// struct FClientGetAccountInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetAccountInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAccountInfoRequest, Email, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAccountInfoRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAccountInfoRequest, TitleDisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAccountInfoRequest, Username, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetAccountInfoRequest, 0x0048);
		}

		// struct FClientGetAdPlacementsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetAdPlacementsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAdPlacementsRequest, AppID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetAdPlacementsRequest, Identifier, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetAdPlacementsRequest, 0x0020);
		}

		// struct FClientListUsersCharactersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientListUsersCharactersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientListUsersCharactersRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientListUsersCharactersRequest, 0x0018);
		}

		// struct FClientGetCatalogItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCatalogItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCatalogItemsRequest, CatalogVersion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCatalogItemsRequest, 0x0018);
		}

		// struct FClientGetCharacterDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataRequest, IfChangedFromDataVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataRequest, UnknownData_XBKR, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataRequest, Keys, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterDataRequest, PlayFabId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterDataRequest, 0x0040);
		}

		// struct FClientGetCharacterInventoryRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterInventoryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterInventoryRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterInventoryRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterInventoryRequest, CustomTags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterInventoryRequest, 0x0030);
		}

		// struct FClientGetCharacterLeaderboardRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterLeaderboardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterLeaderboardRequest, CharacterType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterLeaderboardRequest, MaxResultsCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterLeaderboardRequest, StartPosition, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterLeaderboardRequest, StatisticName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterLeaderboardRequest, 0x0030);
		}

		// struct FClientGetCharacterStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetCharacterStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetCharacterStatisticsRequest, CharacterId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetCharacterStatisticsRequest, 0x0018);
		}

		// struct FClientGetContentDownloadUrlRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetContentDownloadUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetContentDownloadUrlRequest, HttpMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetContentDownloadUrlRequest, Key, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetContentDownloadUrlRequest, ThruCDN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetContentDownloadUrlRequest, UnknownData_KUAY, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetContentDownloadUrlRequest, 0x0030);
		}

		// struct FClientCurrentGamesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientCurrentGamesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesRequest, BuildVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesRequest, GameMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesRequest, Region, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesRequest, UnknownData_XCGC, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesRequest, StatisticName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientCurrentGamesRequest, TagFilter, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientCurrentGamesRequest, 0x0048);
		}

		// struct FClientGetFriendLeaderboardRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetFriendLeaderboardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, IncludeFacebookFriends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, IncludeSteamFriends, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, UnknownData_4QG6, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, MaxResultsCount, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, ProfileConstraints, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, StartPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, UnknownData_RHN0, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, StatisticName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, UseSpecificVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, UnknownData_X1NJ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, Version, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardRequest, XboxToken, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetFriendLeaderboardRequest, 0x0050);
		}

		// struct FClientGetFriendLeaderboardAroundPlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetFriendLeaderboardAroundPlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, IncludeFacebookFriends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, IncludeSteamFriends, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, UnknownData_74RK, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, MaxResultsCount, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, ProfileConstraints, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, StatisticName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, UseSpecificVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, UnknownData_UZRL, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, Version, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendLeaderboardAroundPlayerRequest, XboxToken, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetFriendLeaderboardAroundPlayerRequest, 0x0058);
		}

		// struct FClientGetFriendsListRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetFriendsListRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendsListRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendsListRequest, IncludeFacebookFriends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendsListRequest, IncludeSteamFriends, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendsListRequest, UnknownData_WTPR, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendsListRequest, ProfileConstraints, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetFriendsListRequest, XboxToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetFriendsListRequest, 0x0030);
		}

		// struct FClientGameServerRegionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGameServerRegionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGameServerRegionsRequest, BuildVersion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGameServerRegionsRequest, 0x0018);
		}

		// struct FClientGetLeaderboardRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, MaxResultsCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, UnknownData_IMOR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, ProfileConstraints, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, StartPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, UnknownData_IRMW, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, StatisticName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, UseSpecificVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, UnknownData_D8R5, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardRequest, Version, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardRequest, 0x0040);
		}

		// struct FClientGetLeaderboardAroundCharacterRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardAroundCharacterRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundCharacterRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundCharacterRequest, CharacterType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundCharacterRequest, MaxResultsCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundCharacterRequest, UnknownData_BD5B, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundCharacterRequest, StatisticName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardAroundCharacterRequest, 0x0040);
		}

		// struct FClientGetLeaderboardAroundPlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardAroundPlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, MaxResultsCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, UnknownData_S0I2, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, ProfileConstraints, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, StatisticName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, UseSpecificVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, UnknownData_Q8PI, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardAroundPlayerRequest, Version, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardAroundPlayerRequest, 0x0048);
		}

		// struct FClientGetLeaderboardForUsersCharactersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetLeaderboardForUsersCharactersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardForUsersCharactersRequest, MaxResultsCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardForUsersCharactersRequest, UnknownData_SXGL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetLeaderboardForUsersCharactersRequest, StatisticName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetLeaderboardForUsersCharactersRequest, 0x0020);
		}

		// struct FClientGetPaymentTokenRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPaymentTokenRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPaymentTokenRequest, TokenProvider, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPaymentTokenRequest, 0x0018);
		}

		// struct FClientGetPhotonAuthenticationTokenRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPhotonAuthenticationTokenRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPhotonAuthenticationTokenRequest, PhotonApplicationId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPhotonAuthenticationTokenRequest, 0x0018);
		}

		// struct FClientGetPlayerCombinedInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerCombinedInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerCombinedInfoRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerCombinedInfoRequest, InfoRequestParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerCombinedInfoRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerCombinedInfoRequest, 0x0028);
		}

		// struct FClientGetPlayerProfileRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerProfileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerProfileRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerProfileRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerProfileRequest, ProfileConstraints, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerProfileRequest, 0x0028);
		}

		// struct FClientGetPlayerSegmentsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerSegmentsRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerSegmentsRequest, 0x0008);
		}

		// struct FClientGetPlayerStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerStatisticsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerStatisticsRequest, StatisticNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerStatisticsRequest, StatisticNameVersions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerStatisticsRequest, 0x0030);
		}

		// struct FClientGetPlayerStatisticVersionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerStatisticVersionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerStatisticVersionsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerStatisticVersionsRequest, StatisticName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerStatisticVersionsRequest, 0x0020);
		}

		// struct FClientGetPlayerTagsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerTagsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTagsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTagsRequest, Namespace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTagsRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerTagsRequest, 0x0030);
		}

		// struct FClientGetPlayerTradesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayerTradesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTradesRequest, StatusFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayerTradesRequest, UnknownData_BYFI, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayerTradesRequest, 0x0010);
		}

		// struct FClientGetPlayFabIDsFromFacebookIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromFacebookIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromFacebookIDsRequest, FacebookIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromFacebookIDsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest, FacebookInstantGamesIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromGameCenterIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromGameCenterIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromGameCenterIDsRequest, GameCenterIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromGameCenterIDsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromGenericIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromGenericIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromGenericIDsRequest, GenericIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromGenericIDsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromGoogleIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromGoogleIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromGoogleIDsRequest, GoogleIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromGoogleIDsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromKongregateIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromKongregateIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromKongregateIDsRequest, KongregateIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromKongregateIDsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest, NintendoSwitchDeviceIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromPSNAccountIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromPSNAccountIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromPSNAccountIDsRequest, IssuerId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromPSNAccountIDsRequest, UnknownData_K9IY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromPSNAccountIDsRequest, PSNAccountIDs, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromPSNAccountIDsRequest, 0x0020);
		}

		// struct FClientGetPlayFabIDsFromSteamIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromSteamIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromSteamIDsRequest, SteamStringIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromSteamIDsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromTwitchIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromTwitchIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromTwitchIDsRequest, TwitchIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromTwitchIDsRequest, 0x0018);
		}

		// struct FClientGetPlayFabIDsFromXboxLiveIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPlayFabIDsFromXboxLiveIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromXboxLiveIDsRequest, Sandbox, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPlayFabIDsFromXboxLiveIDsRequest, XboxLiveAccountIDs, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPlayFabIDsFromXboxLiveIDsRequest, 0x0028);
		}

		// struct FClientGetPublisherDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPublisherDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPublisherDataRequest, Keys, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPublisherDataRequest, 0x0018);
		}

		// struct FClientGetPurchaseRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetPurchaseRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetPurchaseRequest, OrderID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetPurchaseRequest, 0x0018);
		}

		// struct FClientGetSharedGroupDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetSharedGroupDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetSharedGroupDataRequest, GetMembers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetSharedGroupDataRequest, UnknownData_5K60, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetSharedGroupDataRequest, Keys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetSharedGroupDataRequest, SharedGroupId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetSharedGroupDataRequest, 0x0030);
		}

		// struct FClientGetStoreItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetStoreItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetStoreItemsRequest, StoreId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetStoreItemsRequest, 0x0028);
		}

		// struct FClientGetTimeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTimeRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTimeRequest, 0x0008);
		}

		// struct FClientGetTitleDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTitleDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitleDataRequest, Keys, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitleDataRequest, OverrideLabel, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTitleDataRequest, 0x0028);
		}

		// struct FClientGetTitleNewsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTitleNewsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitleNewsRequest, Count, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitleNewsRequest, UnknownData_0SJJ, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTitleNewsRequest, 0x0010);
		}

		// struct FClientGetTitlePublicKeyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTitlePublicKeyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTitlePublicKeyRequest, TitleSharedSecret, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTitlePublicKeyRequest, 0x0018);
		}

		// struct FClientGetTradeStatusRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetTradeStatusRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTradeStatusRequest, OfferingPlayerId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetTradeStatusRequest, TradeId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetTradeStatusRequest, 0x0028);
		}

		// struct FClientGetUserDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetUserDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserDataRequest, IfChangedFromDataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserDataRequest, UnknownData_OQ7F, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserDataRequest, Keys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserDataRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetUserDataRequest, 0x0030);
		}

		// struct FClientGetUserInventoryRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetUserInventoryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetUserInventoryRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetUserInventoryRequest, 0x0010);
		}

		// struct FClientGetWindowsHelloChallengeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGetWindowsHelloChallengeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGetWindowsHelloChallengeRequest, PublicKeyHint, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGetWindowsHelloChallengeRequest, 0x0018);
		}

		// struct FClientGrantCharacterToUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientGrantCharacterToUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserRequest, CharacterName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGrantCharacterToUserRequest, ItemId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGrantCharacterToUserRequest, 0x0040);
		}

		// struct FClientLinkAndroidDeviceIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkAndroidDeviceIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAndroidDeviceIDRequest, AndroidDevice, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAndroidDeviceIDRequest, AndroidDeviceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAndroidDeviceIDRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAndroidDeviceIDRequest, ForceLink, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAndroidDeviceIDRequest, UnknownData_ROPU, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAndroidDeviceIDRequest, OS, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkAndroidDeviceIDRequest, 0x0048);
		}

		// struct FClientLinkAppleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkAppleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAppleRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAppleRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAppleRequest, UnknownData_1IJG, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkAppleRequest, IdentityToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkAppleRequest, 0x0028);
		}

		// struct FClientLinkCustomIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkCustomIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkCustomIDRequest, CustomId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkCustomIDRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkCustomIDRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkCustomIDRequest, UnknownData_LEJE, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkCustomIDRequest, 0x0028);
		}

		// struct FClientLinkFacebookAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkFacebookAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookAccountRequest, AccessToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookAccountRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookAccountRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookAccountRequest, UnknownData_BXM5, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkFacebookAccountRequest, 0x0028);
		}

		// struct FClientLinkFacebookInstantGamesIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkFacebookInstantGamesIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookInstantGamesIdRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookInstantGamesIdRequest, FacebookInstantGamesSignature, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookInstantGamesIdRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkFacebookInstantGamesIdRequest, UnknownData_4UC9, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkFacebookInstantGamesIdRequest, 0x0028);
		}

		// struct FClientLinkGameCenterAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkGameCenterAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, UnknownData_ABDY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, GameCenterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, PublicKeyUrl, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, Salt, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, Signature, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGameCenterAccountRequest, Timestamp, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkGameCenterAccountRequest, 0x0068);
		}

		// struct FClientLinkGoogleAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkGoogleAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGoogleAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGoogleAccountRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGoogleAccountRequest, UnknownData_1G0C, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkGoogleAccountRequest, ServerAuthCode, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkGoogleAccountRequest, 0x0028);
		}

		// struct FClientLinkIOSDeviceIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkIOSDeviceIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkIOSDeviceIDRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkIOSDeviceIDRequest, DeviceID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkIOSDeviceIDRequest, DeviceModel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkIOSDeviceIDRequest, ForceLink, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkIOSDeviceIDRequest, UnknownData_XQJK, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkIOSDeviceIDRequest, OS, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkIOSDeviceIDRequest, 0x0048);
		}

		// struct FClientLinkKongregateAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkKongregateAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkKongregateAccountRequest, AuthTicket, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkKongregateAccountRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkKongregateAccountRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkKongregateAccountRequest, UnknownData_413R, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkKongregateAccountRequest, KongregateId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkKongregateAccountRequest, 0x0038);
		}

		// struct FClientLinkNintendoServiceAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkNintendoServiceAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoServiceAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoServiceAccountRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoServiceAccountRequest, UnknownData_87FY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoServiceAccountRequest, IdentityToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkNintendoServiceAccountRequest, 0x0028);
		}

		// struct FClientLinkNintendoSwitchDeviceIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkNintendoSwitchDeviceIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoSwitchDeviceIdRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoSwitchDeviceIdRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoSwitchDeviceIdRequest, UnknownData_2OK1, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkNintendoSwitchDeviceIdRequest, NintendoSwitchDeviceId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkNintendoSwitchDeviceIdRequest, 0x0028);
		}

		// struct FClientLinkOpenIdConnectRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkOpenIdConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkOpenIdConnectRequest, ConnectionId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkOpenIdConnectRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkOpenIdConnectRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkOpenIdConnectRequest, UnknownData_VUDE, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkOpenIdConnectRequest, IdToken, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkOpenIdConnectRequest, 0x0038);
		}

		// struct FClientLinkPSNAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkPSNAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkPSNAccountRequest, AuthCode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkPSNAccountRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkPSNAccountRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkPSNAccountRequest, UnknownData_ND6A, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkPSNAccountRequest, IssuerId, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkPSNAccountRequest, RedirectUri, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkPSNAccountRequest, 0x0038);
		}

		// struct FClientLinkSteamAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkSteamAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkSteamAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkSteamAccountRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkSteamAccountRequest, UnknownData_QS7U, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkSteamAccountRequest, SteamTicket, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkSteamAccountRequest, 0x0028);
		}

		// struct FClientLinkTwitchAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkTwitchAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkTwitchAccountRequest, AccessToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkTwitchAccountRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkTwitchAccountRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkTwitchAccountRequest, UnknownData_THO6, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkTwitchAccountRequest, 0x0028);
		}

		// struct FClientLinkWindowsHelloAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkWindowsHelloAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkWindowsHelloAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkWindowsHelloAccountRequest, DeviceName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkWindowsHelloAccountRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkWindowsHelloAccountRequest, UnknownData_IV0X, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkWindowsHelloAccountRequest, PublicKey, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkWindowsHelloAccountRequest, Username, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkWindowsHelloAccountRequest, 0x0048);
		}

		// struct FClientLinkXboxAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLinkXboxAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkXboxAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkXboxAccountRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkXboxAccountRequest, UnknownData_0BIM, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLinkXboxAccountRequest, XboxToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLinkXboxAccountRequest, 0x0028);
		}

		// struct FClientLoginWithAndroidDeviceIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithAndroidDeviceIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, AndroidDevice, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, AndroidDeviceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, CreateAccount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, UnknownData_UI4M, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, CustomTags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, EncryptedRequest, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, InfoRequestParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, OS, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAndroidDeviceIDRequest, PlayerSecret, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithAndroidDeviceIDRequest, 0x0070);
		}

		// struct FClientLoginWithAppleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithAppleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAppleRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAppleRequest, UnknownData_TJEN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAppleRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAppleRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAppleRequest, IdentityToken, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAppleRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithAppleRequest, PlayerSecret, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithAppleRequest, 0x0050);
		}

		// struct FClientLoginWithCustomIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithCustomIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithCustomIDRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithCustomIDRequest, UnknownData_JUXU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithCustomIDRequest, CustomId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithCustomIDRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithCustomIDRequest, EncryptedRequest, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithCustomIDRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithCustomIDRequest, PlayerSecret, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithCustomIDRequest, 0x0050);
		}

		// struct FClientLoginWithEmailAddressRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithEmailAddressRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithEmailAddressRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithEmailAddressRequest, Email, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithEmailAddressRequest, InfoRequestParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithEmailAddressRequest, Password, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithEmailAddressRequest, 0x0038);
		}

		// struct FClientLoginWithFacebookRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithFacebookRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookRequest, AccessToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookRequest, CreateAccount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookRequest, UnknownData_OTUS, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookRequest, EncryptedRequest, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookRequest, PlayerSecret, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithFacebookRequest, 0x0050);
		}

		// struct FClientLoginWithFacebookInstantGamesIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithFacebookInstantGamesIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookInstantGamesIdRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookInstantGamesIdRequest, UnknownData_RRCR, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookInstantGamesIdRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookInstantGamesIdRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookInstantGamesIdRequest, FacebookInstantGamesSignature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookInstantGamesIdRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithFacebookInstantGamesIdRequest, PlayerSecret, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithFacebookInstantGamesIdRequest, 0x0050);
		}

		// struct FClientLoginWithGameCenterRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithGameCenterRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, UnknownData_YIPI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, InfoRequestParameters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, PlayerId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, PlayerSecret, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, PublicKeyUrl, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, Salt, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, Signature, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGameCenterRequest, Timestamp, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithGameCenterRequest, 0x0090);
		}

		// struct FClientLoginWithGoogleAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithGoogleAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGoogleAccountRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGoogleAccountRequest, UnknownData_AVDN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGoogleAccountRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGoogleAccountRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGoogleAccountRequest, InfoRequestParameters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGoogleAccountRequest, PlayerSecret, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithGoogleAccountRequest, ServerAuthCode, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithGoogleAccountRequest, 0x0050);
		}

		// struct FClientLoginWithIOSDeviceIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithIOSDeviceIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, UnknownData_M4Q1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, DeviceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, DeviceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, EncryptedRequest, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, InfoRequestParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, OS, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithIOSDeviceIDRequest, PlayerSecret, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithIOSDeviceIDRequest, 0x0070);
		}

		// struct FClientLoginWithKongregateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithKongregateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, AuthTicket, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, CreateAccount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, UnknownData_Q5MT, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, EncryptedRequest, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, KongregateId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithKongregateRequest, PlayerSecret, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithKongregateRequest, 0x0060);
		}

		// struct FClientLoginWithNintendoServiceAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithNintendoServiceAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoServiceAccountRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoServiceAccountRequest, UnknownData_2LKZ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoServiceAccountRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoServiceAccountRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoServiceAccountRequest, IdentityToken, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoServiceAccountRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoServiceAccountRequest, PlayerSecret, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithNintendoServiceAccountRequest, 0x0050);
		}

		// struct FClientLoginWithNintendoSwitchDeviceIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithNintendoSwitchDeviceIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, UnknownData_K4UA, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, InfoRequestParameters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, NintendoSwitchDeviceId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, PlayerSecret, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithNintendoSwitchDeviceIdRequest, 0x0050);
		}

		// struct FClientLoginWithOpenIdConnectRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithOpenIdConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, ConnectionId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, CreateAccount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, UnknownData_FLLZ, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, EncryptedRequest, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, IdToken, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, InfoRequestParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithOpenIdConnectRequest, PlayerSecret, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithOpenIdConnectRequest, 0x0060);
		}

		// struct FClientLoginWithPlayFabRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithPlayFabRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPlayFabRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPlayFabRequest, InfoRequestParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPlayFabRequest, Password, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPlayFabRequest, Username, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithPlayFabRequest, 0x0038);
		}

		// struct FClientLoginWithPSNRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithPSNRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, AuthCode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, CreateAccount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, UnknownData_7MSJ, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, EncryptedRequest, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, IssuerId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, UnknownData_733K, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, PlayerSecret, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithPSNRequest, RedirectUri, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithPSNRequest, 0x0068);
		}

		// struct FClientLoginWithSteamRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithSteamRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithSteamRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithSteamRequest, UnknownData_7YNP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithSteamRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithSteamRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithSteamRequest, InfoRequestParameters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithSteamRequest, PlayerSecret, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithSteamRequest, SteamTicket, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithSteamRequest, 0x0050);
		}

		// struct FClientLoginWithTwitchRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithTwitchRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithTwitchRequest, AccessToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithTwitchRequest, CreateAccount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithTwitchRequest, UnknownData_X8PB, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithTwitchRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithTwitchRequest, EncryptedRequest, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithTwitchRequest, InfoRequestParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithTwitchRequest, PlayerSecret, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithTwitchRequest, 0x0050);
		}

		// struct FClientLoginWithWindowsHelloRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithWindowsHelloRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithWindowsHelloRequest, ChallengeSignature, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithWindowsHelloRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithWindowsHelloRequest, InfoRequestParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithWindowsHelloRequest, PublicKeyHint, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithWindowsHelloRequest, 0x0038);
		}

		// struct FClientLoginWithXboxRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientLoginWithXboxRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithXboxRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithXboxRequest, UnknownData_KK3M, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithXboxRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithXboxRequest, EncryptedRequest, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithXboxRequest, InfoRequestParameters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithXboxRequest, PlayerSecret, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientLoginWithXboxRequest, XboxToken, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientLoginWithXboxRequest, 0x0050);
		}

		// struct FClientMatchmakeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientMatchmakeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, BuildVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, GameMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, LobbyId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, Region, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, StartNewIfNoneFound, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, UnknownData_FW60, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, StatisticName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientMatchmakeRequest, TagFilter, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientMatchmakeRequest, 0x0070);
		}

		// struct FClientOpenTradeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientOpenTradeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientOpenTradeRequest, AllowedPlayerIds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientOpenTradeRequest, OfferedInventoryInstanceIds, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientOpenTradeRequest, RequestedCatalogItemIds, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientOpenTradeRequest, 0x0038);
		}

		// struct FClientPayForPurchaseRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientPayForPurchaseRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseRequest, Currency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseRequest, OrderID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseRequest, ProviderName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPayForPurchaseRequest, ProviderTransactionId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientPayForPurchaseRequest, 0x0050);
		}

		// struct FClientPurchaseItemRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientPurchaseItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, ItemId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, Price, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, UnknownData_95RH, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, StoreId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientPurchaseItemRequest, VirtualCurrency, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientPurchaseItemRequest, 0x0068);
		}

		// struct FClientRedeemCouponRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRedeemCouponRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRedeemCouponRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRedeemCouponRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRedeemCouponRequest, CouponCode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRedeemCouponRequest, CustomTags, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRedeemCouponRequest, 0x0040);
		}

		// struct FClientRefreshPSNAuthTokenRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRefreshPSNAuthTokenRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRefreshPSNAuthTokenRequest, AuthCode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRefreshPSNAuthTokenRequest, IssuerId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRefreshPSNAuthTokenRequest, UnknownData_CSUO, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRefreshPSNAuthTokenRequest, RedirectUri, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRefreshPSNAuthTokenRequest, 0x0030);
		}

		// struct FClientRegisterForIOSPushNotificationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRegisterForIOSPushNotificationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterForIOSPushNotificationRequest, ConfirmationMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterForIOSPushNotificationRequest, DeviceToken, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterForIOSPushNotificationRequest, SendPushNotificationConfirmation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterForIOSPushNotificationRequest, UnknownData_3V80, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRegisterForIOSPushNotificationRequest, 0x0030);
		}

		// struct FClientRegisterPlayFabUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRegisterPlayFabUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, Email, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, EncryptedRequest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, InfoRequestParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, Password, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, PlayerSecret, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, RequireBothUsernameAndEmail, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, UnknownData_MXCC, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterPlayFabUserRequest, Username, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRegisterPlayFabUserRequest, 0x0080);
		}

		// struct FClientRegisterWithWindowsHelloRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRegisterWithWindowsHelloRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterWithWindowsHelloRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterWithWindowsHelloRequest, DeviceName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterWithWindowsHelloRequest, EncryptedRequest, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterWithWindowsHelloRequest, InfoRequestParameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterWithWindowsHelloRequest, PlayerSecret, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterWithWindowsHelloRequest, PublicKey, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRegisterWithWindowsHelloRequest, Username, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRegisterWithWindowsHelloRequest, 0x0068);
		}

		// struct FClientRemoveContactEmailRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveContactEmailRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRemoveContactEmailRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveContactEmailRequest, 0x0010);
		}

		// struct FClientRemoveFriendRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveFriendRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRemoveFriendRequest, FriendPlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveFriendRequest, 0x0018);
		}

		// struct FClientRemoveGenericIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveGenericIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRemoveGenericIDRequest, GenericId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveGenericIDRequest, 0x0010);
		}

		// struct FClientRemoveSharedGroupMembersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRemoveSharedGroupMembersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRemoveSharedGroupMembersRequest, PlayFabIds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRemoveSharedGroupMembersRequest, SharedGroupId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRemoveSharedGroupMembersRequest, 0x0028);
		}

		// struct FClientReportAdActivityRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientReportAdActivityRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportAdActivityRequest, Activity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportAdActivityRequest, UnknownData_UZ9W, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportAdActivityRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportAdActivityRequest, PlacementId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportAdActivityRequest, RewardId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReportAdActivityRequest, 0x0038);
		}

		// struct FClientDeviceInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientDeviceInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientDeviceInfoRequest, Info, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientDeviceInfoRequest, 0x0010);
		}

		// struct FClientReportPlayerClientRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientReportPlayerClientRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportPlayerClientRequest, Comment, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportPlayerClientRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReportPlayerClientRequest, ReporteeId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReportPlayerClientRequest, 0x0030);
		}

		// struct FClientRestoreIOSPurchasesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRestoreIOSPurchasesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRestoreIOSPurchasesRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRestoreIOSPurchasesRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRestoreIOSPurchasesRequest, ReceiptData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRestoreIOSPurchasesRequest, 0x0030);
		}

		// struct FClientRewardAdActivityRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientRewardAdActivityRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityRequest, PlacementId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientRewardAdActivityRequest, RewardId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientRewardAdActivityRequest, 0x0030);
		}

		// struct FClientSendAccountRecoveryEmailRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientSendAccountRecoveryEmailRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSendAccountRecoveryEmailRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSendAccountRecoveryEmailRequest, Email, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSendAccountRecoveryEmailRequest, EmailTemplateId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientSendAccountRecoveryEmailRequest, 0x0030);
		}

		// struct FClientSetFriendTagsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientSetFriendTagsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSetFriendTagsRequest, FriendPlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSetFriendTagsRequest, Tags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientSetFriendTagsRequest, 0x0028);
		}

		// struct FClientSetPlayerSecretRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientSetPlayerSecretRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSetPlayerSecretRequest, EncryptedRequest, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSetPlayerSecretRequest, PlayerSecret, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientSetPlayerSecretRequest, 0x0028);
		}

		// struct FClientStartGameRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientStartGameRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, BuildVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, CustomCommandLineData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, CustomTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, GameMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, Region, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, UnknownData_5NKV, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartGameRequest, StatisticName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientStartGameRequest, 0x0068);
		}

		// struct FClientStartPurchaseRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientStartPurchaseRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseRequest, Items, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientStartPurchaseRequest, StoreId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientStartPurchaseRequest, 0x0040);
		}

		// struct FClientSubtractUserVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientSubtractUserVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSubtractUserVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSubtractUserVirtualCurrencyRequest, UnknownData_ANWE, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSubtractUserVirtualCurrencyRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientSubtractUserVirtualCurrencyRequest, VirtualCurrency, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientSubtractUserVirtualCurrencyRequest, 0x0028);
		}

		// struct FClientUnlinkAndroidDeviceIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkAndroidDeviceIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkAndroidDeviceIDRequest, AndroidDeviceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkAndroidDeviceIDRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkAndroidDeviceIDRequest, 0x0020);
		}

		// struct FClientUnlinkAppleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkAppleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkAppleRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkAppleRequest, 0x0010);
		}

		// struct FClientUnlinkCustomIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkCustomIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkCustomIDRequest, CustomId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkCustomIDRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkCustomIDRequest, 0x0020);
		}

		// struct FClientUnlinkFacebookAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkFacebookAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkFacebookAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkFacebookAccountRequest, 0x0010);
		}

		// struct FClientUnlinkFacebookInstantGamesIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkFacebookInstantGamesIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkFacebookInstantGamesIdRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkFacebookInstantGamesIdRequest, FacebookInstantGamesId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkFacebookInstantGamesIdRequest, 0x0020);
		}

		// struct FClientUnlinkGameCenterAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkGameCenterAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkGameCenterAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkGameCenterAccountRequest, 0x0010);
		}

		// struct FClientUnlinkGoogleAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkGoogleAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkGoogleAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkGoogleAccountRequest, 0x0010);
		}

		// struct FClientUnlinkIOSDeviceIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkIOSDeviceIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkIOSDeviceIDRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkIOSDeviceIDRequest, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkIOSDeviceIDRequest, 0x0020);
		}

		// struct FClientUnlinkKongregateAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkKongregateAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkKongregateAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkKongregateAccountRequest, 0x0010);
		}

		// struct FClientUnlinkNintendoServiceAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkNintendoServiceAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkNintendoServiceAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkNintendoServiceAccountRequest, 0x0010);
		}

		// struct FClientUnlinkNintendoSwitchDeviceIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkNintendoSwitchDeviceIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkNintendoSwitchDeviceIdRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkNintendoSwitchDeviceIdRequest, NintendoSwitchDeviceId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkNintendoSwitchDeviceIdRequest, 0x0020);
		}

		// struct FClientUnlinkOpenIdConnectRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkOpenIdConnectRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkOpenIdConnectRequest, ConnectionId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkOpenIdConnectRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkOpenIdConnectRequest, 0x0020);
		}

		// struct FClientUnlinkPSNAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkPSNAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkPSNAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkPSNAccountRequest, 0x0010);
		}

		// struct FClientUnlinkSteamAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkSteamAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkSteamAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkSteamAccountRequest, 0x0010);
		}

		// struct FClientUnlinkTwitchAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkTwitchAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkTwitchAccountRequest, AccessToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkTwitchAccountRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkTwitchAccountRequest, 0x0020);
		}

		// struct FClientUnlinkWindowsHelloAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkWindowsHelloAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkWindowsHelloAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkWindowsHelloAccountRequest, PublicKeyHint, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkWindowsHelloAccountRequest, 0x0020);
		}

		// struct FClientUnlinkXboxAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlinkXboxAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlinkXboxAccountRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlinkXboxAccountRequest, 0x0010);
		}

		// struct FClientUnlockContainerInstanceRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlockContainerInstanceRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerInstanceRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerInstanceRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerInstanceRequest, ContainerItemInstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerInstanceRequest, CustomTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerInstanceRequest, KeyItemInstanceId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlockContainerInstanceRequest, 0x0050);
		}

		// struct FClientUnlockContainerItemRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUnlockContainerItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemRequest, ContainerItemId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUnlockContainerItemRequest, CustomTags, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUnlockContainerItemRequest, 0x0040);
		}

		// struct FClientUpdateAvatarUrlRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateAvatarUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateAvatarUrlRequest, ImageUrl, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateAvatarUrlRequest, 0x0018);
		}

		// struct FClientUpdateCharacterDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateCharacterDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataRequest, Data, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataRequest, KeysToRemove, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataRequest, Permission, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterDataRequest, UnknownData_2EOP, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateCharacterDataRequest, 0x0040);
		}

		// struct FClientUpdateCharacterStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateCharacterStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterStatisticsRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterStatisticsRequest, CharacterStatistics, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateCharacterStatisticsRequest, CustomTags, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateCharacterStatisticsRequest, 0x0028);
		}

		// struct FClientUpdatePlayerStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdatePlayerStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdatePlayerStatisticsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdatePlayerStatisticsRequest, Statistics, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdatePlayerStatisticsRequest, 0x0020);
		}

		// struct FClientUpdateSharedGroupDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateSharedGroupDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateSharedGroupDataRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateSharedGroupDataRequest, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateSharedGroupDataRequest, KeysToRemove, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateSharedGroupDataRequest, Permission, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateSharedGroupDataRequest, UnknownData_A1CR, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateSharedGroupDataRequest, SharedGroupId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateSharedGroupDataRequest, 0x0040);
		}

		// struct FClientUpdateUserDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateUserDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserDataRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserDataRequest, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserDataRequest, KeysToRemove, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserDataRequest, Permission, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserDataRequest, UnknownData_1R7M, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateUserDataRequest, 0x0030);
		}

		// struct FClientUpdateUserTitleDisplayNameRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientUpdateUserTitleDisplayNameRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserTitleDisplayNameRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientUpdateUserTitleDisplayNameRequest, DisplayName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientUpdateUserTitleDisplayNameRequest, 0x0020);
		}

		// struct FClientValidateAmazonReceiptRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateAmazonReceiptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptRequest, CurrencyCode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptRequest, PurchasePrice, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptRequest, UnknownData_G9C7, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptRequest, ReceiptId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateAmazonReceiptRequest, UserId, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateAmazonReceiptRequest, 0x0058);
		}

		// struct FClientValidateGooglePlayPurchaseRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateGooglePlayPurchaseRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseRequest, CurrencyCode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseRequest, PurchasePrice, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseRequest, UnknownData_C26X, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseRequest, ReceiptJson, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateGooglePlayPurchaseRequest, Signature, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateGooglePlayPurchaseRequest, 0x0058);
		}

		// struct FClientValidateIOSReceiptRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateIOSReceiptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateIOSReceiptRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateIOSReceiptRequest, CurrencyCode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateIOSReceiptRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateIOSReceiptRequest, PurchasePrice, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateIOSReceiptRequest, UnknownData_0LLI, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateIOSReceiptRequest, ReceiptData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateIOSReceiptRequest, 0x0048);
		}

		// struct FClientValidateWindowsReceiptRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientValidateWindowsReceiptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateWindowsReceiptRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateWindowsReceiptRequest, CurrencyCode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateWindowsReceiptRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateWindowsReceiptRequest, PurchasePrice, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateWindowsReceiptRequest, UnknownData_80N0, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientValidateWindowsReceiptRequest, Receipt, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientValidateWindowsReceiptRequest, 0x0048);
		}

		// struct FClientWriteClientCharacterEventRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientWriteClientCharacterEventRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientCharacterEventRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientCharacterEventRequest, CharacterId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientCharacterEventRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientCharacterEventRequest, EventName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientCharacterEventRequest, Timestamp, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientWriteClientCharacterEventRequest, 0x0048);
		}

		// struct FClientWriteClientPlayerEventRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientWriteClientPlayerEventRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientPlayerEventRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientPlayerEventRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientPlayerEventRequest, EventName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteClientPlayerEventRequest, Timestamp, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientWriteClientPlayerEventRequest, 0x0038);
		}

		// struct FClientWriteTitleEventRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ClientWriteTitleEventRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteTitleEventRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteTitleEventRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteTitleEventRequest, EventName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientWriteTitleEventRequest, Timestamp, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientWriteTitleEventRequest, 0x0038);
		}

		// struct FCloudScriptExecuteCloudScriptResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptExecuteCloudScriptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, APIRequestsIssued, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, UnknownData_4S6G, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, Error, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, ExecutionTimeSeconds, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, UnknownData_ZHVK, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, FunctionName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, FunctionResult, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, FunctionResultTooLarge, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, UnknownData_GBXB, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, HttpRequestsIssued, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, Logs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, LogsTooLarge, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, UnknownData_VS3B, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, MemoryConsumedBytes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, ProcessorTimeSeconds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteCloudScriptResult, Revision, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptExecuteCloudScriptResult, 0x0060);
		}

		// struct FCloudScriptExecuteFunctionResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptExecuteFunctionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionResult, Error, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionResult, ExecutionTimeMilliseconds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionResult, UnknownData_KMBZ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionResult, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionResult, FunctionResult, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionResult, FunctionResultTooLarge, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionResult, UnknownData_DFX2, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptExecuteFunctionResult, 0x0038);
		}

		// struct FCloudScriptListFunctionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptListFunctionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptListFunctionsResult, Functions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptListFunctionsResult, 0x0018);
		}

		// struct FCloudScriptListHttpFunctionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptListHttpFunctionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptListHttpFunctionsResult, Functions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptListHttpFunctionsResult, 0x0018);
		}

		// struct FCloudScriptListQueuedFunctionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptListQueuedFunctionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptListQueuedFunctionsResult, Functions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptListQueuedFunctionsResult, 0x0018);
		}

		// struct FCloudScriptEmptyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptEmptyResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptEmptyResult, 0x0008);
		}

		// struct FCloudScriptExecuteEntityCloudScriptRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptExecuteEntityCloudScriptRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, FunctionParameter, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, GeneratePlayStreamEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, RevisionSelection, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, UnknownData_5810, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteEntityCloudScriptRequest, SpecificRevision, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptExecuteEntityCloudScriptRequest, 0x0038);
		}

		// struct FCloudScriptExecuteFunctionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptExecuteFunctionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionRequest, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionRequest, FunctionParameter, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionRequest, GeneratePlayStreamEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptExecuteFunctionRequest, UnknownData_IIP5, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptExecuteFunctionRequest, 0x0038);
		}

		// struct FCloudScriptListFunctionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptListFunctionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptListFunctionsRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptListFunctionsRequest, 0x0010);
		}

		// struct FCloudScriptPostFunctionResultForEntityTriggeredActionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptPostFunctionResultForEntityTriggeredActionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForEntityTriggeredActionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForEntityTriggeredActionRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForEntityTriggeredActionRequest, FunctionResult, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptPostFunctionResultForEntityTriggeredActionRequest, 0x0020);
		}

		// struct FCloudScriptPostFunctionResultForFunctionExecutionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptPostFunctionResultForFunctionExecutionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForFunctionExecutionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForFunctionExecutionRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForFunctionExecutionRequest, FunctionResult, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptPostFunctionResultForFunctionExecutionRequest, 0x0020);
		}

		// struct FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptPostFunctionResultForPlayerTriggeredActionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, FunctionResult, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, PlayerProfile, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, PlayStreamEventEnvelope, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptPostFunctionResultForPlayerTriggeredActionRequest, 0x0030);
		}

		// struct FCloudScriptPostFunctionResultForScheduledTaskRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptPostFunctionResultForScheduledTaskRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForScheduledTaskRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForScheduledTaskRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForScheduledTaskRequest, FunctionResult, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptPostFunctionResultForScheduledTaskRequest, ScheduledTaskId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptPostFunctionResultForScheduledTaskRequest, 0x0028);
		}

		// struct FCloudScriptRegisterHttpFunctionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptRegisterHttpFunctionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptRegisterHttpFunctionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptRegisterHttpFunctionRequest, FunctionName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptRegisterHttpFunctionRequest, FunctionUrl, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptRegisterHttpFunctionRequest, 0x0030);
		}

		// struct FCloudScriptRegisterQueuedFunctionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptRegisterQueuedFunctionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptRegisterQueuedFunctionRequest, ConnectionString, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptRegisterQueuedFunctionRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptRegisterQueuedFunctionRequest, FunctionName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptRegisterQueuedFunctionRequest, QueueName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptRegisterQueuedFunctionRequest, 0x0040);
		}

		// struct FCloudScriptUnregisterFunctionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__CloudScriptUnregisterFunctionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptUnregisterFunctionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudScriptUnregisterFunctionRequest, FunctionName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudScriptUnregisterFunctionRequest, 0x0020);
		}

		// struct FDataAbortFileUploadsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataAbortFileUploadsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsResponse, ProfileVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsResponse, UnknownData_6KZQ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataAbortFileUploadsResponse, 0x0018);
		}

		// struct FDataAbortFileUploadsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataAbortFileUploadsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsRequest, FileNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsRequest, ProfileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataAbortFileUploadsRequest, UnknownData_N4OL, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataAbortFileUploadsRequest, 0x0030);
		}

		// struct FDataDeleteFilesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataDeleteFilesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesResponse, ProfileVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesResponse, UnknownData_OGRF, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataDeleteFilesResponse, 0x0018);
		}

		// struct FDataFinalizeFileUploadsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataFinalizeFileUploadsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsResponse, MetaData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsResponse, ProfileVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsResponse, UnknownData_PWGV, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataFinalizeFileUploadsResponse, 0x0020);
		}

		// struct FDataGetFilesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataGetFilesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetFilesResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetFilesResponse, MetaData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetFilesResponse, ProfileVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetFilesResponse, UnknownData_A6GG, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataGetFilesResponse, 0x0020);
		}

		// struct FDataGetObjectsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataGetObjectsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsResponse, Objects, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsResponse, ProfileVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsResponse, UnknownData_0R2U, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataGetObjectsResponse, 0x0020);
		}

		// struct FDataInitiateFileUploadsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataInitiateFileUploadsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsResponse, ProfileVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsResponse, UnknownData_L0NV, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsResponse, UploadDetails, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataInitiateFileUploadsResponse, 0x0028);
		}

		// struct FDataSetObjectsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataSetObjectsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsResponse, ProfileVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsResponse, UnknownData_2JMS, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsResponse, SetResults, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataSetObjectsResponse, 0x0020);
		}

		// struct FDataDeleteFilesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataDeleteFilesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesRequest, FileNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesRequest, ProfileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataDeleteFilesRequest, UnknownData_5I9C, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataDeleteFilesRequest, 0x0030);
		}

		// struct FDataFinalizeFileUploadsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataFinalizeFileUploadsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsRequest, FileNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsRequest, ProfileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataFinalizeFileUploadsRequest, UnknownData_5NB8, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataFinalizeFileUploadsRequest, 0x0030);
		}

		// struct FDataGetFilesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataGetFilesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetFilesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetFilesRequest, Entity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataGetFilesRequest, 0x0018);
		}

		// struct FDataGetObjectsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataGetObjectsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsRequest, EscapeObject, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataGetObjectsRequest, UnknownData_MKIF, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataGetObjectsRequest, 0x0020);
		}

		// struct FDataInitiateFileUploadsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataInitiateFileUploadsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsRequest, FileNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsRequest, ProfileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataInitiateFileUploadsRequest, UnknownData_62TW, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataInitiateFileUploadsRequest, 0x0030);
		}

		// struct FDataSetObjectsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__DataSetObjectsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsRequest, ExpectedProfileVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsRequest, UnknownData_EYZG, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataSetObjectsRequest, Objects, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataSetObjectsRequest, 0x0030);
		}

		// struct FEventsWriteEventsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__EventsWriteEventsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsWriteEventsResponse, AssignedEventIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventsWriteEventsResponse, 0x0018);
		}

		// struct FEventsWriteEventsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__EventsWriteEventsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsWriteEventsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventsWriteEventsRequest, Events, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventsWriteEventsRequest, 0x0020);
		}

		// struct FExperimentationCreateExclusionGroupResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationCreateExclusionGroupResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExclusionGroupResult, ExclusionGroupId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationCreateExclusionGroupResult, 0x0018);
		}

		// struct FExperimentationCreateExclusionGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationCreateExclusionGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExclusionGroupRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExclusionGroupRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExclusionGroupRequest, Name, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationCreateExclusionGroupRequest, 0x0030);
		}

		// struct FExperimentationCreateExperimentResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationCreateExperimentResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentResult, ExperimentId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationCreateExperimentResult, 0x0018);
		}

		// struct FExperimentationCreateExperimentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationCreateExperimentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, EndDate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, ExclusionGroupId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, ExclusionGroupTrafficAllocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, ExperimentType, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, UnknownData_GQ7G, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, Name, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, SegmentId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, StartDate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, TitlePlayerAccountTestIds, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationCreateExperimentRequest, Variants, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationCreateExperimentRequest, 0x0098);
		}

		// struct FExperimentationEmptyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationEmptyResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationEmptyResponse, 0x0008);
		}

		// struct FExperimentationGetExclusionGroupsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetExclusionGroupsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetExclusionGroupsResult, ExclusionGroups, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetExclusionGroupsResult, 0x0018);
		}

		// struct FExperimentationGetExclusionGroupTrafficResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetExclusionGroupTrafficResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetExclusionGroupTrafficResult, TrafficAllocations, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetExclusionGroupTrafficResult, 0x0018);
		}

		// struct FExperimentationGetExperimentsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetExperimentsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetExperimentsResult, Experiments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetExperimentsResult, 0x0018);
		}

		// struct FExperimentationGetLatestScorecardResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetLatestScorecardResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetLatestScorecardResult, Scorecard, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetLatestScorecardResult, 0x0010);
		}

		// struct FExperimentationGetTreatmentAssignmentResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetTreatmentAssignmentResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetTreatmentAssignmentResult, TreatmentAssignment, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetTreatmentAssignmentResult, 0x0010);
		}

		// struct FExperimentationDeleteExclusionGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationDeleteExclusionGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationDeleteExclusionGroupRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationDeleteExclusionGroupRequest, ExclusionGroupId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationDeleteExclusionGroupRequest, 0x0020);
		}

		// struct FExperimentationDeleteExperimentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationDeleteExperimentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationDeleteExperimentRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationDeleteExperimentRequest, ExperimentId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationDeleteExperimentRequest, 0x0020);
		}

		// struct FExperimentationGetExclusionGroupsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetExclusionGroupsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetExclusionGroupsRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetExclusionGroupsRequest, 0x0010);
		}

		// struct FExperimentationGetExclusionGroupTrafficRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetExclusionGroupTrafficRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetExclusionGroupTrafficRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetExclusionGroupTrafficRequest, ExclusionGroupId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetExclusionGroupTrafficRequest, 0x0020);
		}

		// struct FExperimentationGetExperimentsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetExperimentsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetExperimentsRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetExperimentsRequest, 0x0010);
		}

		// struct FExperimentationGetLatestScorecardRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetLatestScorecardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetLatestScorecardRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetLatestScorecardRequest, ExperimentId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetLatestScorecardRequest, 0x0020);
		}

		// struct FExperimentationGetTreatmentAssignmentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationGetTreatmentAssignmentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetTreatmentAssignmentRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationGetTreatmentAssignmentRequest, Entity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationGetTreatmentAssignmentRequest, 0x0018);
		}

		// struct FExperimentationStartExperimentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationStartExperimentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationStartExperimentRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationStartExperimentRequest, ExperimentId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationStartExperimentRequest, 0x0020);
		}

		// struct FExperimentationStopExperimentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationStopExperimentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationStopExperimentRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationStopExperimentRequest, ExperimentId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationStopExperimentRequest, 0x0020);
		}

		// struct FExperimentationUpdateExclusionGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationUpdateExclusionGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExclusionGroupRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExclusionGroupRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExclusionGroupRequest, ExclusionGroupId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExclusionGroupRequest, Name, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationUpdateExclusionGroupRequest, 0x0040);
		}

		// struct FExperimentationUpdateExperimentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ExperimentationUpdateExperimentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, Description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, EndDate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, ExclusionGroupId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, ExclusionGroupTrafficAllocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, ExperimentType, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, UnknownData_VPQ3, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, ID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, Name, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, SegmentId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, StartDate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, TitlePlayerAccountTestIds, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExperimentationUpdateExperimentRequest, Variants, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExperimentationUpdateExperimentRequest, 0x00A8);
		}

		// struct FGroupsEmptyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsEmptyResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsEmptyResponse, 0x0008);
		}

		// struct FGroupsAcceptGroupApplicationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsAcceptGroupApplicationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAcceptGroupApplicationRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAcceptGroupApplicationRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAcceptGroupApplicationRequest, Group, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsAcceptGroupApplicationRequest, 0x0020);
		}

		// struct FGroupsAcceptGroupInvitationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsAcceptGroupInvitationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAcceptGroupInvitationRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAcceptGroupInvitationRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAcceptGroupInvitationRequest, Group, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsAcceptGroupInvitationRequest, 0x0020);
		}

		// struct FGroupsAddMembersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsAddMembersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAddMembersRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAddMembersRequest, Group, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAddMembersRequest, Members, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsAddMembersRequest, RoleId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsAddMembersRequest, 0x0038);
		}

		// struct FGroupsApplyToGroupResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsApplyToGroupResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupResponse, Entity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupResponse, Expires, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupResponse, Group, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsApplyToGroupResponse, 0x0028);
		}

		// struct FGroupsApplyToGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsApplyToGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupRequest, AutoAcceptOutstandingInvite, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupRequest, UnknownData_MNRU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupRequest, Entity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsApplyToGroupRequest, Group, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsApplyToGroupRequest, 0x0028);
		}

		// struct FGroupsBlockEntityRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsBlockEntityRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsBlockEntityRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsBlockEntityRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsBlockEntityRequest, Group, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsBlockEntityRequest, 0x0020);
		}

		// struct FGroupsChangeMemberRoleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsChangeMemberRoleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsChangeMemberRoleRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsChangeMemberRoleRequest, DestinationRoleId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsChangeMemberRoleRequest, Group, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsChangeMemberRoleRequest, Members, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsChangeMemberRoleRequest, OriginRoleId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsChangeMemberRoleRequest, 0x0048);
		}

		// struct FGroupsCreateGroupResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsCreateGroupResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, AdminRoleId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, Created, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, GroupName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, MemberRoleId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, ProfileVersion, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, UnknownData_RIT4, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupResponse, Roles, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsCreateGroupResponse, 0x0060);
		}

		// struct FGroupsCreateGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsCreateGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRequest, GroupName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsCreateGroupRequest, 0x0028);
		}

		// struct FGroupsCreateGroupRoleResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsCreateGroupRoleResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleResponse, ProfileVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleResponse, UnknownData_HC06, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleResponse, RoleId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleResponse, RoleName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsCreateGroupRoleResponse, 0x0030);
		}

		// struct FGroupsCreateGroupRoleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsCreateGroupRoleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleRequest, Group, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleRequest, RoleId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsCreateGroupRoleRequest, RoleName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsCreateGroupRoleRequest, 0x0038);
		}

		// struct FGroupsGetGroupResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsGetGroupResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, AdminRoleId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, Created, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, GroupName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, MemberRoleId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, ProfileVersion, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, UnknownData_06TQ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupResponse, Roles, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsGetGroupResponse, 0x0060);
		}

		// struct FGroupsInviteToGroupResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsInviteToGroupResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupResponse, Expires, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupResponse, Group, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupResponse, InvitedByEntity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupResponse, InvitedEntity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupResponse, RoleId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsInviteToGroupResponse, 0x0040);
		}

		// struct FGroupsIsMemberResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsIsMemberResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsIsMemberResponse, IsMember, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsIsMemberResponse, UnknownData_MKKY, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsIsMemberResponse, 0x0010);
		}

		// struct FGroupsListGroupApplicationsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupApplicationsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupApplicationsResponse, Applications, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupApplicationsResponse, 0x0018);
		}

		// struct FGroupsListGroupBlocksResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupBlocksResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupBlocksResponse, BlockedEntities, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupBlocksResponse, 0x0018);
		}

		// struct FGroupsListGroupInvitationsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupInvitationsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupInvitationsResponse, Invitations, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupInvitationsResponse, 0x0018);
		}

		// struct FGroupsListGroupMembersResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupMembersResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupMembersResponse, Members, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupMembersResponse, 0x0018);
		}

		// struct FGroupsListMembershipResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListMembershipResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListMembershipResponse, Groups, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListMembershipResponse, 0x0018);
		}

		// struct FGroupsListMembershipOpportunitiesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListMembershipOpportunitiesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListMembershipOpportunitiesResponse, Applications, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListMembershipOpportunitiesResponse, Invitations, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListMembershipOpportunitiesResponse, 0x0028);
		}

		// struct FGroupsUpdateGroupResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsUpdateGroupResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupResponse, OperationReason, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupResponse, ProfileVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupResponse, SetResult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupResponse, UnknownData_2MY1, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsUpdateGroupResponse, 0x0020);
		}

		// struct FGroupsUpdateGroupRoleResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsUpdateGroupRoleResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleResponse, OperationReason, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleResponse, ProfileVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleResponse, SetResult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleResponse, UnknownData_LDT0, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsUpdateGroupRoleResponse, 0x0020);
		}

		// struct FGroupsDeleteGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsDeleteGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsDeleteGroupRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsDeleteGroupRequest, Group, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsDeleteGroupRequest, 0x0018);
		}

		// struct FGroupsDeleteRoleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsDeleteRoleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsDeleteRoleRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsDeleteRoleRequest, Group, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsDeleteRoleRequest, RoleId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsDeleteRoleRequest, 0x0028);
		}

		// struct FGroupsGetGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsGetGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupRequest, Group, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsGetGroupRequest, GroupName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsGetGroupRequest, 0x0028);
		}

		// struct FGroupsInviteToGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsInviteToGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupRequest, AutoAcceptOutstandingApplication, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupRequest, UnknownData_2JHW, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupRequest, Entity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupRequest, Group, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsInviteToGroupRequest, RoleId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsInviteToGroupRequest, 0x0038);
		}

		// struct FGroupsIsMemberRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsIsMemberRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsIsMemberRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsIsMemberRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsIsMemberRequest, Group, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsIsMemberRequest, RoleId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsIsMemberRequest, 0x0030);
		}

		// struct FGroupsListGroupApplicationsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupApplicationsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupApplicationsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupApplicationsRequest, Group, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupApplicationsRequest, 0x0018);
		}

		// struct FGroupsListGroupBlocksRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupBlocksRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupBlocksRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupBlocksRequest, Group, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupBlocksRequest, 0x0018);
		}

		// struct FGroupsListGroupInvitationsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupInvitationsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupInvitationsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupInvitationsRequest, Group, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupInvitationsRequest, 0x0018);
		}

		// struct FGroupsListGroupMembersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListGroupMembersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupMembersRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListGroupMembersRequest, Group, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListGroupMembersRequest, 0x0018);
		}

		// struct FGroupsListMembershipRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListMembershipRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListMembershipRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListMembershipRequest, Entity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListMembershipRequest, 0x0018);
		}

		// struct FGroupsListMembershipOpportunitiesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsListMembershipOpportunitiesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListMembershipOpportunitiesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsListMembershipOpportunitiesRequest, Entity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsListMembershipOpportunitiesRequest, 0x0018);
		}

		// struct FGroupsRemoveGroupApplicationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsRemoveGroupApplicationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveGroupApplicationRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveGroupApplicationRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveGroupApplicationRequest, Group, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsRemoveGroupApplicationRequest, 0x0020);
		}

		// struct FGroupsRemoveGroupInvitationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsRemoveGroupInvitationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveGroupInvitationRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveGroupInvitationRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveGroupInvitationRequest, Group, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsRemoveGroupInvitationRequest, 0x0020);
		}

		// struct FGroupsRemoveMembersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsRemoveMembersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveMembersRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveMembersRequest, Group, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveMembersRequest, Members, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsRemoveMembersRequest, RoleId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsRemoveMembersRequest, 0x0038);
		}

		// struct FGroupsUnblockEntityRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsUnblockEntityRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUnblockEntityRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUnblockEntityRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUnblockEntityRequest, Group, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsUnblockEntityRequest, 0x0020);
		}

		// struct FGroupsUpdateGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsUpdateGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRequest, AdminRoleId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRequest, ExpectedProfileVersion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRequest, UnknownData_7MGK, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRequest, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRequest, GroupName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRequest, MemberRoleId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsUpdateGroupRequest, 0x0050);
		}

		// struct FGroupsUpdateGroupRoleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__GroupsUpdateGroupRoleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleRequest, ExpectedProfileVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleRequest, UnknownData_0V1T, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleRequest, Group, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleRequest, RoleId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroupsUpdateGroupRoleRequest, RoleName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroupsUpdateGroupRoleRequest, 0x0040);
		}

		// struct FInsightsInsightsGetDetailsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsGetDetailsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetDetailsResponse, DataUsageMb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetDetailsResponse, UnknownData_ZYEY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetDetailsResponse, ErrorMessage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetDetailsResponse, Limits, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetDetailsResponse, PendingOperations, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetDetailsResponse, PerformanceLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetDetailsResponse, RetentionDays, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsGetDetailsResponse, 0x0040);
		}

		// struct FInsightsInsightsGetLimitsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsGetLimitsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetLimitsResponse, DefaultPerformanceLevel, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetLimitsResponse, DefaultStorageRetentionDays, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetLimitsResponse, StorageMaxRetentionDays, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetLimitsResponse, StorageMinRetentionDays, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetLimitsResponse, SubMeters, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsGetLimitsResponse, 0x0028);
		}

		// struct FInsightsInsightsGetOperationStatusResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsGetOperationStatusResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, OperationCompletedTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, OperationId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, OperationLastUpdated, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, OperationStartedTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, OperationType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, OperationValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, UnknownData_9THO, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusResponse, Status, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsGetOperationStatusResponse, 0x0080);
		}

		// struct FInsightsInsightsGetPendingOperationsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsGetPendingOperationsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetPendingOperationsResponse, PendingOperations, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsGetPendingOperationsResponse, 0x0018);
		}

		// struct FInsightsInsightsOperationResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsOperationResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsOperationResponse, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsOperationResponse, OperationId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsOperationResponse, OperationType, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsOperationResponse, 0x0038);
		}

		// struct FInsightsInsightsEmptyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsEmptyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsEmptyRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsEmptyRequest, 0x0010);
		}

		// struct FInsightsInsightsGetOperationStatusRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsGetOperationStatusRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetOperationStatusRequest, OperationId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsGetOperationStatusRequest, 0x0020);
		}

		// struct FInsightsInsightsGetPendingOperationsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsGetPendingOperationsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetPendingOperationsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsGetPendingOperationsRequest, OperationType, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsGetPendingOperationsRequest, 0x0020);
		}

		// struct FInsightsInsightsSetPerformanceRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsSetPerformanceRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsSetPerformanceRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsSetPerformanceRequest, PerformanceLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsSetPerformanceRequest, UnknownData_6C7W, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsSetPerformanceRequest, 0x0018);
		}

		// struct FInsightsInsightsSetStorageRetentionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__InsightsInsightsSetStorageRetentionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsSetStorageRetentionRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsSetStorageRetentionRequest, RetentionDays, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInsightsInsightsSetStorageRetentionRequest, UnknownData_AA2V, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInsightsInsightsSetStorageRetentionRequest, 0x0018);
		}

		// struct FLocalizationGetLanguageListResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__LocalizationGetLanguageListResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationGetLanguageListResponse, LanguageList, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizationGetLanguageListResponse, 0x0018);
		}

		// struct FLocalizationGetLanguageListRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__LocalizationGetLanguageListRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizationGetLanguageListRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizationGetLanguageListRequest, 0x0010);
		}

		// struct FMatchmakerAuthUserResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerAuthUserResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerAuthUserResponse, Authorized, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerAuthUserResponse, UnknownData_UYGM, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerAuthUserResponse, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerAuthUserResponse, 0x0020);
		}

		// struct FMatchmakerAuthUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerAuthUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerAuthUserRequest, AuthorizationTicket, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerAuthUserRequest, 0x0018);
		}

		// struct FMatchmakerPlayerJoinedResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerPlayerJoinedResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerPlayerJoinedResponse, 0x0008);
		}

		// struct FMatchmakerPlayerLeftResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerPlayerLeftResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerPlayerLeftResponse, 0x0008);
		}

		// struct FMatchmakerStartGameResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerStartGameResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameResponse, GameID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameResponse, ServerIPV4Address, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameResponse, ServerIPV6Address, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameResponse, ServerPort, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameResponse, UnknownData_WDMP, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameResponse, ServerPublicDNSName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerStartGameResponse, 0x0050);
		}

		// struct FMatchmakerUserInfoResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerUserInfoResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, Inventory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, IsDeveloper, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, UnknownData_S80N, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, PlayFabId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, SteamID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, TitleDisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, Username, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, VirtualCurrency, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoResponse, VirtualCurrencyRechargeTimes, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerUserInfoResponse, 0x0070);
		}

		// struct FMatchmakerPlayerJoinedRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerPlayerJoinedRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerPlayerJoinedRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerPlayerJoinedRequest, LobbyId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerPlayerJoinedRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerPlayerJoinedRequest, 0x0030);
		}

		// struct FMatchmakerPlayerLeftRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerPlayerLeftRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerPlayerLeftRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerPlayerLeftRequest, LobbyId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerPlayerLeftRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerPlayerLeftRequest, 0x0030);
		}

		// struct FMatchmakerStartGameRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerStartGameRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameRequest, Build, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameRequest, CustomCommandLineData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameRequest, ExternalMatchmakerEventEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameRequest, GameMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameRequest, Region, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerStartGameRequest, UnknownData_K96D, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerStartGameRequest, 0x0058);
		}

		// struct FMatchmakerUserInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MatchmakerUserInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoRequest, MinCatalogVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoRequest, UnknownData_M5NY, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakerUserInfoRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakerUserInfoRequest, 0x0028);
		}

		// struct FMultiplayerCancelAllMatchmakingTicketsForPlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelAllMatchmakingTicketsForPlayerResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelAllMatchmakingTicketsForPlayerResult, 0x0008);
		}

		// struct FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelAllMatchmakingTicketsForPlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest, QueueName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest, 0x0028);
		}

		// struct FMultiplayerCancelAllServerBackfillTicketsForPlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelAllServerBackfillTicketsForPlayerResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelAllServerBackfillTicketsForPlayerResult, 0x0008);
		}

		// struct FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelAllServerBackfillTicketsForPlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest, QueueName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest, 0x0028);
		}

		// struct FMultiplayerCancelMatchmakingTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelMatchmakingTicketResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelMatchmakingTicketResult, 0x0008);
		}

		// struct FMultiplayerCancelMatchmakingTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelMatchmakingTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelMatchmakingTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelMatchmakingTicketRequest, QueueName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelMatchmakingTicketRequest, TicketId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelMatchmakingTicketRequest, 0x0030);
		}

		// struct FMultiplayerCancelServerBackfillTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelServerBackfillTicketResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelServerBackfillTicketResult, 0x0008);
		}

		// struct FMultiplayerCancelServerBackfillTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCancelServerBackfillTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelServerBackfillTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelServerBackfillTicketRequest, QueueName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCancelServerBackfillTicketRequest, TicketId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCancelServerBackfillTicketRequest, 0x0030);
		}

		// struct FMultiplayerBuildAliasDetailsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerBuildAliasDetailsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerBuildAliasDetailsResponse, AliasId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerBuildAliasDetailsResponse, AliasName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerBuildAliasDetailsResponse, BuildSelectionCriteria, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerBuildAliasDetailsResponse, 0x0038);
		}

		// struct FMultiplayerCreateBuildAliasRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateBuildAliasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildAliasRequest, AliasName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildAliasRequest, BuildSelectionCriteria, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildAliasRequest, CustomTags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateBuildAliasRequest, 0x0030);
		}

		// struct FMultiplayerCreateBuildWithCustomContainerResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateBuildWithCustomContainerResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, AreAssetsReadonly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, UnknownData_P8T8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, BuildId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, BuildName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, ContainerFlavor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, UnknownData_LTRH, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, ContainerRunCommand, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, CreationTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, CustomGameContainerImage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, GameAssetReferences, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, GameCertificateReferences, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, LinuxInstrumentationConfiguration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, MetaData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, MultiplayerServerCountPerVm, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, UnknownData_6XLV, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, OsPlatform, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, Ports, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, RegionConfigurations, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, ServerType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, UseStreamingForAssetDownloads, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, VmSize, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerResponse, UnknownData_2DA0, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateBuildWithCustomContainerResponse, 0x00E0);
		}

		// struct FMultiplayerCreateBuildWithCustomContainerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateBuildWithCustomContainerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, AreAssetsReadonly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, UnknownData_UYT9, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, BuildName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, ContainerFlavor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, UnknownData_4PAJ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, ContainerImageReference, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, ContainerRunCommand, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, CustomTags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, GameAssetReferences, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, GameCertificateReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, LinuxInstrumentationConfiguration, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, MetaData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, MultiplayerServerCountPerVm, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, UnknownData_HSTK, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, Ports, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, RegionConfigurations, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, UseStreamingForAssetDownloads, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, VmSize, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithCustomContainerRequest, UnknownData_4BSP, 0x00A2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateBuildWithCustomContainerRequest, 0x00A8);
		}

		// struct FMultiplayerCreateBuildWithManagedContainerResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateBuildWithManagedContainerResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, AreAssetsReadonly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, UnknownData_DGWY, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, BuildId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, BuildName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, ContainerFlavor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, UnknownData_PXOZ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, CreationTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, GameAssetReferences, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, GameCertificateReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, GameWorkingDirectory, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, InstrumentationConfiguration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, MetaData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, MultiplayerServerCountPerVm, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, UnknownData_2S3H, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, OsPlatform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, Ports, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, RegionConfigurations, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, ServerType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, StartMultiplayerServerCommand, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, UseStreamingForAssetDownloads, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, VmSize, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerResponse, UnknownData_60P9, 0x00E2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateBuildWithManagedContainerResponse, 0x00E8);
		}

		// struct FMultiplayerCreateBuildWithManagedContainerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateBuildWithManagedContainerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, AreAssetsReadonly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, UnknownData_FNEA, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, BuildName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, ContainerFlavor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, UnknownData_644H, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, GameAssetReferences, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, GameCertificateReferences, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, GameWorkingDirectory, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, InstrumentationConfiguration, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, MetaData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, MultiplayerServerCountPerVm, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, UnknownData_0A5E, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, Ports, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, RegionConfigurations, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, StartMultiplayerServerCommand, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, UseStreamingForAssetDownloads, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, VmSize, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithManagedContainerRequest, UnknownData_UI3T, 0x00AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateBuildWithManagedContainerRequest, 0x00B0);
		}

		// struct FMultiplayerCreateBuildWithProcessBasedServerResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateBuildWithProcessBasedServerResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, AreAssetsReadonly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, UnknownData_5MCS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, BuildId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, BuildName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, ContainerFlavor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, UnknownData_G1PB, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, CreationTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, GameAssetReferences, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, GameCertificateReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, GameWorkingDirectory, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, InstrumentationConfiguration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, IsOSPreview, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, UnknownData_5HMF, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, MetaData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, MultiplayerServerCountPerVm, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, UnknownData_QVX4, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, OsPlatform, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, Ports, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, RegionConfigurations, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, ServerType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, StartMultiplayerServerCommand, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, UseStreamingForAssetDownloads, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, VmSize, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, UnknownData_A3BS, 0x00EA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateBuildWithProcessBasedServerResponse, 0x00F0);
		}

		// struct FMultiplayerCreateBuildWithProcessBasedServerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateBuildWithProcessBasedServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, AreAssetsReadonly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, UnknownData_T63B, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, BuildName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, GameAssetReferences, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, GameCertificateReferences, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, GameWorkingDirectory, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, InstrumentationConfiguration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, IsOSPreview, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, UnknownData_L19U, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, MetaData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, MultiplayerServerCountPerVm, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, UnknownData_YK1E, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, OsPlatform, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, Ports, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, RegionConfigurations, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, StartMultiplayerServerCommand, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, UseStreamingForAssetDownloads, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, VmSize, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, UnknownData_QJ6X, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateBuildWithProcessBasedServerRequest, 0x00C0);
		}

		// struct FMultiplayerCreateMatchmakingTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateMatchmakingTicketResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateMatchmakingTicketResult, TicketId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateMatchmakingTicketResult, 0x0018);
		}

		// struct FMultiplayerCreateMatchmakingTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateMatchmakingTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateMatchmakingTicketRequest, Creator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateMatchmakingTicketRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateMatchmakingTicketRequest, GiveUpAfterSeconds, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateMatchmakingTicketRequest, UnknownData_7CCW, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateMatchmakingTicketRequest, MembersToMatchWith, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateMatchmakingTicketRequest, QueueName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateMatchmakingTicketRequest, 0x0040);
		}

		// struct FMultiplayerCreateRemoteUserResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateRemoteUserResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserResponse, ExpirationTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserResponse, Password, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserResponse, Username, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateRemoteUserResponse, 0x0038);
		}

		// struct FMultiplayerCreateRemoteUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateRemoteUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserRequest, ExpirationTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserRequest, Region, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserRequest, Username, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateRemoteUserRequest, VmId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateRemoteUserRequest, 0x0060);
		}

		// struct FMultiplayerCreateServerBackfillTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateServerBackfillTicketResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerBackfillTicketResult, TicketId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateServerBackfillTicketResult, 0x0018);
		}

		// struct FMultiplayerCreateServerBackfillTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateServerBackfillTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerBackfillTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerBackfillTicketRequest, GiveUpAfterSeconds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerBackfillTicketRequest, UnknownData_C4AR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerBackfillTicketRequest, Members, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerBackfillTicketRequest, QueueName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerBackfillTicketRequest, ServerDetails, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateServerBackfillTicketRequest, 0x0040);
		}

		// struct FMultiplayerCreateServerMatchmakingTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateServerMatchmakingTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerMatchmakingTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerMatchmakingTicketRequest, GiveUpAfterSeconds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerMatchmakingTicketRequest, UnknownData_1KEW, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerMatchmakingTicketRequest, Members, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateServerMatchmakingTicketRequest, QueueName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateServerMatchmakingTicketRequest, 0x0038);
		}

		// struct FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateTitleMultiplayerServersQuotaChangeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse, RequestId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse, WasApproved, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse, UnknownData_B8Q3, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeResponse, 0x0020);
		}

		// struct FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerCreateTitleMultiplayerServersQuotaChangeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, ChangeDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, Changes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, ContactEmail, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, CustomTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, Notes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, StartDate, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerCreateTitleMultiplayerServersQuotaChangeRequest, 0x0060);
		}

		// struct FMultiplayerEmptyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerEmptyResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerEmptyResponse, 0x0008);
		}

		// struct FMultiplayerEnableMultiplayerServersForTitleResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerEnableMultiplayerServersForTitleResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerEnableMultiplayerServersForTitleResponse, Status, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerEnableMultiplayerServersForTitleResponse, UnknownData_Y61B, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerEnableMultiplayerServersForTitleResponse, 0x0010);
		}

		// struct FMultiplayerGetAssetUploadUrlResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetAssetUploadUrlResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetAssetUploadUrlResponse, AssetUploadUrl, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetAssetUploadUrlResponse, Filename, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetAssetUploadUrlResponse, 0x0028);
		}

		// struct FMultiplayerGetBuildResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetBuildResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, AreAssetsReadonly, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, UnknownData_FSDG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, BuildId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, BuildName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, BuildStatus, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, ContainerFlavor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, UnknownData_81A8, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, ContainerRunCommand, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, CreationTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, CustomGameContainerImage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, GameAssetReferences, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, GameCertificateReferences, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, InstrumentationConfiguration, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, MetaData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, MultiplayerServerCountPerVm, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, UnknownData_WAZH, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, OsPlatform, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, Ports, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, RegionConfigurations, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, ServerType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, StartMultiplayerServerCommand, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, UseStreamingForAssetDownloads, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, VmSize, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildResponse, UnknownData_62O1, 0x00FA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetBuildResponse, 0x0100);
		}

		// struct FMultiplayerGetContainerRegistryCredentialsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetContainerRegistryCredentialsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetContainerRegistryCredentialsResponse, DnsName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetContainerRegistryCredentialsResponse, Password, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetContainerRegistryCredentialsResponse, Username, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetContainerRegistryCredentialsResponse, 0x0038);
		}

		// struct FMultiplayerGetMatchResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMatchResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchResult, MatchID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchResult, Members, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchResult, RegionPreferences, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchResult, ServerDetails, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMatchResult, 0x0040);
		}

		// struct FMultiplayerGetMatchmakingTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMatchmakingTicketResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, CancellationReasonString, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, Created, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, Creator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, GiveUpAfterSeconds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, UnknownData_JCUU, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, MatchID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, Members, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, MembersToMatchWith, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, QueueName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, Status, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketResult, TicketId, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMatchmakingTicketResult, 0x0098);
		}

		// struct FMultiplayerGetMultiplayerServerDetailsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMultiplayerServerDetailsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, ConnectedPlayers, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, FQDN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, IPV4Address, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, LastStateTransitionTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, Ports, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, Region, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, ServerId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, SessionId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, State, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsResponse, VmId, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMultiplayerServerDetailsResponse, 0x00B8);
		}

		// struct FMultiplayerGetMultiplayerServerLogsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMultiplayerServerLogsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerLogsResponse, LogDownloadUrl, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMultiplayerServerLogsResponse, 0x0018);
		}

		// struct FMultiplayerGetQueueStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetQueueStatisticsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetQueueStatisticsResult, NumberOfPlayersMatching, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetQueueStatisticsResult, UnknownData_9AG2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetQueueStatisticsResult, TimeToMatchStatisticsInSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetQueueStatisticsResult, 0x0018);
		}

		// struct FMultiplayerGetRemoteLoginEndpointResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetRemoteLoginEndpointResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetRemoteLoginEndpointResponse, IPV4Address, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetRemoteLoginEndpointResponse, Port, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetRemoteLoginEndpointResponse, UnknownData_QAZP, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetRemoteLoginEndpointResponse, 0x0020);
		}

		// struct FMultiplayerGetServerBackfillTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetServerBackfillTicketResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, CancellationReasonString, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, Created, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, GiveUpAfterSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, UnknownData_0I06, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, MatchID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, Members, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, QueueName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, ServerDetails, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, Status, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketResult, TicketId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetServerBackfillTicketResult, 0x0088);
		}

		// struct FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetTitleEnabledForMultiplayerServersStatusResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse, Status, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse, UnknownData_PSWJ, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse, 0x0010);
		}

		// struct FMultiplayerGetTitleMultiplayerServersQuotaChangeResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetTitleMultiplayerServersQuotaChangeResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleMultiplayerServersQuotaChangeResponse, Change, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetTitleMultiplayerServersQuotaChangeResponse, 0x0010);
		}

		// struct FMultiplayerGetTitleMultiplayerServersQuotasResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetTitleMultiplayerServersQuotasResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleMultiplayerServersQuotasResponse, Quotas, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetTitleMultiplayerServersQuotasResponse, 0x0010);
		}

		// struct FMultiplayerJoinMatchmakingTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerJoinMatchmakingTicketResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerJoinMatchmakingTicketResult, 0x0008);
		}

		// struct FMultiplayerListMultiplayerServersResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListMultiplayerServersResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersResponse, MultiplayerServerSummaries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersResponse, PageSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersResponse, UnknownData_124D, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListMultiplayerServersResponse, 0x0030);
		}

		// struct FMultiplayerListAssetSummariesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListAssetSummariesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesResponse, AssetSummaries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesResponse, PageSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesResponse, UnknownData_DOVV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListAssetSummariesResponse, 0x0030);
		}

		// struct FMultiplayerListBuildAliasesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListBuildAliasesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesResponse, BuildAliases, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesResponse, PageSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesResponse, UnknownData_KI4Z, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListBuildAliasesResponse, 0x0030);
		}

		// struct FMultiplayerListBuildSummariesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListBuildSummariesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesResponse, BuildSummaries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesResponse, PageSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesResponse, UnknownData_E6C2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListBuildSummariesResponse, 0x0030);
		}

		// struct FMultiplayerListCertificateSummariesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListCertificateSummariesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesResponse, CertificateSummaries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesResponse, PageSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesResponse, UnknownData_JEGO, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListCertificateSummariesResponse, 0x0030);
		}

		// struct FMultiplayerListContainerImagesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListContainerImagesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesResponse, Images, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesResponse, PageSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesResponse, UnknownData_4H9Q, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListContainerImagesResponse, 0x0030);
		}

		// struct FMultiplayerListContainerImageTagsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListContainerImageTagsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImageTagsResponse, Tags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListContainerImageTagsResponse, 0x0018);
		}

		// struct FMultiplayerListMatchmakingTicketsForPlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListMatchmakingTicketsForPlayerResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMatchmakingTicketsForPlayerResult, TicketIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListMatchmakingTicketsForPlayerResult, 0x0018);
		}

		// struct FMultiplayerListPartyQosServersResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListPartyQosServersResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListPartyQosServersResponse, PageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListPartyQosServersResponse, UnknownData_P6I7, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListPartyQosServersResponse, QosServers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListPartyQosServersResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListPartyQosServersResponse, 0x0030);
		}

		// struct FMultiplayerListQosServersForTitleResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListQosServersForTitleResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListQosServersForTitleResponse, PageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListQosServersForTitleResponse, UnknownData_FKAY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListQosServersForTitleResponse, QosServers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListQosServersForTitleResponse, SkipToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListQosServersForTitleResponse, 0x0030);
		}

		// struct FMultiplayerListServerBackfillTicketsForPlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListServerBackfillTicketsForPlayerResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListServerBackfillTicketsForPlayerResult, TicketIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListServerBackfillTicketsForPlayerResult, 0x0018);
		}

		// struct FMultiplayerListTitleMultiplayerServersQuotaChangesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListTitleMultiplayerServersQuotaChangesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListTitleMultiplayerServersQuotaChangesResponse, Changes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListTitleMultiplayerServersQuotaChangesResponse, 0x0018);
		}

		// struct FMultiplayerListVirtualMachineSummariesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListVirtualMachineSummariesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesResponse, PageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesResponse, UnknownData_8CXX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesResponse, SkipToken, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesResponse, VirtualMachines, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListVirtualMachineSummariesResponse, 0x0030);
		}

		// struct FMultiplayerRequestMultiplayerServerResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerRequestMultiplayerServerResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, ConnectedPlayers, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, FQDN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, IPV4Address, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, LastStateTransitionTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, Ports, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, Region, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, ServerId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, SessionId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, State, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerResponse, VmId, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerRequestMultiplayerServerResponse, 0x00B8);
		}

		// struct FMultiplayerRolloverContainerRegistryCredentialsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerRolloverContainerRegistryCredentialsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRolloverContainerRegistryCredentialsResponse, DnsName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRolloverContainerRegistryCredentialsResponse, Password, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRolloverContainerRegistryCredentialsResponse, Username, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerRolloverContainerRegistryCredentialsResponse, 0x0038);
		}

		// struct FMultiplayerDeleteAssetRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerDeleteAssetRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteAssetRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteAssetRequest, Filename, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerDeleteAssetRequest, 0x0020);
		}

		// struct FMultiplayerDeleteBuildRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerDeleteBuildRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteBuildRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteBuildRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerDeleteBuildRequest, 0x0020);
		}

		// struct FMultiplayerDeleteBuildAliasRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerDeleteBuildAliasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteBuildAliasRequest, AliasId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteBuildAliasRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerDeleteBuildAliasRequest, 0x0020);
		}

		// struct FMultiplayerDeleteBuildRegionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerDeleteBuildRegionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteBuildRegionRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteBuildRegionRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteBuildRegionRequest, Region, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerDeleteBuildRegionRequest, 0x0030);
		}

		// struct FMultiplayerDeleteCertificateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerDeleteCertificateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteCertificateRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteCertificateRequest, Name, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerDeleteCertificateRequest, 0x0020);
		}

		// struct FMultiplayerDeleteContainerImageRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerDeleteContainerImageRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteContainerImageRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteContainerImageRequest, ImageName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerDeleteContainerImageRequest, 0x0020);
		}

		// struct FMultiplayerDeleteRemoteUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerDeleteRemoteUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteRemoteUserRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteRemoteUserRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteRemoteUserRequest, Region, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteRemoteUserRequest, Username, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerDeleteRemoteUserRequest, VmId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerDeleteRemoteUserRequest, 0x0050);
		}

		// struct FMultiplayerEnableMultiplayerServersForTitleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerEnableMultiplayerServersForTitleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerEnableMultiplayerServersForTitleRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerEnableMultiplayerServersForTitleRequest, 0x0010);
		}

		// struct FMultiplayerGetAssetUploadUrlRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetAssetUploadUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetAssetUploadUrlRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetAssetUploadUrlRequest, Filename, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetAssetUploadUrlRequest, 0x0020);
		}

		// struct FMultiplayerGetBuildRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetBuildRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetBuildRequest, 0x0020);
		}

		// struct FMultiplayerGetBuildAliasRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetBuildAliasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildAliasRequest, AliasId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetBuildAliasRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetBuildAliasRequest, 0x0020);
		}

		// struct FMultiplayerGetContainerRegistryCredentialsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetContainerRegistryCredentialsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetContainerRegistryCredentialsRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetContainerRegistryCredentialsRequest, 0x0010);
		}

		// struct FMultiplayerGetMatchRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMatchRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchRequest, EscapeObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchRequest, UnknownData_XNDZ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchRequest, MatchID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchRequest, QueueName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchRequest, ReturnMemberAttributes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchRequest, UnknownData_M255, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMatchRequest, 0x0040);
		}

		// struct FMultiplayerGetMatchmakingTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMatchmakingTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketRequest, EscapeObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketRequest, UnknownData_FV4K, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketRequest, QueueName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMatchmakingTicketRequest, TicketId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMatchmakingTicketRequest, 0x0038);
		}

		// struct FMultiplayerGetMultiplayerServerDetailsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMultiplayerServerDetailsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsRequest, Region, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerDetailsRequest, SessionId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMultiplayerServerDetailsRequest, 0x0040);
		}

		// struct FMultiplayerGetMultiplayerServerLogsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMultiplayerServerLogsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerLogsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerServerLogsRequest, ServerId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMultiplayerServerLogsRequest, 0x0020);
		}

		// struct FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetMultiplayerSessionLogsBySessionIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest, SessionId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetMultiplayerSessionLogsBySessionIdRequest, 0x0020);
		}

		// struct FMultiplayerGetQueueStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetQueueStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetQueueStatisticsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetQueueStatisticsRequest, QueueName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetQueueStatisticsRequest, 0x0020);
		}

		// struct FMultiplayerGetRemoteLoginEndpointRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetRemoteLoginEndpointRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetRemoteLoginEndpointRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetRemoteLoginEndpointRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetRemoteLoginEndpointRequest, Region, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetRemoteLoginEndpointRequest, VmId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetRemoteLoginEndpointRequest, 0x0040);
		}

		// struct FMultiplayerGetServerBackfillTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetServerBackfillTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketRequest, EscapeObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketRequest, UnknownData_9PRH, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketRequest, QueueName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetServerBackfillTicketRequest, TicketId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetServerBackfillTicketRequest, 0x0038);
		}

		// struct FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetTitleEnabledForMultiplayerServersStatusRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest, 0x0010);
		}

		// struct FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetTitleMultiplayerServersQuotaChangeRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest, RequestId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetTitleMultiplayerServersQuotaChangeRequest, 0x0020);
		}

		// struct FMultiplayerGetTitleMultiplayerServersQuotasRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerGetTitleMultiplayerServersQuotasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerGetTitleMultiplayerServersQuotasRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerGetTitleMultiplayerServersQuotasRequest, 0x0010);
		}

		// struct FMultiplayerJoinMatchmakingTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerJoinMatchmakingTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerJoinMatchmakingTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerJoinMatchmakingTicketRequest, Member, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerJoinMatchmakingTicketRequest, QueueName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerJoinMatchmakingTicketRequest, TicketId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerJoinMatchmakingTicketRequest, 0x0038);
		}

		// struct FMultiplayerListMultiplayerServersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListMultiplayerServersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersRequest, PageSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersRequest, UnknownData_LHH7, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersRequest, Region, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMultiplayerServersRequest, SkipToken, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListMultiplayerServersRequest, 0x0048);
		}

		// struct FMultiplayerListAssetSummariesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListAssetSummariesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesRequest, PageSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesRequest, UnknownData_YON3, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListAssetSummariesRequest, SkipToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListAssetSummariesRequest, 0x0028);
		}

		// struct FMultiplayerListBuildAliasesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListBuildAliasesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesRequest, PageSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesRequest, UnknownData_D4HV, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildAliasesRequest, SkipToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListBuildAliasesRequest, 0x0028);
		}

		// struct FMultiplayerListBuildSummariesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListBuildSummariesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesRequest, PageSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesRequest, UnknownData_NUN0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListBuildSummariesRequest, SkipToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListBuildSummariesRequest, 0x0028);
		}

		// struct FMultiplayerListCertificateSummariesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListCertificateSummariesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesRequest, PageSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesRequest, UnknownData_LGJK, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListCertificateSummariesRequest, SkipToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListCertificateSummariesRequest, 0x0028);
		}

		// struct FMultiplayerListContainerImagesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListContainerImagesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesRequest, PageSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesRequest, UnknownData_ZB3V, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImagesRequest, SkipToken, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListContainerImagesRequest, 0x0028);
		}

		// struct FMultiplayerListContainerImageTagsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListContainerImageTagsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImageTagsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListContainerImageTagsRequest, ImageName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListContainerImageTagsRequest, 0x0020);
		}

		// struct FMultiplayerListMatchmakingTicketsForPlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListMatchmakingTicketsForPlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMatchmakingTicketsForPlayerRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMatchmakingTicketsForPlayerRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListMatchmakingTicketsForPlayerRequest, QueueName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListMatchmakingTicketsForPlayerRequest, 0x0028);
		}

		// struct FMultiplayerListPartyQosServersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListPartyQosServersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListPartyQosServersRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListPartyQosServersRequest, 0x0010);
		}

		// struct FMultiplayerListQosServersForTitleRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListQosServersForTitleRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListQosServersForTitleRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListQosServersForTitleRequest, IncludeAllRegions, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListQosServersForTitleRequest, UnknownData_WJPT, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListQosServersForTitleRequest, 0x0018);
		}

		// struct FMultiplayerListServerBackfillTicketsForPlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListServerBackfillTicketsForPlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListServerBackfillTicketsForPlayerRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListServerBackfillTicketsForPlayerRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListServerBackfillTicketsForPlayerRequest, QueueName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListServerBackfillTicketsForPlayerRequest, 0x0028);
		}

		// struct FMultiplayerListTitleMultiplayerServersQuotaChangesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListTitleMultiplayerServersQuotaChangesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListTitleMultiplayerServersQuotaChangesRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListTitleMultiplayerServersQuotaChangesRequest, 0x0010);
		}

		// struct FMultiplayerListVirtualMachineSummariesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerListVirtualMachineSummariesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesRequest, PageSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesRequest, UnknownData_BX06, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesRequest, Region, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerListVirtualMachineSummariesRequest, SkipToken, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerListVirtualMachineSummariesRequest, 0x0048);
		}

		// struct FMultiplayerRequestMultiplayerServerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerRequestMultiplayerServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerRequest, BuildAliasParams, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerRequest, BuildId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerRequest, InitialPlayers, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerRequest, PreferredRegions, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerRequest, SessionCookie, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRequestMultiplayerServerRequest, SessionId, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerRequestMultiplayerServerRequest, 0x0068);
		}

		// struct FMultiplayerRolloverContainerRegistryCredentialsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerRolloverContainerRegistryCredentialsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerRolloverContainerRegistryCredentialsRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerRolloverContainerRegistryCredentialsRequest, 0x0010);
		}

		// struct FMultiplayerShutdownMultiplayerServerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerShutdownMultiplayerServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerShutdownMultiplayerServerRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerShutdownMultiplayerServerRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerShutdownMultiplayerServerRequest, Region, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerShutdownMultiplayerServerRequest, SessionId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerShutdownMultiplayerServerRequest, 0x0040);
		}

		// struct FMultiplayerUntagContainerImageRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerUntagContainerImageRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUntagContainerImageRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUntagContainerImageRequest, ImageName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUntagContainerImageRequest, Tag, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerUntagContainerImageRequest, 0x0030);
		}

		// struct FMultiplayerUpdateBuildAliasRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerUpdateBuildAliasRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildAliasRequest, AliasId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildAliasRequest, AliasName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildAliasRequest, BuildSelectionCriteria, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildAliasRequest, CustomTags, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerUpdateBuildAliasRequest, 0x0040);
		}

		// struct FMultiplayerUpdateBuildNameRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerUpdateBuildNameRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildNameRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildNameRequest, BuildName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildNameRequest, CustomTags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerUpdateBuildNameRequest, 0x0030);
		}

		// struct FMultiplayerUpdateBuildRegionRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerUpdateBuildRegionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildRegionRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildRegionRequest, BuildRegion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildRegionRequest, CustomTags, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerUpdateBuildRegionRequest, 0x0028);
		}

		// struct FMultiplayerUpdateBuildRegionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerUpdateBuildRegionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildRegionsRequest, BuildId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildRegionsRequest, BuildRegions, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUpdateBuildRegionsRequest, CustomTags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerUpdateBuildRegionsRequest, 0x0030);
		}

		// struct FMultiplayerUploadCertificateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__MultiplayerUploadCertificateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUploadCertificateRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerUploadCertificateRequest, GameCertificate, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerUploadCertificateRequest, 0x0018);
		}

		// struct FProfilesGetGlobalPolicyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetGlobalPolicyResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetGlobalPolicyResponse, Permissions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetGlobalPolicyResponse, 0x0018);
		}

		// struct FProfilesGetEntityProfileResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetEntityProfileResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfileResponse, Profile, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetEntityProfileResponse, 0x0010);
		}

		// struct FProfilesGetEntityProfilesResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetEntityProfilesResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfilesResponse, Profiles, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetEntityProfilesResponse, 0x0018);
		}

		// struct FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse, TitleId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse, TitlePlayerAccounts, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse, 0x0020);
		}

		// struct FProfilesSetGlobalPolicyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesSetGlobalPolicyResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesSetGlobalPolicyResponse, 0x0008);
		}

		// struct FProfilesSetProfileLanguageResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesSetProfileLanguageResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageResponse, OperationResult, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageResponse, UnknownData_FGSJ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageResponse, VersionNumber, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesSetProfileLanguageResponse, 0x0010);
		}

		// struct FProfilesSetEntityProfilePolicyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesSetEntityProfilePolicyResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetEntityProfilePolicyResponse, Permissions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesSetEntityProfilePolicyResponse, 0x0018);
		}

		// struct FProfilesGetGlobalPolicyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetGlobalPolicyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetGlobalPolicyRequest, CustomTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetGlobalPolicyRequest, 0x0010);
		}

		// struct FProfilesGetEntityProfileRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetEntityProfileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfileRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfileRequest, DataAsObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfileRequest, UnknownData_7O3Q, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfileRequest, Entity, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetEntityProfileRequest, 0x0020);
		}

		// struct FProfilesGetEntityProfilesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetEntityProfilesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfilesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfilesRequest, DataAsObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfilesRequest, UnknownData_QAJJ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetEntityProfilesRequest, Entities, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetEntityProfilesRequest, 0x0028);
		}

		// struct FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest, MasterPlayerAccountIds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesGetTitlePlayersFromMasterPlayerAccountIdsRequest, 0x0020);
		}

		// struct FProfilesSetGlobalPolicyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesSetGlobalPolicyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetGlobalPolicyRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetGlobalPolicyRequest, Permissions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesSetGlobalPolicyRequest, 0x0020);
		}

		// struct FProfilesSetProfileLanguageRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesSetProfileLanguageRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageRequest, ExpectedVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageRequest, UnknownData_UGSZ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetProfileLanguageRequest, Language, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesSetProfileLanguageRequest, 0x0030);
		}

		// struct FProfilesSetEntityProfilePolicyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ProfilesSetEntityProfilePolicyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetEntityProfilePolicyRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetEntityProfilePolicyRequest, Entity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfilesSetEntityProfilePolicyRequest, Statements, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfilesSetEntityProfilePolicyRequest, 0x0028);
		}

		// struct FServerModifyCharacterVirtualCurrencyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerModifyCharacterVirtualCurrencyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyCharacterVirtualCurrencyResult, Balance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyCharacterVirtualCurrencyResult, UnknownData_7T3N, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyCharacterVirtualCurrencyResult, VirtualCurrency, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerModifyCharacterVirtualCurrencyResult, 0x0020);
		}

		// struct FServerAddCharacterVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddCharacterVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddCharacterVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddCharacterVirtualCurrencyRequest, UnknownData_79CP, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddCharacterVirtualCurrencyRequest, CharacterId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddCharacterVirtualCurrencyRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddCharacterVirtualCurrencyRequest, PlayFabId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddCharacterVirtualCurrencyRequest, VirtualCurrency, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddCharacterVirtualCurrencyRequest, 0x0048);
		}

		// struct FServerEmptyResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerEmptyResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerEmptyResponse, 0x0008);
		}

		// struct FServerAddFriendRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddFriendRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddFriendRequest, FriendEmail, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddFriendRequest, FriendPlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddFriendRequest, FriendTitleDisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddFriendRequest, FriendUsername, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddFriendRequest, PlayFabId, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddFriendRequest, 0x0058);
		}

		// struct FServerEmptyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerEmptyResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerEmptyResult, 0x0008);
		}

		// struct FServerAddGenericIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddGenericIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddGenericIDRequest, GenericId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddGenericIDRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddGenericIDRequest, 0x0020);
		}

		// struct FServerAddPlayerTagResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddPlayerTagResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddPlayerTagResult, 0x0008);
		}

		// struct FServerAddPlayerTagRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddPlayerTagRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddPlayerTagRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddPlayerTagRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddPlayerTagRequest, TagName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddPlayerTagRequest, 0x0030);
		}

		// struct FServerAddSharedGroupMembersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddSharedGroupMembersResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddSharedGroupMembersResult, 0x0008);
		}

		// struct FServerAddSharedGroupMembersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddSharedGroupMembersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddSharedGroupMembersRequest, PlayFabIds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddSharedGroupMembersRequest, SharedGroupId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddSharedGroupMembersRequest, 0x0028);
		}

		// struct FServerModifyUserVirtualCurrencyResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerModifyUserVirtualCurrencyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyUserVirtualCurrencyResult, Balance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyUserVirtualCurrencyResult, BalanceChange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyUserVirtualCurrencyResult, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyUserVirtualCurrencyResult, VirtualCurrency, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerModifyUserVirtualCurrencyResult, 0x0030);
		}

		// struct FServerAddUserVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAddUserVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddUserVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddUserVirtualCurrencyRequest, UnknownData_YOMU, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddUserVirtualCurrencyRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddUserVirtualCurrencyRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAddUserVirtualCurrencyRequest, VirtualCurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAddUserVirtualCurrencyRequest, 0x0038);
		}

		// struct FServerAuthenticateSessionTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAuthenticateSessionTicketResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAuthenticateSessionTicketResult, IsSessionTicketExpired, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAuthenticateSessionTicketResult, UnknownData_EML0, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAuthenticateSessionTicketResult, UserInfo, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAuthenticateSessionTicketResult, 0x0018);
		}

		// struct FServerAuthenticateSessionTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAuthenticateSessionTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAuthenticateSessionTicketRequest, SessionTicket, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAuthenticateSessionTicketRequest, 0x0018);
		}

		// struct FServerAwardSteamAchievementResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAwardSteamAchievementResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAwardSteamAchievementResult, AchievementResults, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAwardSteamAchievementResult, 0x0018);
		}

		// struct FServerAwardSteamAchievementRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerAwardSteamAchievementRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAwardSteamAchievementRequest, Achievements, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAwardSteamAchievementRequest, 0x0018);
		}

		// struct FServerBanUsersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerBanUsersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerBanUsersResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerBanUsersResult, 0x0018);
		}

		// struct FServerBanUsersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerBanUsersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerBanUsersRequest, Bans, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerBanUsersRequest, CustomTags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerBanUsersRequest, 0x0020);
		}

		// struct FServerConsumeItemResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerConsumeItemResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemResult, ItemInstanceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemResult, RemainingUses, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemResult, UnknownData_83ZY, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerConsumeItemResult, 0x0020);
		}

		// struct FServerConsumeItemRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerConsumeItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemRequest, ConsumeCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemRequest, UnknownData_5IIQ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemRequest, ItemInstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerConsumeItemRequest, PlayFabId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerConsumeItemRequest, 0x0048);
		}

		// struct FServerCreateSharedGroupResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerCreateSharedGroupResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCreateSharedGroupResult, SharedGroupId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerCreateSharedGroupResult, 0x0018);
		}

		// struct FServerCreateSharedGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerCreateSharedGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerCreateSharedGroupRequest, SharedGroupId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerCreateSharedGroupRequest, 0x0018);
		}

		// struct FServerDeleteCharacterFromUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeleteCharacterFromUserResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeleteCharacterFromUserResult, 0x0008);
		}

		// struct FServerDeletePlayerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeletePlayerResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeletePlayerResult, 0x0008);
		}

		// struct FServerDeletePushNotificationTemplateResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeletePushNotificationTemplateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeletePushNotificationTemplateResult, 0x0008);
		}

		// struct FServerDeregisterGameResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeregisterGameResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeregisterGameResponse, 0x0008);
		}

		// struct FServerEvaluateRandomResultTableResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerEvaluateRandomResultTableResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerEvaluateRandomResultTableResult, ResultItemId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerEvaluateRandomResultTableResult, 0x0018);
		}

		// struct FServerExecuteCloudScriptResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerExecuteCloudScriptResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, APIRequestsIssued, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, UnknownData_SMXX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, Error, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, ExecutionTimeSeconds, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, UnknownData_78YL, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, FunctionName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, FunctionResult, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, FunctionResultTooLarge, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, UnknownData_K81E, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, HttpRequestsIssued, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, Logs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, LogsTooLarge, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, UnknownData_GKE9, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, MemoryConsumedBytes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, ProcessorTimeSeconds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptResult, Revision, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerExecuteCloudScriptResult, 0x0060);
		}

		// struct FServerGetAllSegmentsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetAllSegmentsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetAllSegmentsResult, Segments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetAllSegmentsResult, 0x0018);
		}

		// struct FServerListUsersCharactersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerListUsersCharactersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerListUsersCharactersResult, Characters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerListUsersCharactersResult, 0x0018);
		}

		// struct FServerGetCatalogItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCatalogItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCatalogItemsResult, Catalog, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCatalogItemsResult, 0x0018);
		}

		// struct FServerGetCharacterDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataResult, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataResult, Data, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataResult, DataVersion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataResult, UnknownData_UGHH, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataResult, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterDataResult, 0x0038);
		}

		// struct FServerGetCharacterInventoryResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterInventoryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryResult, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryResult, Inventory, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryResult, PlayFabId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryResult, VirtualCurrency, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryResult, VirtualCurrencyRechargeTimes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterInventoryResult, 0x0048);
		}

		// struct FServerGetCharacterLeaderboardResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterLeaderboardResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterLeaderboardResult, Leaderboard, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterLeaderboardResult, 0x0018);
		}

		// struct FServerGetCharacterStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterStatisticsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterStatisticsResult, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterStatisticsResult, CharacterStatistics, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterStatisticsResult, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterStatisticsResult, 0x0030);
		}

		// struct FServerGetContentDownloadUrlResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetContentDownloadUrlResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetContentDownloadUrlResult, URL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetContentDownloadUrlResult, 0x0018);
		}

		// struct FServerGetLeaderboardResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardResult, Leaderboard, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardResult, NextReset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardResult, Version, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardResult, UnknownData_YY27, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardResult, 0x0030);
		}

		// struct FServerGetFriendsListResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetFriendsListResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListResult, Friends, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetFriendsListResult, 0x0018);
		}

		// struct FServerGetLeaderboardAroundCharacterResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardAroundCharacterResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundCharacterResult, Leaderboard, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardAroundCharacterResult, 0x0018);
		}

		// struct FServerGetLeaderboardAroundUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardAroundUserResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserResult, Leaderboard, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserResult, NextReset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserResult, Version, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserResult, UnknownData_CVRU, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardAroundUserResult, 0x0030);
		}

		// struct FServerGetLeaderboardForUsersCharactersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardForUsersCharactersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardForUsersCharactersResult, Leaderboard, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardForUsersCharactersResult, 0x0018);
		}

		// struct FServerGetPlayerCombinedInfoResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerCombinedInfoResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerCombinedInfoResult, InfoResultPayload, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerCombinedInfoResult, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerCombinedInfoResult, 0x0020);
		}

		// struct FServerGetPlayerProfileResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerProfileResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerProfileResult, PlayerProfile, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerProfileResult, 0x0010);
		}

		// struct FServerGetPlayerSegmentsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerSegmentsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerSegmentsResult, Segments, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerSegmentsResult, 0x0018);
		}

		// struct FServerGetPlayersInSegmentResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayersInSegmentResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentResult, ContinuationToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentResult, PlayerProfiles, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentResult, ProfilesInSegment, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentResult, UnknownData_DIIY, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayersInSegmentResult, 0x0030);
		}

		// struct FServerGetPlayerStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerStatisticsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticsResult, PlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticsResult, Statistics, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerStatisticsResult, 0x0028);
		}

		// struct FServerGetPlayerStatisticVersionsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerStatisticVersionsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticVersionsResult, StatisticVersions, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerStatisticVersionsResult, 0x0018);
		}

		// struct FServerGetPlayerTagsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerTagsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerTagsResult, PlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerTagsResult, Tags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerTagsResult, 0x0028);
		}

		// struct FServerGetPlayFabIDsFromFacebookIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromFacebookIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromFacebookIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromFacebookIDsResult, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromFacebookInstantGamesIdsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromGenericIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromGenericIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromGenericIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromGenericIDsResult, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromPSNAccountIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromPSNAccountIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromPSNAccountIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromPSNAccountIDsResult, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromSteamIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromSteamIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromSteamIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromSteamIDsResult, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromXboxLiveIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromXboxLiveIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromXboxLiveIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromXboxLiveIDsResult, 0x0018);
		}

		// struct FServerGetPublisherDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPublisherDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPublisherDataResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPublisherDataResult, 0x0010);
		}

		// struct FServerGetRandomResultTablesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetRandomResultTablesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetRandomResultTablesResult, Tables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetRandomResultTablesResult, 0x0010);
		}

		// struct FServerGetServerCustomIDsFromPlayFabIDsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetServerCustomIDsFromPlayFabIDsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetServerCustomIDsFromPlayFabIDsResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetServerCustomIDsFromPlayFabIDsResult, 0x0018);
		}

		// struct FServerGetSharedGroupDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetSharedGroupDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetSharedGroupDataResult, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetSharedGroupDataResult, Members, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetSharedGroupDataResult, 0x0020);
		}

		// struct FServerGetStoreItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetStoreItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsResult, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsResult, MarketingData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsResult, Source, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsResult, UnknownData_FPE9, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsResult, Store, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsResult, StoreId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetStoreItemsResult, 0x0048);
		}

		// struct FServerGetTimeResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetTimeResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetTimeResult, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetTimeResult, 0x0018);
		}

		// struct FServerGetTitleDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetTitleDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetTitleDataResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetTitleDataResult, 0x0010);
		}

		// struct FServerGetTitleNewsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetTitleNewsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetTitleNewsResult, News, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetTitleNewsResult, 0x0018);
		}

		// struct FServerGetUserAccountInfoResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserAccountInfoResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserAccountInfoResult, UserInfo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserAccountInfoResult, 0x0010);
		}

		// struct FServerGetUserBansResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserBansResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserBansResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserBansResult, 0x0018);
		}

		// struct FServerGetUserDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataResult, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataResult, DataVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataResult, UnknownData_IMKT, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataResult, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserDataResult, 0x0028);
		}

		// struct FServerGetUserInventoryResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserInventoryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserInventoryResult, Inventory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserInventoryResult, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserInventoryResult, VirtualCurrency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserInventoryResult, VirtualCurrencyRechargeTimes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserInventoryResult, 0x0038);
		}

		// struct FServerGrantCharacterToUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantCharacterToUserResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantCharacterToUserResult, CharacterId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantCharacterToUserResult, 0x0018);
		}

		// struct FServerGrantItemsToCharacterResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantItemsToCharacterResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToCharacterResult, ItemGrantResults, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantItemsToCharacterResult, 0x0018);
		}

		// struct FServerGrantItemsToUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantItemsToUserResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUserResult, ItemGrantResults, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantItemsToUserResult, 0x0018);
		}

		// struct FServerGrantItemsToUsersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantItemsToUsersResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUsersResult, ItemGrantResults, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantItemsToUsersResult, 0x0018);
		}

		// struct FServerLinkPSNAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLinkPSNAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLinkPSNAccountResult, 0x0008);
		}

		// struct FServerLinkServerCustomIdResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLinkServerCustomIdResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLinkServerCustomIdResult, 0x0008);
		}

		// struct FServerLinkXboxAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLinkXboxAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLinkXboxAccountResult, 0x0008);
		}

		// struct FServerServerLoginResult : public FPlayFabLoginResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerServerLoginResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, EntityToken, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, InfoResultPayload, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, LastLoginTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, NewlyCreated, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, UnknownData_QONF, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, PlayFabId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, SessionTicket, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, SettingsForUser, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerServerLoginResult, TreatmentAssignment, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerServerLoginResult, 0x0068);
		}

		// struct FServerModifyItemUsesResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerModifyItemUsesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesResult, ItemInstanceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesResult, RemainingUses, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesResult, UnknownData_9JQF, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerModifyItemUsesResult, 0x0020);
		}

		// struct FServerMoveItemToCharacterFromCharacterResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerMoveItemToCharacterFromCharacterResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerMoveItemToCharacterFromCharacterResult, 0x0008);
		}

		// struct FServerMoveItemToCharacterFromUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerMoveItemToCharacterFromUserResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerMoveItemToCharacterFromUserResult, 0x0008);
		}

		// struct FServerMoveItemToUserFromCharacterResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerMoveItemToUserFromCharacterResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerMoveItemToUserFromCharacterResult, 0x0008);
		}

		// struct FServerNotifyMatchmakerPlayerLeftResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerNotifyMatchmakerPlayerLeftResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerNotifyMatchmakerPlayerLeftResult, PlayerState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerNotifyMatchmakerPlayerLeftResult, UnknownData_U389, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerNotifyMatchmakerPlayerLeftResult, 0x0010);
		}

		// struct FServerRedeemCouponResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRedeemCouponResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemCouponResult, GrantedItems, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRedeemCouponResult, 0x0018);
		}

		// struct FServerRedeemMatchmakerTicketResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRedeemMatchmakerTicketResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemMatchmakerTicketResult, Error, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemMatchmakerTicketResult, TicketIsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemMatchmakerTicketResult, UnknownData_M1M0, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemMatchmakerTicketResult, UserInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRedeemMatchmakerTicketResult, 0x0028);
		}

		// struct FServerRefreshGameServerInstanceHeartbeatResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRefreshGameServerInstanceHeartbeatResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRefreshGameServerInstanceHeartbeatResult, 0x0008);
		}

		// struct FServerRegisterGameResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRegisterGameResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameResponse, LobbyId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRegisterGameResponse, 0x0018);
		}

		// struct FServerRemovePlayerTagResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRemovePlayerTagResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRemovePlayerTagResult, 0x0008);
		}

		// struct FServerRemoveSharedGroupMembersResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRemoveSharedGroupMembersResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRemoveSharedGroupMembersResult, 0x0008);
		}

		// struct FServerReportPlayerServerResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerReportPlayerServerResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerReportPlayerServerResult, SubmissionsRemaining, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerReportPlayerServerResult, UnknownData_7ZAF, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerReportPlayerServerResult, 0x0010);
		}

		// struct FServerRevokeAllBansForUserResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeAllBansForUserResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeAllBansForUserResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeAllBansForUserResult, 0x0018);
		}

		// struct FServerRevokeBansResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeBansResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeBansResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeBansResult, 0x0018);
		}

		// struct FServerRevokeInventoryResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeInventoryResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeInventoryResult, 0x0008);
		}

		// struct FServerRevokeInventoryItemsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeInventoryItemsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeInventoryItemsResult, Errors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeInventoryItemsResult, 0x0018);
		}

		// struct FServerSavePushNotificationTemplateResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSavePushNotificationTemplateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSavePushNotificationTemplateResult, PushNotificationTemplateId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSavePushNotificationTemplateResult, 0x0018);
		}

		// struct FServerSendCustomAccountRecoveryEmailResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSendCustomAccountRecoveryEmailResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSendCustomAccountRecoveryEmailResult, 0x0008);
		}

		// struct FServerSendEmailFromTemplateResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSendEmailFromTemplateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSendEmailFromTemplateResult, 0x0008);
		}

		// struct FServerSendPushNotificationResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSendPushNotificationResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSendPushNotificationResult, 0x0008);
		}

		// struct FServerSetGameServerInstanceDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetGameServerInstanceDataResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetGameServerInstanceDataResult, 0x0008);
		}

		// struct FServerSetGameServerInstanceStateResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetGameServerInstanceStateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetGameServerInstanceStateResult, 0x0008);
		}

		// struct FServerSetGameServerInstanceTagsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetGameServerInstanceTagsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetGameServerInstanceTagsResult, 0x0008);
		}

		// struct FServerSetPlayerSecretResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetPlayerSecretResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetPlayerSecretResult, 0x0008);
		}

		// struct FServerSetPublisherDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetPublisherDataResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetPublisherDataResult, 0x0008);
		}

		// struct FServerSetTitleDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetTitleDataResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetTitleDataResult, 0x0008);
		}

		// struct FServerUnlinkPSNAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlinkPSNAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlinkPSNAccountResult, 0x0008);
		}

		// struct FServerUnlinkServerCustomIdResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlinkServerCustomIdResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlinkServerCustomIdResult, 0x0008);
		}

		// struct FServerUnlinkXboxAccountResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlinkXboxAccountResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlinkXboxAccountResult, 0x0008);
		}

		// struct FServerUnlockContainerItemResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlockContainerItemResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemResult, GrantedItems, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemResult, UnlockedItemInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemResult, UnlockedWithItemInstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemResult, VirtualCurrency, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlockContainerItemResult, 0x0040);
		}

		// struct FServerUpdateBansResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateBansResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateBansResult, BanData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateBansResult, 0x0018);
		}

		// struct FServerUpdateCharacterDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateCharacterDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataResult, DataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataResult, UnknownData_42B1, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateCharacterDataResult, 0x0010);
		}

		// struct FServerUpdateCharacterStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateCharacterStatisticsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateCharacterStatisticsResult, 0x0008);
		}

		// struct FServerUpdatePlayerStatisticsResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdatePlayerStatisticsResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdatePlayerStatisticsResult, 0x0008);
		}

		// struct FServerUpdateSharedGroupDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateSharedGroupDataResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateSharedGroupDataResult, 0x0008);
		}

		// struct FServerUpdateUserDataResult : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateUserDataResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataResult, DataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataResult, UnknownData_YCUS, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateUserDataResult, 0x0010);
		}

		// struct FServerWriteEventResponse : public FPlayFabResultCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerWriteEventResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteEventResponse, EventId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerWriteEventResponse, 0x0018);
		}

		// struct FServerDeleteCharacterFromUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeleteCharacterFromUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeleteCharacterFromUserRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeleteCharacterFromUserRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeleteCharacterFromUserRequest, PlayFabId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeleteCharacterFromUserRequest, SaveCharacterInventory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeleteCharacterFromUserRequest, UnknownData_CWHK, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeleteCharacterFromUserRequest, 0x0038);
		}

		// struct FServerDeletePlayerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeletePlayerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeletePlayerRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeletePlayerRequest, 0x0018);
		}

		// struct FServerDeletePushNotificationTemplateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeletePushNotificationTemplateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeletePushNotificationTemplateRequest, PushNotificationTemplateId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeletePushNotificationTemplateRequest, 0x0018);
		}

		// struct FServerDeleteSharedGroupRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeleteSharedGroupRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeleteSharedGroupRequest, SharedGroupId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeleteSharedGroupRequest, 0x0018);
		}

		// struct FServerDeregisterGameRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerDeregisterGameRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeregisterGameRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerDeregisterGameRequest, LobbyId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerDeregisterGameRequest, 0x0020);
		}

		// struct FServerEvaluateRandomResultTableRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerEvaluateRandomResultTableRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerEvaluateRandomResultTableRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerEvaluateRandomResultTableRequest, TableId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerEvaluateRandomResultTableRequest, 0x0028);
		}

		// struct FServerExecuteCloudScriptServerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerExecuteCloudScriptServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, FunctionName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, FunctionParameter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, GeneratePlayStreamEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, UnknownData_IK8W, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, PlayFabId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, RevisionSelection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, UnknownData_OZ8O, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerExecuteCloudScriptServerRequest, SpecificRevision, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerExecuteCloudScriptServerRequest, 0x0048);
		}

		// struct FServerGetAllSegmentsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetAllSegmentsRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetAllSegmentsRequest, 0x0008);
		}

		// struct FServerListUsersCharactersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerListUsersCharactersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerListUsersCharactersRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerListUsersCharactersRequest, 0x0018);
		}

		// struct FServerGetCatalogItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCatalogItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCatalogItemsRequest, CatalogVersion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCatalogItemsRequest, 0x0018);
		}

		// struct FServerGetCharacterDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataRequest, IfChangedFromDataVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataRequest, UnknownData_KMFC, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataRequest, Keys, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterDataRequest, PlayFabId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterDataRequest, 0x0040);
		}

		// struct FServerGetCharacterInventoryRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterInventoryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterInventoryRequest, PlayFabId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterInventoryRequest, 0x0040);
		}

		// struct FServerGetCharacterLeaderboardRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterLeaderboardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterLeaderboardRequest, CharacterType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterLeaderboardRequest, MaxResultsCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterLeaderboardRequest, StartPosition, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterLeaderboardRequest, StatisticName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterLeaderboardRequest, 0x0030);
		}

		// struct FServerGetCharacterStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetCharacterStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterStatisticsRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetCharacterStatisticsRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetCharacterStatisticsRequest, 0x0028);
		}

		// struct FServerGetContentDownloadUrlRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetContentDownloadUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetContentDownloadUrlRequest, HttpMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetContentDownloadUrlRequest, Key, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetContentDownloadUrlRequest, ThruCDN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetContentDownloadUrlRequest, UnknownData_DHIK, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetContentDownloadUrlRequest, 0x0030);
		}

		// struct FServerGetFriendLeaderboardRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetFriendLeaderboardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, IncludeFacebookFriends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, IncludeSteamFriends, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, UnknownData_H3B5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, MaxResultsCount, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, ProfileConstraints, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, StartPosition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, UnknownData_ZGEW, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, StatisticName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, UseSpecificVersion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, UnknownData_WQZC, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, Version, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendLeaderboardRequest, XboxToken, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetFriendLeaderboardRequest, 0x0060);
		}

		// struct FServerGetFriendsListRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetFriendsListRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListRequest, IncludeFacebookFriends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListRequest, IncludeSteamFriends, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListRequest, UnknownData_V1SN, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListRequest, ProfileConstraints, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetFriendsListRequest, XboxToken, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetFriendsListRequest, 0x0040);
		}

		// struct FServerGetLeaderboardRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, MaxResultsCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, UnknownData_9LQI, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, ProfileConstraints, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, StartPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, UnknownData_A64Q, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, StatisticName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, UseSpecificVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, UnknownData_46RM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardRequest, Version, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardRequest, 0x0040);
		}

		// struct FServerGetLeaderboardAroundCharacterRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardAroundCharacterRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundCharacterRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundCharacterRequest, CharacterType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundCharacterRequest, MaxResultsCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundCharacterRequest, UnknownData_Z4GK, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundCharacterRequest, PlayFabId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundCharacterRequest, StatisticName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardAroundCharacterRequest, 0x0050);
		}

		// struct FServerGetLeaderboardAroundUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardAroundUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, MaxResultsCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, UnknownData_ZB2D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, ProfileConstraints, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, StatisticName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, UseSpecificVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, UnknownData_XQH2, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardAroundUserRequest, Version, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardAroundUserRequest, 0x0048);
		}

		// struct FServerGetLeaderboardForUsersCharactersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetLeaderboardForUsersCharactersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardForUsersCharactersRequest, MaxResultsCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardForUsersCharactersRequest, UnknownData_ZYCI, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardForUsersCharactersRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetLeaderboardForUsersCharactersRequest, StatisticName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetLeaderboardForUsersCharactersRequest, 0x0030);
		}

		// struct FServerGetPlayerCombinedInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerCombinedInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerCombinedInfoRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerCombinedInfoRequest, InfoRequestParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerCombinedInfoRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerCombinedInfoRequest, 0x0028);
		}

		// struct FServerGetPlayerProfileRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerProfileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerProfileRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerProfileRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerProfileRequest, ProfileConstraints, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerProfileRequest, 0x0028);
		}

		// struct FServerGetPlayersSegmentsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayersSegmentsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersSegmentsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersSegmentsRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayersSegmentsRequest, 0x0020);
		}

		// struct FServerGetPlayersInSegmentRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayersInSegmentRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentRequest, ContinuationToken, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentRequest, MaxBatchSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentRequest, SecondsToLive, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayersInSegmentRequest, SegmentId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayersInSegmentRequest, 0x0038);
		}

		// struct FServerGetPlayerStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticsRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticsRequest, StatisticNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticsRequest, StatisticNameVersions, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerStatisticsRequest, 0x0040);
		}

		// struct FServerGetPlayerStatisticVersionsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerStatisticVersionsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticVersionsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerStatisticVersionsRequest, StatisticName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerStatisticVersionsRequest, 0x0020);
		}

		// struct FServerGetPlayerTagsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayerTagsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerTagsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerTagsRequest, Namespace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayerTagsRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayerTagsRequest, 0x0030);
		}

		// struct FServerGetPlayFabIDsFromFacebookIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromFacebookIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromFacebookIDsRequest, FacebookIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromFacebookIDsRequest, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest, FacebookInstantGamesIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromGenericIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromGenericIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromGenericIDsRequest, GenericIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromGenericIDsRequest, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest, NintendoSwitchDeviceIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromPSNAccountIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromPSNAccountIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromPSNAccountIDsRequest, IssuerId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromPSNAccountIDsRequest, UnknownData_NJWJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromPSNAccountIDsRequest, PSNAccountIDs, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromPSNAccountIDsRequest, 0x0020);
		}

		// struct FServerGetPlayFabIDsFromSteamIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromSteamIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromSteamIDsRequest, SteamStringIDs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromSteamIDsRequest, 0x0018);
		}

		// struct FServerGetPlayFabIDsFromXboxLiveIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPlayFabIDsFromXboxLiveIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromXboxLiveIDsRequest, Sandbox, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPlayFabIDsFromXboxLiveIDsRequest, XboxLiveAccountIDs, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPlayFabIDsFromXboxLiveIDsRequest, 0x0028);
		}

		// struct FServerGetPublisherDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetPublisherDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetPublisherDataRequest, Keys, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetPublisherDataRequest, 0x0018);
		}

		// struct FServerGetRandomResultTablesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetRandomResultTablesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetRandomResultTablesRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetRandomResultTablesRequest, TableIDs, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetRandomResultTablesRequest, 0x0028);
		}

		// struct FServerGetServerCustomIDsFromPlayFabIDsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetServerCustomIDsFromPlayFabIDsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetServerCustomIDsFromPlayFabIDsRequest, PlayFabIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetServerCustomIDsFromPlayFabIDsRequest, 0x0018);
		}

		// struct FServerGetSharedGroupDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetSharedGroupDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetSharedGroupDataRequest, GetMembers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetSharedGroupDataRequest, UnknownData_7H9G, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetSharedGroupDataRequest, Keys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetSharedGroupDataRequest, SharedGroupId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetSharedGroupDataRequest, 0x0030);
		}

		// struct FServerGetStoreItemsServerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetStoreItemsServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsServerRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsServerRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsServerRequest, PlayFabId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetStoreItemsServerRequest, StoreId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetStoreItemsServerRequest, 0x0040);
		}

		// struct FServerGetTimeRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetTimeRequest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetTimeRequest, 0x0008);
		}

		// struct FServerGetTitleDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetTitleDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetTitleDataRequest, Keys, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetTitleDataRequest, OverrideLabel, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetTitleDataRequest, 0x0028);
		}

		// struct FServerGetTitleNewsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetTitleNewsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetTitleNewsRequest, Count, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetTitleNewsRequest, UnknownData_MPLE, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetTitleNewsRequest, 0x0010);
		}

		// struct FServerGetUserAccountInfoRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserAccountInfoRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserAccountInfoRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserAccountInfoRequest, 0x0018);
		}

		// struct FServerGetUserBansRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserBansRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserBansRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserBansRequest, 0x0018);
		}

		// struct FServerGetUserDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataRequest, IfChangedFromDataVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataRequest, UnknownData_EGTT, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataRequest, Keys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserDataRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserDataRequest, 0x0030);
		}

		// struct FServerGetUserInventoryRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGetUserInventoryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserInventoryRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGetUserInventoryRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGetUserInventoryRequest, 0x0020);
		}

		// struct FServerGrantCharacterToUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantCharacterToUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantCharacterToUserRequest, CharacterName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantCharacterToUserRequest, CharacterType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantCharacterToUserRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantCharacterToUserRequest, PlayFabId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantCharacterToUserRequest, 0x0040);
		}

		// struct FServerGrantItemsToCharacterRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantItemsToCharacterRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToCharacterRequest, Annotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToCharacterRequest, CatalogVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToCharacterRequest, CharacterId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToCharacterRequest, CustomTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToCharacterRequest, ItemIds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToCharacterRequest, PlayFabId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantItemsToCharacterRequest, 0x0060);
		}

		// struct FServerGrantItemsToUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantItemsToUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUserRequest, Annotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUserRequest, CatalogVersion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUserRequest, CustomTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUserRequest, ItemIds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUserRequest, PlayFabId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantItemsToUserRequest, 0x0050);
		}

		// struct FServerGrantItemsToUsersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerGrantItemsToUsersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUsersRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUsersRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerGrantItemsToUsersRequest, ItemGrants, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerGrantItemsToUsersRequest, 0x0030);
		}

		// struct FServerLinkPSNAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLinkPSNAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkPSNAccountRequest, AuthCode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkPSNAccountRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkPSNAccountRequest, ForceLink, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkPSNAccountRequest, UnknownData_N7EG, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkPSNAccountRequest, IssuerId, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkPSNAccountRequest, PlayFabId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkPSNAccountRequest, RedirectUri, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLinkPSNAccountRequest, 0x0048);
		}

		// struct FServerLinkServerCustomIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLinkServerCustomIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkServerCustomIdRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkServerCustomIdRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkServerCustomIdRequest, UnknownData_0D1Y, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkServerCustomIdRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkServerCustomIdRequest, ServerCustomId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLinkServerCustomIdRequest, 0x0038);
		}

		// struct FServerLinkXboxAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLinkXboxAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkXboxAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkXboxAccountRequest, ForceLink, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkXboxAccountRequest, UnknownData_CQV0, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkXboxAccountRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLinkXboxAccountRequest, XboxToken, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLinkXboxAccountRequest, 0x0038);
		}

		// struct FServerLoginWithServerCustomIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLoginWithServerCustomIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithServerCustomIdRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithServerCustomIdRequest, UnknownData_8JIE, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithServerCustomIdRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithServerCustomIdRequest, InfoRequestParameters, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithServerCustomIdRequest, PlayerSecret, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithServerCustomIdRequest, ServerCustomId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLoginWithServerCustomIdRequest, 0x0040);
		}

		// struct FServerLoginWithSteamIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLoginWithSteamIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithSteamIdRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithSteamIdRequest, UnknownData_IDRZ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithSteamIdRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithSteamIdRequest, InfoRequestParameters, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithSteamIdRequest, SteamID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLoginWithSteamIdRequest, 0x0030);
		}

		// struct FServerLoginWithXboxRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLoginWithXboxRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxRequest, UnknownData_3BQ6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxRequest, InfoRequestParameters, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxRequest, XboxToken, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLoginWithXboxRequest, 0x0030);
		}

		// struct FServerLoginWithXboxIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerLoginWithXboxIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxIdRequest, CreateAccount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxIdRequest, UnknownData_D2EQ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxIdRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxIdRequest, InfoRequestParameters, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxIdRequest, Sandbox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerLoginWithXboxIdRequest, XboxId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerLoginWithXboxIdRequest, 0x0040);
		}

		// struct FServerModifyItemUsesRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerModifyItemUsesRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesRequest, ItemInstanceId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesRequest, PlayFabId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesRequest, UsesToAdd, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerModifyItemUsesRequest, UnknownData_0786, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerModifyItemUsesRequest, 0x0038);
		}

		// struct FServerMoveItemToCharacterFromCharacterRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerMoveItemToCharacterFromCharacterRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToCharacterFromCharacterRequest, GivingCharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToCharacterFromCharacterRequest, ItemInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToCharacterFromCharacterRequest, PlayFabId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToCharacterFromCharacterRequest, ReceivingCharacterId, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerMoveItemToCharacterFromCharacterRequest, 0x0048);
		}

		// struct FServerMoveItemToCharacterFromUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerMoveItemToCharacterFromUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToCharacterFromUserRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToCharacterFromUserRequest, ItemInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToCharacterFromUserRequest, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerMoveItemToCharacterFromUserRequest, 0x0038);
		}

		// struct FServerMoveItemToUserFromCharacterRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerMoveItemToUserFromCharacterRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToUserFromCharacterRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToUserFromCharacterRequest, ItemInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerMoveItemToUserFromCharacterRequest, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerMoveItemToUserFromCharacterRequest, 0x0038);
		}

		// struct FServerNotifyMatchmakerPlayerLeftRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerNotifyMatchmakerPlayerLeftRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerNotifyMatchmakerPlayerLeftRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerNotifyMatchmakerPlayerLeftRequest, LobbyId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerNotifyMatchmakerPlayerLeftRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerNotifyMatchmakerPlayerLeftRequest, 0x0030);
		}

		// struct FServerRedeemCouponRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRedeemCouponRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemCouponRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemCouponRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemCouponRequest, CouponCode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemCouponRequest, CustomTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemCouponRequest, PlayFabId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRedeemCouponRequest, 0x0050);
		}

		// struct FServerRedeemMatchmakerTicketRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRedeemMatchmakerTicketRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemMatchmakerTicketRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemMatchmakerTicketRequest, LobbyId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRedeemMatchmakerTicketRequest, Ticket, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRedeemMatchmakerTicketRequest, 0x0030);
		}

		// struct FServerRefreshGameServerInstanceHeartbeatRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRefreshGameServerInstanceHeartbeatRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRefreshGameServerInstanceHeartbeatRequest, LobbyId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRefreshGameServerInstanceHeartbeatRequest, 0x0018);
		}

		// struct FServerRegisterGameRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRegisterGameRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, Build, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, GameMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, LobbyId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, Region, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, UnknownData_QSFG, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, ServerIPV4Address, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, ServerIPV6Address, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, ServerPort, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, ServerPublicDNSName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRegisterGameRequest, Tags, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRegisterGameRequest, 0x0090);
		}

		// struct FServerRemoveFriendRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRemoveFriendRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemoveFriendRequest, FriendPlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemoveFriendRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRemoveFriendRequest, 0x0028);
		}

		// struct FServerRemoveGenericIDRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRemoveGenericIDRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemoveGenericIDRequest, GenericId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemoveGenericIDRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRemoveGenericIDRequest, 0x0020);
		}

		// struct FServerRemovePlayerTagRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRemovePlayerTagRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemovePlayerTagRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemovePlayerTagRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemovePlayerTagRequest, TagName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRemovePlayerTagRequest, 0x0030);
		}

		// struct FServerRemoveSharedGroupMembersRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRemoveSharedGroupMembersRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemoveSharedGroupMembersRequest, PlayFabIds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRemoveSharedGroupMembersRequest, SharedGroupId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRemoveSharedGroupMembersRequest, 0x0028);
		}

		// struct FServerReportPlayerServerRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerReportPlayerServerRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerReportPlayerServerRequest, Comment, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerReportPlayerServerRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerReportPlayerServerRequest, ReporteeId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerReportPlayerServerRequest, ReporterId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerReportPlayerServerRequest, 0x0040);
		}

		// struct FServerRevokeAllBansForUserRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeAllBansForUserRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeAllBansForUserRequest, PlayFabId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeAllBansForUserRequest, 0x0018);
		}

		// struct FServerRevokeBansRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeBansRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeBansRequest, BanIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeBansRequest, 0x0018);
		}

		// struct FServerRevokeInventoryItemRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeInventoryItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeInventoryItemRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeInventoryItemRequest, ItemInstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeInventoryItemRequest, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeInventoryItemRequest, 0x0038);
		}

		// struct FServerRevokeInventoryItemsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerRevokeInventoryItemsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerRevokeInventoryItemsRequest, Items, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerRevokeInventoryItemsRequest, 0x0018);
		}

		// struct FServerSavePushNotificationTemplateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSavePushNotificationTemplateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSavePushNotificationTemplateRequest, AndroidPayload, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSavePushNotificationTemplateRequest, ID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSavePushNotificationTemplateRequest, IOSPayload, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSavePushNotificationTemplateRequest, LocalizedPushNotificationTemplates, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSavePushNotificationTemplateRequest, Name, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSavePushNotificationTemplateRequest, 0x0050);
		}

		// struct FServerSendCustomAccountRecoveryEmailRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSendCustomAccountRecoveryEmailRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendCustomAccountRecoveryEmailRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendCustomAccountRecoveryEmailRequest, Email, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendCustomAccountRecoveryEmailRequest, EmailTemplateId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendCustomAccountRecoveryEmailRequest, Username, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSendCustomAccountRecoveryEmailRequest, 0x0040);
		}

		// struct FServerSendEmailFromTemplateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSendEmailFromTemplateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendEmailFromTemplateRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendEmailFromTemplateRequest, EmailTemplateId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendEmailFromTemplateRequest, PlayFabId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSendEmailFromTemplateRequest, 0x0030);
		}

		// struct FServerSendPushNotificationRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSendPushNotificationRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationRequest, AdvancedPlatformDelivery, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationRequest, Message, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationRequest, Package, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationRequest, Recipient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationRequest, Subject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationRequest, TargetPlatforms, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSendPushNotificationRequest, 0x0068);
		}

		// struct FServerSendPushNotificationFromTemplateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSendPushNotificationFromTemplateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationFromTemplateRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationFromTemplateRequest, PushNotificationTemplateId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSendPushNotificationFromTemplateRequest, Recipient, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSendPushNotificationFromTemplateRequest, 0x0030);
		}

		// struct FServerSetFriendTagsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetFriendTagsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetFriendTagsRequest, FriendPlayFabId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetFriendTagsRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetFriendTagsRequest, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetFriendTagsRequest, 0x0038);
		}

		// struct FServerSetGameServerInstanceDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetGameServerInstanceDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetGameServerInstanceDataRequest, GameServerData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetGameServerInstanceDataRequest, LobbyId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetGameServerInstanceDataRequest, 0x0028);
		}

		// struct FServerSetGameServerInstanceStateRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetGameServerInstanceStateRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetGameServerInstanceStateRequest, LobbyId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetGameServerInstanceStateRequest, State, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetGameServerInstanceStateRequest, UnknownData_PBY0, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetGameServerInstanceStateRequest, 0x0020);
		}

		// struct FServerSetGameServerInstanceTagsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetGameServerInstanceTagsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetGameServerInstanceTagsRequest, LobbyId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetGameServerInstanceTagsRequest, Tags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetGameServerInstanceTagsRequest, 0x0020);
		}

		// struct FServerSetPlayerSecretRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetPlayerSecretRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetPlayerSecretRequest, PlayerSecret, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetPlayerSecretRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetPlayerSecretRequest, 0x0028);
		}

		// struct FServerSetPublisherDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetPublisherDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetPublisherDataRequest, Key, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetPublisherDataRequest, Value, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetPublisherDataRequest, 0x0028);
		}

		// struct FServerSetTitleDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSetTitleDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetTitleDataRequest, Key, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSetTitleDataRequest, Value, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSetTitleDataRequest, 0x0028);
		}

		// struct FServerSubtractCharacterVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSubtractCharacterVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractCharacterVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractCharacterVirtualCurrencyRequest, UnknownData_XU7O, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractCharacterVirtualCurrencyRequest, CharacterId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractCharacterVirtualCurrencyRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractCharacterVirtualCurrencyRequest, PlayFabId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractCharacterVirtualCurrencyRequest, VirtualCurrency, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSubtractCharacterVirtualCurrencyRequest, 0x0048);
		}

		// struct FServerSubtractUserVirtualCurrencyRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerSubtractUserVirtualCurrencyRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractUserVirtualCurrencyRequest, Amount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractUserVirtualCurrencyRequest, UnknownData_XKMF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractUserVirtualCurrencyRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractUserVirtualCurrencyRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerSubtractUserVirtualCurrencyRequest, VirtualCurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerSubtractUserVirtualCurrencyRequest, 0x0038);
		}

		// struct FServerUnlinkPSNAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlinkPSNAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlinkPSNAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlinkPSNAccountRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlinkPSNAccountRequest, 0x0020);
		}

		// struct FServerUnlinkServerCustomIdRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlinkServerCustomIdRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlinkServerCustomIdRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlinkServerCustomIdRequest, PlayFabId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlinkServerCustomIdRequest, ServerCustomId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlinkServerCustomIdRequest, 0x0030);
		}

		// struct FServerUnlinkXboxAccountRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlinkXboxAccountRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlinkXboxAccountRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlinkXboxAccountRequest, PlayFabId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlinkXboxAccountRequest, 0x0020);
		}

		// struct FServerUnlockContainerInstanceRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlockContainerInstanceRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerInstanceRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerInstanceRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerInstanceRequest, ContainerItemInstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerInstanceRequest, CustomTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerInstanceRequest, KeyItemInstanceId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerInstanceRequest, PlayFabId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlockContainerInstanceRequest, 0x0060);
		}

		// struct FServerUnlockContainerItemRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUnlockContainerItemRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemRequest, CatalogVersion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemRequest, CharacterId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemRequest, ContainerItemId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemRequest, CustomTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUnlockContainerItemRequest, PlayFabId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUnlockContainerItemRequest, 0x0050);
		}

		// struct FServerUpdateAvatarUrlRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateAvatarUrlRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateAvatarUrlRequest, ImageUrl, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateAvatarUrlRequest, PlayFabId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateAvatarUrlRequest, 0x0028);
		}

		// struct FServerUpdateBansRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateBansRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateBansRequest, Bans, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateBansRequest, 0x0018);
		}

		// struct FServerUpdateCharacterDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateCharacterDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataRequest, Data, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataRequest, KeysToRemove, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataRequest, Permission, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataRequest, UnknownData_SJZM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterDataRequest, PlayFabId, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateCharacterDataRequest, 0x0050);
		}

		// struct FServerUpdateCharacterStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateCharacterStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterStatisticsRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterStatisticsRequest, CharacterStatistics, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterStatisticsRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateCharacterStatisticsRequest, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateCharacterStatisticsRequest, 0x0038);
		}

		// struct FServerUpdatePlayerStatisticsRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdatePlayerStatisticsRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdatePlayerStatisticsRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdatePlayerStatisticsRequest, ForceUpdate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdatePlayerStatisticsRequest, UnknownData_TEKM, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdatePlayerStatisticsRequest, PlayFabId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdatePlayerStatisticsRequest, Statistics, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdatePlayerStatisticsRequest, 0x0038);
		}

		// struct FServerUpdateSharedGroupDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateSharedGroupDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateSharedGroupDataRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateSharedGroupDataRequest, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateSharedGroupDataRequest, KeysToRemove, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateSharedGroupDataRequest, Permission, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateSharedGroupDataRequest, UnknownData_SQZT, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateSharedGroupDataRequest, SharedGroupId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateSharedGroupDataRequest, 0x0040);
		}

		// struct FServerUpdateUserDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateUserDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataRequest, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataRequest, KeysToRemove, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataRequest, Permission, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataRequest, UnknownData_5TZZ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserDataRequest, PlayFabId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateUserDataRequest, 0x0040);
		}

		// struct FServerUpdateUserInternalDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateUserInternalDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInternalDataRequest, CustomTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInternalDataRequest, Data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInternalDataRequest, KeysToRemove, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInternalDataRequest, PlayFabId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateUserInternalDataRequest, 0x0038);
		}

		// struct FServerUpdateUserInventoryItemDataRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerUpdateUserInventoryItemDataRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInventoryItemDataRequest, CharacterId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInventoryItemDataRequest, CustomTags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInventoryItemDataRequest, Data, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInventoryItemDataRequest, ItemInstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInventoryItemDataRequest, KeysToRemove, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerUpdateUserInventoryItemDataRequest, PlayFabId, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerUpdateUserInventoryItemDataRequest, 0x0058);
		}

		// struct FServerWriteServerCharacterEventRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerWriteServerCharacterEventRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerCharacterEventRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerCharacterEventRequest, CharacterId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerCharacterEventRequest, CustomTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerCharacterEventRequest, EventName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerCharacterEventRequest, PlayFabId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerCharacterEventRequest, Timestamp, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerWriteServerCharacterEventRequest, 0x0058);
		}

		// struct FServerWriteServerPlayerEventRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerWriteServerPlayerEventRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerPlayerEventRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerPlayerEventRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerPlayerEventRequest, EventName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerPlayerEventRequest, PlayFabId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteServerPlayerEventRequest, Timestamp, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerWriteServerPlayerEventRequest, 0x0048);
		}

		// struct FServerWriteTitleEventRequest : public FPlayFabRequestCommon
		TEST_METHOD(ScriptStruct__PlayFab__ServerWriteTitleEventRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteTitleEventRequest, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteTitleEventRequest, CustomTags, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteTitleEventRequest, EventName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerWriteTitleEventRequest, Timestamp, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerWriteTitleEventRequest, 0x0038);
		}

		// struct FTrackRenderData
		TEST_METHOD(ScriptStruct__GeometryCache__TrackRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackRenderData, UnknownData_AOWK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackRenderData, 0x0070);
		}

		// struct FGeometryCacheMeshData
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshData, UnknownData_ZIO8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshData, 0x00A8);
		}

		// struct FGeometryCacheVertexInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheVertexInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheVertexInfo, UnknownData_0DG1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheVertexInfo, 0x0008);
		}

		// struct FGeometryCacheMeshBatchInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshBatchInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshBatchInfo, UnknownData_DOC7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshBatchInfo, 0x000C);
		}

		// struct FTemplateSequenceBindingOverrideData
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, bOverridesDefault, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, UnknownData_WGFJ, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceBindingOverrideData, 0x000C);
		}

		// struct FPointWeightMap
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__PointWeightMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointWeightMap, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointWeightMap, 0x0010);
		}

		// struct FClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothPhysicalMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, WeightMaps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, AnimDriveMultipliers, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x00F8);
		}

		// struct FClothConstraintSetup_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConstraintSetup_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup_Legacy, 0x0010);
		}

		// struct FClothLODDataCommon
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothLODDataCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, CollisionData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, bUseMultipleInfluences, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_I26R, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, SkinningKernelRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_VN6Y, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODDataCommon, 0x0160);
		}

		// struct FClothConfig_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConfig_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_TL2N, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, bUseGravityOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_IR7L, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherStiffness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherLimit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CollisionThickness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveSpringStiffness, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveDamperStiffness, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig_Legacy, 0x00D4);
		}

		// struct FClothParameterMask_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothParameterMask_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_8BQS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_A0W9, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_T2YE, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_Legacy, 0x0030);
		}

		// struct FGameplayResourceSet
		TEST_METHOD(ScriptStruct__GameplayTasks__GameplayResourceSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayResourceSet, UnknownData_K5DD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayResourceSet, 0x0002);
		}

		// struct FSupportedAreaData
		TEST_METHOD(ScriptStruct__NavigationSystem__SupportedAreaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, UnknownData_ZXD7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedAreaData, 0x0020);
		}

		// struct FNavCollisionCylinder
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Height, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionCylinder, 0x0014);
		}

		// struct FNavCollisionBox
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Extent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionBox, 0x0018);
		}

		// struct FNavGraphNode
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, UnknownData_RB6L, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphNode, 0x0018);
		}

		// struct FNavigationFilterArea
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, AreaClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, TravelCostOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, EnteringCostOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, UnknownData_6GF9, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterArea, 0x0018);
		}

		// struct FNavigationFilterFlags
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterFlags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterFlags, UnknownData_3GTO, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterFlags, 0x0004);
		}

		// struct FNavGraphEdge
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphEdge, UnknownData_KAVH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphEdge, 0x0018);
		}

		// struct FNavLinkCustomInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__NavigationSystem__NavLinkCustomInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, NavLinkUserId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, UnknownData_1JKM, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavLinkCustomInstanceData, 0x0070);
		}

		// struct FRecastNavMeshGenerationProperties
		TEST_METHOD(ScriptStruct__NavigationSystem__RecastNavMeshGenerationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TilePoolSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileSizeUU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentHeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxSlope, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxStepHeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MinRegionArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MergeRegionSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MaxSimplificationError, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileNumberHardLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionPartitioning, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerPartitioning, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_B8VT, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionChunkSplits, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerChunkSplits, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_3I80, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecastNavMeshGenerationProperties, 0x0040);
		}

		// struct FBrushStampData
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BrushStampData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushStampData, UnknownData_M804, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushStampData, 0x00AC);
		}

		// struct FBehaviorInfo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BehaviorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, Behavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, UnknownData_QRSW, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorInfo, 0x0020);
		}

		// struct FActiveGizmo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__ActiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGizmo, UnknownData_TKMU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGizmo, 0x0030);
		}

		// struct FGizmoFloatParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoFloatParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, CurrentValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoFloatParameterChange, 0x0008);
		}

		// struct FGizmoVec2ParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoVec2ParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, CurrentValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoVec2ParameterChange, 0x0010);
		}

		// struct FInputRayHit
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__InputRayHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRayHit, UnknownData_TKF0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRayHit, 0x0028);
		}

		// struct FChatMessage
		TEST_METHOD(ScriptStruct__POLYGON__ChatMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, Sender, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, UnknownData_2WC8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatMessage, Message, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChatMessage, 0x0020);
		}

		// struct FPlayerId
		TEST_METHOD(ScriptStruct__POLYGON__PlayerId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerId, PlayerMasterId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerId, PlayerTitleId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerId, 0x0020);
		}

		// struct FPlayerAssist
		TEST_METHOD(ScriptStruct__POLYGON__PlayerAssist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerAssist, PlayerAssist, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerAssist, Damage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerAssist, UnknownData_O3AN, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerAssist, TimerResetAssist, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerAssist, 0x0018);
		}

		// struct FWeaponHitUnreliable
		TEST_METHOD(ScriptStruct__POLYGON__WeaponHitUnreliable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponHitUnreliable, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponHitUnreliable, ImpactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponHitUnreliable, PhysMaterial, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponHitUnreliable, 0x0020);
		}

		// struct FWeaponHitOnCharacter
		TEST_METHOD(ScriptStruct__POLYGON__WeaponHitOnCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponHitOnCharacter, TraceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponHitOnCharacter, Location, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponHitOnCharacter, ImpactNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponHitOnCharacter, Actor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponHitOnCharacter, BoneName, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponHitOnCharacter, PhysMaterial, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponHitOnCharacter, ReticleSpread, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponHitOnCharacter, 0x0040);
		}

		// struct FItemReference : public FTableRowBase
		TEST_METHOD(ScriptStruct__POLYGON__ItemReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemReference, Item, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemReference, 0x0010);
		}

		// struct FLevelInfo : public FTableRowBase
		TEST_METHOD(ScriptStruct__POLYGON__LevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelInfo, LevelID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelInfo, Level, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelInfo, ProgressRequired, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelInfo, LevelIcon, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelInfo, 0x0020);
		}

		// struct FMapInfo : public FTableRowBase
		TEST_METHOD(ScriptStruct__POLYGON__MapInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, MapRowName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, MapName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, MapDisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, MaxPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, MaxScoreForWin, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, MapPreview, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, MinimapImage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, Dimension, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, CameraPosition, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, CameraRotate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, IsDevelopment, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapInfo, UnknownData_SVL4, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapInfo, 0x0068);
		}

		// struct FGameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTag, TagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTag, 0x0008);
		}

		// struct FGameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_OYWN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// struct FGameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// struct FGameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_6IFQ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceRestrictedTagList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0020);
		}

		// struct FGameplayTagTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0020);
		}

		// struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedGameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, bAllowNonRestrictedChildren, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, UnknownData_9JBQ, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedGameplayTagTableRow, 0x0028);
		}

		// struct FGameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// struct FGameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0010);
		}

		// struct FRestrictedConfigInfo
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedConfigInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, RestrictedConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, Owners, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedConfigInfo, 0x0020);
		}

		// struct FGameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_BBWW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// struct FGameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_QVEF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0010);
		}

		// struct FGameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_003I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0050);
		}

		// struct FPropertyAccessSegment
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Struct, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Property, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, ArrayIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Flags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, UnknownData_32NW, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessSegment, 0x0040);
		}

		// struct FPropertyAccessPath
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, PathSegmentStartIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, PathSegmentCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, UnknownData_9VLK, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessPath, 0x000C);
		}

		// struct FPropertyAccessCopy
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessCopy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, AccessIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, DestAccessStartIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, DestAccessEndIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, UnknownData_1I22, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessCopy, 0x0010);
		}

		// struct FPropertyAccessIndirectionChain
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessIndirectionChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, Property, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, IndirectionStartIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, IndirectionEndIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, EventId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, UnknownData_A7SW, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessIndirectionChain, 0x0030);
		}

		// struct FPropertyAccessIndirection
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessIndirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ArrayProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Function, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ReturnBufferSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ReturnBufferAlignment, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ArrayIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ObjectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Type, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, UnknownData_ZF3F, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessIndirection, 0x0040);
		}

		// struct FPropertyAccessCopyBatch
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessCopyBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopyBatch, Copies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessCopyBatch, 0x0010);
		}

		// struct FPropertyAccessLibrary
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, PathSegments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, SrcPaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, DestPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, CopyBatches, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, SrcAccesses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, DestAccesses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, Indirections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, EventAccessIndices, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, UnknownData_8A21, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessLibrary, 0x00C8);
		}

		// struct FMediaPlayerTrackOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerTrackOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Audio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Caption, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Script, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Subtitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Text, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Video, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerTrackOptions, 0x001C);
		}

		// struct FMediaPlayerOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_1WRM, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, SeekTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, PlayOnOpen, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Loop, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_57HL, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerOptions, 0x0030);
		}

		// struct FSoundVariation
		TEST_METHOD(ScriptStruct__SoundUtilities__SoundVariation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, SoundWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, ProbabilityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, VolumeRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, PitchRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundVariation, UnknownData_J686, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundVariation, 0x0020);
		}

		// struct FAutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_OXW9, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// struct FGameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0028);
		}

		// struct FMovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// struct FMovieSceneActorReferenceKey
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, ComponentName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, SocketName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceKey, 0x0028);
		}

		// struct FMovieSceneActorReferenceData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_XCIF, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyValues, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_6BI7, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceData, 0x00B0);
		}

		// struct FMovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_64GA, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_B5G3, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_CZHD, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSourceTrigger
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UnknownData_7ZS3, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UnknownData_92GC, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTrigger, 0x0020);
		}

		// struct FMovieSceneCameraShakeSourceTriggerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, UnknownData_928H, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTriggerChannel, 0x0088);
		}

		// struct FMovieSceneEventPtrs
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPtrs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, Function, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, BoundObjectProperty, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPtrs, 0x0028);
		}

		// struct FMovieSceneEvent
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvent, Ptrs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvent, 0x0028);
		}

		// struct FVectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x01E8);
		}

		// struct FMovieSceneSkeletalAnimRootMotionTrackParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimRootMotionTrackParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimRootMotionTrackParams, UnknownData_CCET, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimRootMotionTrackParams, 0x0030);
		}

		// struct FMovieSceneStringChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, bHasDefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, UnknownData_AU4R, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringChannel, 0x00A0);
		}

		// struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_FOQX, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_62OC, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00E0);
		}

		// struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_WS3K, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0048);
		}

		// struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_E2EE, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_YFTY, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_6SDL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_N51X, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_UFB2, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0650);
		}

		// struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorReferenceData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x00E8);
		}

		// struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioSection, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x0028);
		}

		// struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_XM2I, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_SUI1, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraShakeSourceShakeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraShakeSourceTriggerSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerTimes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerValues, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, 0x0040);
		}

		// struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_ZVOL, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0038);
		}

		// struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_R4X7, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x02C0);
		}

		// struct FMovieSceneEventPayloadVariable
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPayloadVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPayloadVariable, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPayloadVariable, 0x0010);
		}

		// struct FMovieSceneEventTriggerData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTriggerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, Ptrs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, ObjectBindingId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, UnknownData_ZEVB, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTriggerData, 0x0048);
		}

		// struct FMovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_SK3P, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0028);
		}

		// struct FEventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, Parameters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0030);
		}

		// struct FMovieSceneEventSectionData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, UnknownData_UKAP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0088);
		}

		// struct FMovieSceneEventSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, UnknownData_5CES, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x00B0);
		}

		// struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_VRDD, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00D8);
		}

		// struct FScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x00A8);
		}

		// struct FBoolParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__BoolParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolParameterNameAndCurve, 0x0098);
		}

		// struct FVector2DParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__Vector2DParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, YCurve, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2DParameterNameAndCurves, 0x0148);
		}

		// struct FColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x0288);
		}

		// struct FTransformParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__TransformParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Translation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Rotation, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Scale, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformParameterNameAndCurves, 0x05A8);
		}

		// struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Bools, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vector2Ds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Transforms, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0088);
		}

		// struct FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneObjectPropertyTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPropertyTemplate, ObjectChannel, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPropertyTemplate, 0x00F8);
		}

		// struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, MaterialIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_2JVN, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0088);
		}

		// struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleChannel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleChannel, 0x0098);
		}

		// struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x00B8);
		}

		// struct FMovieScenePrimitiveMaterialTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScenePrimitiveMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, UnknownData_1SQT, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialChannel, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePrimitiveMaterialTemplate, 0x00E8);
		}

		// struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_UNOS, 0x02BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x02C0);
		}

		// struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00D8);
		}

		// struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_VJ8F, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00C8);
		}

		// struct FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_HRBX, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_TYHP, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bForceCustomMode, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_RW3C, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_MU8G, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x00D8);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x00E0);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x0100);
		}

		// struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x00C0);
		}

		// struct FLevelVisibilityComponentData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__LevelVisibilityComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelVisibilityComponentData, Section, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelVisibilityComponentData, 0x0008);
		}

		// struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_9I8C, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0028);
		}

		// struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, UnknownData_T7BE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, Vector, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0040);
		}

		// struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, Vector, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_TNWZ, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0038);
		}

		// struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, Vector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0030);
		}

		// struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00C8);
		}

		// struct FMovieSceneEventChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, UnknownData_4EE5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventChannel, 0x0088);
		}

		// struct FTagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0018);
		}

		// struct FAssetRegistryDependencyOptions
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetRegistryDependencyOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftPackageReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardPackageReferences, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSearchableNames, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftManagementReferences, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardManagementReferences, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetRegistryDependencyOptions, 0x0005);
		}

		// struct FAnalyticsEventAttr
		TEST_METHOD(ScriptStruct__AnalyticsBlueprintLibrary__AnalyticsEventAttr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalyticsEventAttr, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalyticsEventAttr, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalyticsEventAttr, 0x0020);
		}

		// struct FProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_4907, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// struct FProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x004C);
		}

		// struct FProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_IH9F, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// struct FBodyInstanceCore
		TEST_METHOD(ScriptStruct__PhysicsCore__BodyInstanceCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstanceCore, UnknownData_YON5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstanceCore, UnknownData_CQIO, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstanceCore, 0x0018);
		}

		// struct FFractureMaterial
		TEST_METHOD(ScriptStruct__ApexDestruction__FractureMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, Tangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UAngle, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, InteriorElementIndex, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureMaterial, 0x0024);
		}

		// struct FDestructibleChunkParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleChunkParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bIsSupportChunk, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotFracture, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotDamage, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotCrumble, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleChunkParameters, 0x0004);
		}

		// struct FDestructibleDamageParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDamageParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageSpread, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bEnableImpactDamage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_L7BI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactDamage, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DefaultImpactDamageDepth, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bCustomImpactResistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_XKNT, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactResistance, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDamageParameters, 0x001C);
		}

		// struct FDestructibleAdvancedParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleAdvancedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, DamageCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, ImpactVelocityThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, MaxChunkSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, FractureImpulseScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleAdvancedParameters, 0x0010);
		}

		// struct FDestructibleSpecialHierarchyDepths
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleSpecialHierarchyDepths)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, SupportDepth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, MinimumFractureDepth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, bEnableDebris, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, UnknownData_215I, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, DebrisDepth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, EssentialDepth, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleSpecialHierarchyDepths, 0x0014);
		}

		// struct FDestructibleDepthParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDepthParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDepthParameters, ImpactDamageOverride, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDepthParameters, 0x0001);
		}

		// struct FDestructibleParametersFlag
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParametersFlag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParametersFlag, UnknownData_XEZX, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParametersFlag, 0x0004);
		}

		// struct FDestructibleDebrisParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDebrisParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMax, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMin, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, ValidBounds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDebrisParameters, 0x002C);
		}

		// struct FDestructibleParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DamageParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DebrisParameters, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, AdvancedParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, SpecialHierarchyDepths, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_4H4P, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DepthParameters, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, Flags, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_JWXT, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParameters, 0x0088);
		}

		// struct FActorLayer
		TEST_METHOD(ScriptStruct__ActorLayerUtilities__ActorLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLayer, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorLayer, 0x0008);
		}

		// struct FSHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// struct FCustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// struct FChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// struct FFileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileHash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_7GBI, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_DN8Z, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_GQBM, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0068);
		}

		// struct FChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_0CAB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, FileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_ONFQ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// struct FSessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_1C00, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// struct FSessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_6BNR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// struct FSessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_7NVS, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// struct FSessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_L3E3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_WM1X, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0090);
		}

		// struct FSessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, Username, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// struct FLightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_UN5P, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}
	};
}
